
RTOS-WIFI-WINC1500-get-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e23c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040e23c  0040e23c  0001e23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  0040e244  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c688  204009d8  0040ec1c  000209d8  2**2
                  ALLOC
  4 .stack        00002000  2040d060  0041b2a4  000209d8  2**0
                  ALLOC
  5 .heap         00000200  2040f060  0041d2a4  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003567c  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006b56  00000000  00000000  000560db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000125fc  00000000  00000000  0005cc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001508  00000000  00000000  0006f22d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001838  00000000  00000000  00070735  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000106a2  00000000  00000000  00071f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001c824  00000000  00000000  0008260f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a55c  00000000  00000000  0009ee33  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004cfc  00000000  00000000  00139390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 f0 40 20 e9 57 40 00 e7 57 40 00 e7 57 40 00     `.@ .W@..W@..W@.
  400010:	e7 57 40 00 e7 57 40 00 e7 57 40 00 00 00 00 00     .W@..W@..W@.....
	...
  40002c:	99 05 40 00 e7 57 40 00 00 00 00 00 39 06 40 00     ..@..W@.....9.@.
  40003c:	a1 06 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     ..@..W@..W@..W@.
  40004c:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  40005c:	e7 57 40 00 e7 57 40 00 00 00 00 00 01 53 40 00     .W@..W@......S@.
  40006c:	15 53 40 00 29 53 40 00 e7 57 40 00 e7 57 40 00     .S@.)S@..W@..W@.
  40007c:	e7 57 40 00 3d 53 40 00 51 53 40 00 e7 57 40 00     .W@.=S@.QS@..W@.
  40008c:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  40009c:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  4000ac:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  4000bc:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  4000cc:	e7 57 40 00 00 00 00 00 e7 57 40 00 00 00 00 00     .W@......W@.....
  4000dc:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  4000ec:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  4000fc:	e7 57 40 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .W@..W@..W@..W@.
  40010c:	e7 57 40 00 e7 57 40 00 00 00 00 00 00 00 00 00     .W@..W@.........
  40011c:	00 00 00 00 e7 57 40 00 e7 57 40 00 e7 57 40 00     .....W@..W@..W@.
  40012c:	e7 57 40 00 e7 57 40 00 00 00 00 00 e7 57 40 00     .W@..W@......W@.
  40013c:	e7 57 40 00                                         .W@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	0040e244 	.word	0x0040e244

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040e244 	.word	0x0040e244
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	0040e244 	.word	0x0040e244
  4001a8:	00000000 	.word	0x00000000

004001ac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001ae:	b083      	sub	sp, #12
  4001b0:	4605      	mov	r5, r0
  4001b2:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001b4:	2300      	movs	r3, #0
  4001b6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001b8:	4b2a      	ldr	r3, [pc, #168]	; (400264 <usart_serial_getchar+0xb8>)
  4001ba:	4298      	cmp	r0, r3
  4001bc:	d013      	beq.n	4001e6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001be:	4b2a      	ldr	r3, [pc, #168]	; (400268 <usart_serial_getchar+0xbc>)
  4001c0:	4298      	cmp	r0, r3
  4001c2:	d018      	beq.n	4001f6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4001c4:	4b29      	ldr	r3, [pc, #164]	; (40026c <usart_serial_getchar+0xc0>)
  4001c6:	4298      	cmp	r0, r3
  4001c8:	d01d      	beq.n	400206 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4001ca:	4b29      	ldr	r3, [pc, #164]	; (400270 <usart_serial_getchar+0xc4>)
  4001cc:	429d      	cmp	r5, r3
  4001ce:	d022      	beq.n	400216 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001d0:	4b28      	ldr	r3, [pc, #160]	; (400274 <usart_serial_getchar+0xc8>)
  4001d2:	429d      	cmp	r5, r3
  4001d4:	d027      	beq.n	400226 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001d6:	4b28      	ldr	r3, [pc, #160]	; (400278 <usart_serial_getchar+0xcc>)
  4001d8:	429d      	cmp	r5, r3
  4001da:	d02e      	beq.n	40023a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4001dc:	4b27      	ldr	r3, [pc, #156]	; (40027c <usart_serial_getchar+0xd0>)
  4001de:	429d      	cmp	r5, r3
  4001e0:	d035      	beq.n	40024e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4001e2:	b003      	add	sp, #12
  4001e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4001e6:	461f      	mov	r7, r3
  4001e8:	4e25      	ldr	r6, [pc, #148]	; (400280 <usart_serial_getchar+0xd4>)
  4001ea:	4621      	mov	r1, r4
  4001ec:	4638      	mov	r0, r7
  4001ee:	47b0      	blx	r6
  4001f0:	2800      	cmp	r0, #0
  4001f2:	d1fa      	bne.n	4001ea <usart_serial_getchar+0x3e>
  4001f4:	e7e9      	b.n	4001ca <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4001f6:	461f      	mov	r7, r3
  4001f8:	4e21      	ldr	r6, [pc, #132]	; (400280 <usart_serial_getchar+0xd4>)
  4001fa:	4621      	mov	r1, r4
  4001fc:	4638      	mov	r0, r7
  4001fe:	47b0      	blx	r6
  400200:	2800      	cmp	r0, #0
  400202:	d1fa      	bne.n	4001fa <usart_serial_getchar+0x4e>
  400204:	e7e4      	b.n	4001d0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  400206:	461f      	mov	r7, r3
  400208:	4e1d      	ldr	r6, [pc, #116]	; (400280 <usart_serial_getchar+0xd4>)
  40020a:	4621      	mov	r1, r4
  40020c:	4638      	mov	r0, r7
  40020e:	47b0      	blx	r6
  400210:	2800      	cmp	r0, #0
  400212:	d1fa      	bne.n	40020a <usart_serial_getchar+0x5e>
  400214:	e7df      	b.n	4001d6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  400216:	461f      	mov	r7, r3
  400218:	4e19      	ldr	r6, [pc, #100]	; (400280 <usart_serial_getchar+0xd4>)
  40021a:	4621      	mov	r1, r4
  40021c:	4638      	mov	r0, r7
  40021e:	47b0      	blx	r6
  400220:	2800      	cmp	r0, #0
  400222:	d1fa      	bne.n	40021a <usart_serial_getchar+0x6e>
  400224:	e7da      	b.n	4001dc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  400226:	461e      	mov	r6, r3
  400228:	4d16      	ldr	r5, [pc, #88]	; (400284 <usart_serial_getchar+0xd8>)
  40022a:	a901      	add	r1, sp, #4
  40022c:	4630      	mov	r0, r6
  40022e:	47a8      	blx	r5
  400230:	2800      	cmp	r0, #0
  400232:	d1fa      	bne.n	40022a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  400234:	9b01      	ldr	r3, [sp, #4]
  400236:	7023      	strb	r3, [r4, #0]
  400238:	e7d3      	b.n	4001e2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40023a:	461e      	mov	r6, r3
  40023c:	4d11      	ldr	r5, [pc, #68]	; (400284 <usart_serial_getchar+0xd8>)
  40023e:	a901      	add	r1, sp, #4
  400240:	4630      	mov	r0, r6
  400242:	47a8      	blx	r5
  400244:	2800      	cmp	r0, #0
  400246:	d1fa      	bne.n	40023e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e7c9      	b.n	4001e2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40024e:	461e      	mov	r6, r3
  400250:	4d0c      	ldr	r5, [pc, #48]	; (400284 <usart_serial_getchar+0xd8>)
  400252:	a901      	add	r1, sp, #4
  400254:	4630      	mov	r0, r6
  400256:	47a8      	blx	r5
  400258:	2800      	cmp	r0, #0
  40025a:	d1fa      	bne.n	400252 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40025c:	9b01      	ldr	r3, [sp, #4]
  40025e:	7023      	strb	r3, [r4, #0]
}
  400260:	e7bf      	b.n	4001e2 <usart_serial_getchar+0x36>
  400262:	bf00      	nop
  400264:	400e0800 	.word	0x400e0800
  400268:	400e0a00 	.word	0x400e0a00
  40026c:	400e1a00 	.word	0x400e1a00
  400270:	400e1c00 	.word	0x400e1c00
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000
  40027c:	4002c000 	.word	0x4002c000
  400280:	004056c1 	.word	0x004056c1
  400284:	004057cf 	.word	0x004057cf

00400288 <usart_serial_putchar>:
{
  400288:	b570      	push	{r4, r5, r6, lr}
  40028a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40028c:	4b2a      	ldr	r3, [pc, #168]	; (400338 <usart_serial_putchar+0xb0>)
  40028e:	4298      	cmp	r0, r3
  400290:	d013      	beq.n	4002ba <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  400292:	4b2a      	ldr	r3, [pc, #168]	; (40033c <usart_serial_putchar+0xb4>)
  400294:	4298      	cmp	r0, r3
  400296:	d019      	beq.n	4002cc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  400298:	4b29      	ldr	r3, [pc, #164]	; (400340 <usart_serial_putchar+0xb8>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d01f      	beq.n	4002de <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40029e:	4b29      	ldr	r3, [pc, #164]	; (400344 <usart_serial_putchar+0xbc>)
  4002a0:	4298      	cmp	r0, r3
  4002a2:	d025      	beq.n	4002f0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4002a4:	4b28      	ldr	r3, [pc, #160]	; (400348 <usart_serial_putchar+0xc0>)
  4002a6:	4298      	cmp	r0, r3
  4002a8:	d02b      	beq.n	400302 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4002aa:	4b28      	ldr	r3, [pc, #160]	; (40034c <usart_serial_putchar+0xc4>)
  4002ac:	4298      	cmp	r0, r3
  4002ae:	d031      	beq.n	400314 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4002b0:	4b27      	ldr	r3, [pc, #156]	; (400350 <usart_serial_putchar+0xc8>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d037      	beq.n	400326 <usart_serial_putchar+0x9e>
	return 0;
  4002b6:	2000      	movs	r0, #0
}
  4002b8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002ba:	461e      	mov	r6, r3
  4002bc:	4d25      	ldr	r5, [pc, #148]	; (400354 <usart_serial_putchar+0xcc>)
  4002be:	4621      	mov	r1, r4
  4002c0:	4630      	mov	r0, r6
  4002c2:	47a8      	blx	r5
  4002c4:	2800      	cmp	r0, #0
  4002c6:	d1fa      	bne.n	4002be <usart_serial_putchar+0x36>
		return 1;
  4002c8:	2001      	movs	r0, #1
  4002ca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002cc:	461e      	mov	r6, r3
  4002ce:	4d21      	ldr	r5, [pc, #132]	; (400354 <usart_serial_putchar+0xcc>)
  4002d0:	4621      	mov	r1, r4
  4002d2:	4630      	mov	r0, r6
  4002d4:	47a8      	blx	r5
  4002d6:	2800      	cmp	r0, #0
  4002d8:	d1fa      	bne.n	4002d0 <usart_serial_putchar+0x48>
		return 1;
  4002da:	2001      	movs	r0, #1
  4002dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002de:	461e      	mov	r6, r3
  4002e0:	4d1c      	ldr	r5, [pc, #112]	; (400354 <usart_serial_putchar+0xcc>)
  4002e2:	4621      	mov	r1, r4
  4002e4:	4630      	mov	r0, r6
  4002e6:	47a8      	blx	r5
  4002e8:	2800      	cmp	r0, #0
  4002ea:	d1fa      	bne.n	4002e2 <usart_serial_putchar+0x5a>
		return 1;
  4002ec:	2001      	movs	r0, #1
  4002ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4002f0:	461e      	mov	r6, r3
  4002f2:	4d18      	ldr	r5, [pc, #96]	; (400354 <usart_serial_putchar+0xcc>)
  4002f4:	4621      	mov	r1, r4
  4002f6:	4630      	mov	r0, r6
  4002f8:	47a8      	blx	r5
  4002fa:	2800      	cmp	r0, #0
  4002fc:	d1fa      	bne.n	4002f4 <usart_serial_putchar+0x6c>
		return 1;
  4002fe:	2001      	movs	r0, #1
  400300:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400302:	461e      	mov	r6, r3
  400304:	4d14      	ldr	r5, [pc, #80]	; (400358 <usart_serial_putchar+0xd0>)
  400306:	4621      	mov	r1, r4
  400308:	4630      	mov	r0, r6
  40030a:	47a8      	blx	r5
  40030c:	2800      	cmp	r0, #0
  40030e:	d1fa      	bne.n	400306 <usart_serial_putchar+0x7e>
		return 1;
  400310:	2001      	movs	r0, #1
  400312:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400314:	461e      	mov	r6, r3
  400316:	4d10      	ldr	r5, [pc, #64]	; (400358 <usart_serial_putchar+0xd0>)
  400318:	4621      	mov	r1, r4
  40031a:	4630      	mov	r0, r6
  40031c:	47a8      	blx	r5
  40031e:	2800      	cmp	r0, #0
  400320:	d1fa      	bne.n	400318 <usart_serial_putchar+0x90>
		return 1;
  400322:	2001      	movs	r0, #1
  400324:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400326:	461e      	mov	r6, r3
  400328:	4d0b      	ldr	r5, [pc, #44]	; (400358 <usart_serial_putchar+0xd0>)
  40032a:	4621      	mov	r1, r4
  40032c:	4630      	mov	r0, r6
  40032e:	47a8      	blx	r5
  400330:	2800      	cmp	r0, #0
  400332:	d1fa      	bne.n	40032a <usart_serial_putchar+0xa2>
		return 1;
  400334:	2001      	movs	r0, #1
  400336:	bd70      	pop	{r4, r5, r6, pc}
  400338:	400e0800 	.word	0x400e0800
  40033c:	400e0a00 	.word	0x400e0a00
  400340:	400e1a00 	.word	0x400e1a00
  400344:	400e1c00 	.word	0x400e1c00
  400348:	40024000 	.word	0x40024000
  40034c:	40028000 	.word	0x40028000
  400350:	4002c000 	.word	0x4002c000
  400354:	004056af 	.word	0x004056af
  400358:	004057b9 	.word	0x004057b9

0040035c <configure_console>:

/**
* \brief Configure UART console.
*/
void configure_console(void)
{
  40035c:	b570      	push	{r4, r5, r6, lr}
  40035e:	b086      	sub	sp, #24
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400360:	200e      	movs	r0, #14
  400362:	4e17      	ldr	r6, [pc, #92]	; (4003c0 <configure_console+0x64>)
  400364:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400366:	4d17      	ldr	r5, [pc, #92]	; (4003c4 <configure_console+0x68>)
  400368:	4b17      	ldr	r3, [pc, #92]	; (4003c8 <configure_console+0x6c>)
  40036a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40036c:	4a17      	ldr	r2, [pc, #92]	; (4003cc <configure_console+0x70>)
  40036e:	4b18      	ldr	r3, [pc, #96]	; (4003d0 <configure_console+0x74>)
  400370:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400372:	4a18      	ldr	r2, [pc, #96]	; (4003d4 <configure_console+0x78>)
  400374:	4b18      	ldr	r3, [pc, #96]	; (4003d8 <configure_console+0x7c>)
  400376:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  400378:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40037c:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  40037e:	23c0      	movs	r3, #192	; 0xc0
  400380:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  400382:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400386:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  400388:	2400      	movs	r4, #0
  40038a:	9403      	str	r4, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40038c:	9404      	str	r4, [sp, #16]
  40038e:	200e      	movs	r0, #14
  400390:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  400392:	4a12      	ldr	r2, [pc, #72]	; (4003dc <configure_console+0x80>)
  400394:	4669      	mov	r1, sp
  400396:	4628      	mov	r0, r5
  400398:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <configure_console+0x84>)
  40039a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40039c:	4628      	mov	r0, r5
  40039e:	4b11      	ldr	r3, [pc, #68]	; (4003e4 <configure_console+0x88>)
  4003a0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4003a2:	4628      	mov	r0, r5
  4003a4:	4b10      	ldr	r3, [pc, #64]	; (4003e8 <configure_console+0x8c>)
  4003a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4003a8:	4e10      	ldr	r6, [pc, #64]	; (4003ec <configure_console+0x90>)
  4003aa:	6833      	ldr	r3, [r6, #0]
  4003ac:	4621      	mov	r1, r4
  4003ae:	6898      	ldr	r0, [r3, #8]
  4003b0:	4d0f      	ldr	r5, [pc, #60]	; (4003f0 <configure_console+0x94>)
  4003b2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4003b4:	6833      	ldr	r3, [r6, #0]
  4003b6:	4621      	mov	r1, r4
  4003b8:	6858      	ldr	r0, [r3, #4]
  4003ba:	47a8      	blx	r5
  };

  /* Configure UART console. */
  sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  stdio_serial_init(CONF_UART, &uart_serial_options);
}
  4003bc:	b006      	add	sp, #24
  4003be:	bd70      	pop	{r4, r5, r6, pc}
  4003c0:	00405509 	.word	0x00405509
  4003c4:	40028000 	.word	0x40028000
  4003c8:	2040d024 	.word	0x2040d024
  4003cc:	00400289 	.word	0x00400289
  4003d0:	2040d020 	.word	0x2040d020
  4003d4:	004001ad 	.word	0x004001ad
  4003d8:	2040d01c 	.word	0x2040d01c
  4003dc:	08f0d180 	.word	0x08f0d180
  4003e0:	00405759 	.word	0x00405759
  4003e4:	004057ad 	.word	0x004057ad
  4003e8:	004057b3 	.word	0x004057b3
  4003ec:	20400028 	.word	0x20400028
  4003f0:	00406431 	.word	0x00406431

004003f4 <inet_aton>:
* This replaces inet_addr, the return value from which
* cannot distinguish between failure and a local broadcast address.
* http://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/unpv12e/libfree/inet_aton.c
*/
int inet_aton(const char *cp, in_addr *ap)
{
  4003f4:	b4f0      	push	{r4, r5, r6, r7}
  4003f6:	3801      	subs	r0, #1
  int dots = 0;
  register u_long acc = 0, addr = 0;
  4003f8:	2400      	movs	r4, #0
  4003fa:	4622      	mov	r2, r4
  int dots = 0;
  4003fc:	4625      	mov	r5, r4
      case '\0':
      if (acc > 255) {
        return 0;
      }
      addr = addr << 8 | acc;
      acc = 0;
  4003fe:	4626      	mov	r6, r4
  400400:	e011      	b.n	400426 <inet_aton+0x32>
    switch (cc) {
  400402:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  400406:	2f09      	cmp	r7, #9
  400408:	d814      	bhi.n	400434 <inet_aton+0x40>
      acc = acc * 10 + (cc - '0');
  40040a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40040e:	eb07 0242 	add.w	r2, r7, r2, lsl #1
      break;
  400412:	e007      	b.n	400424 <inet_aton+0x30>
      if (++dots > 3) {
  400414:	3501      	adds	r5, #1
  400416:	2d03      	cmp	r5, #3
  400418:	dc24      	bgt.n	400464 <inet_aton+0x70>
      if (acc > 255) {
  40041a:	2aff      	cmp	r2, #255	; 0xff
  40041c:	d824      	bhi.n	400468 <inet_aton+0x74>
      addr = addr << 8 | acc;
  40041e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
      acc = 0;
  400422:	4632      	mov	r2, r6
      break;

      default:
      return 0;
    }
  } while (*cp++) ;
  400424:	b14b      	cbz	r3, 40043a <inet_aton+0x46>
    register char cc = *cp;
  400426:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    switch (cc) {
  40042a:	2b2e      	cmp	r3, #46	; 0x2e
  40042c:	d0f2      	beq.n	400414 <inet_aton+0x20>
  40042e:	d8e8      	bhi.n	400402 <inet_aton+0xe>
  400430:	2b00      	cmp	r3, #0
  400432:	d0f2      	beq.n	40041a <inet_aton+0x26>
      return 0;
  400434:	2000      	movs	r0, #0
  if (ap) {
    ap->s_addr = _htonl(addr);
  }

  return 1;
  400436:	bcf0      	pop	{r4, r5, r6, r7}
  400438:	4770      	bx	lr
  if (dots < 3) {
  40043a:	2d02      	cmp	r5, #2
  40043c:	dc03      	bgt.n	400446 <inet_aton+0x52>
    addr <<= 8 * (3 - dots) ;
  40043e:	f1c5 0303 	rsb	r3, r5, #3
  400442:	00db      	lsls	r3, r3, #3
  400444:	409c      	lsls	r4, r3
  if (ap) {
  400446:	b189      	cbz	r1, 40046c <inet_aton+0x78>
    ap->s_addr = _htonl(addr);
  400448:	0e23      	lsrs	r3, r4, #24
  40044a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  40044e:	0222      	lsls	r2, r4, #8
  400450:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  400454:	431a      	orrs	r2, r3
  400456:	0a23      	lsrs	r3, r4, #8
  400458:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  40045c:	4313      	orrs	r3, r2
  40045e:	600b      	str	r3, [r1, #0]
  return 1;
  400460:	2001      	movs	r0, #1
  400462:	e7e8      	b.n	400436 <inet_aton+0x42>
        return 0;
  400464:	2000      	movs	r0, #0
  400466:	e7e6      	b.n	400436 <inet_aton+0x42>
        return 0;
  400468:	2000      	movs	r0, #0
  40046a:	e7e4      	b.n	400436 <inet_aton+0x42>
  return 1;
  40046c:	2001      	movs	r0, #1
  40046e:	e7e2      	b.n	400436 <inet_aton+0x42>

00400470 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400470:	f100 0308 	add.w	r3, r0, #8
  400474:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400476:	f04f 32ff 	mov.w	r2, #4294967295
  40047a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40047c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40047e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400480:	2300      	movs	r3, #0
  400482:	6003      	str	r3, [r0, #0]
  400484:	4770      	bx	lr

00400486 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400486:	2300      	movs	r3, #0
  400488:	6103      	str	r3, [r0, #16]
  40048a:	4770      	bx	lr

0040048c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40048c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40048e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400490:	689a      	ldr	r2, [r3, #8]
  400492:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400494:	689a      	ldr	r2, [r3, #8]
  400496:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400498:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40049a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40049c:	6803      	ldr	r3, [r0, #0]
  40049e:	3301      	adds	r3, #1
  4004a0:	6003      	str	r3, [r0, #0]
  4004a2:	4770      	bx	lr

004004a4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4004a4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4004a6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4004a8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4004ac:	d002      	beq.n	4004b4 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004ae:	f100 0208 	add.w	r2, r0, #8
  4004b2:	e002      	b.n	4004ba <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4004b4:	6902      	ldr	r2, [r0, #16]
  4004b6:	e004      	b.n	4004c2 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4004b8:	461a      	mov	r2, r3
  4004ba:	6853      	ldr	r3, [r2, #4]
  4004bc:	681c      	ldr	r4, [r3, #0]
  4004be:	42a5      	cmp	r5, r4
  4004c0:	d2fa      	bcs.n	4004b8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4004c2:	6853      	ldr	r3, [r2, #4]
  4004c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4004c6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4004c8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4004ca:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4004cc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4004ce:	6803      	ldr	r3, [r0, #0]
  4004d0:	3301      	adds	r3, #1
  4004d2:	6003      	str	r3, [r0, #0]
}
  4004d4:	bc30      	pop	{r4, r5}
  4004d6:	4770      	bx	lr

004004d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4004d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4004da:	6842      	ldr	r2, [r0, #4]
  4004dc:	6881      	ldr	r1, [r0, #8]
  4004de:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4004e0:	6882      	ldr	r2, [r0, #8]
  4004e2:	6841      	ldr	r1, [r0, #4]
  4004e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4004e6:	685a      	ldr	r2, [r3, #4]
  4004e8:	4290      	cmp	r0, r2
  4004ea:	d005      	beq.n	4004f8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4004ec:	2200      	movs	r2, #0
  4004ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4004f0:	6818      	ldr	r0, [r3, #0]
  4004f2:	3801      	subs	r0, #1
  4004f4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4004f6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4004f8:	6882      	ldr	r2, [r0, #8]
  4004fa:	605a      	str	r2, [r3, #4]
  4004fc:	e7f6      	b.n	4004ec <uxListRemove+0x14>
	...

00400500 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400500:	4b0d      	ldr	r3, [pc, #52]	; (400538 <prvTaskExitError+0x38>)
  400502:	681b      	ldr	r3, [r3, #0]
  400504:	f1b3 3fff 	cmp.w	r3, #4294967295
  400508:	d00a      	beq.n	400520 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40050a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40050e:	b672      	cpsid	i
  400510:	f383 8811 	msr	BASEPRI, r3
  400514:	f3bf 8f6f 	isb	sy
  400518:	f3bf 8f4f 	dsb	sy
  40051c:	b662      	cpsie	i
  40051e:	e7fe      	b.n	40051e <prvTaskExitError+0x1e>
  400520:	f04f 0380 	mov.w	r3, #128	; 0x80
  400524:	b672      	cpsid	i
  400526:	f383 8811 	msr	BASEPRI, r3
  40052a:	f3bf 8f6f 	isb	sy
  40052e:	f3bf 8f4f 	dsb	sy
  400532:	b662      	cpsie	i
  400534:	e7fe      	b.n	400534 <prvTaskExitError+0x34>
  400536:	bf00      	nop
  400538:	2040000c 	.word	0x2040000c

0040053c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  40053c:	4806      	ldr	r0, [pc, #24]	; (400558 <prvPortStartFirstTask+0x1c>)
  40053e:	6800      	ldr	r0, [r0, #0]
  400540:	6800      	ldr	r0, [r0, #0]
  400542:	f380 8808 	msr	MSP, r0
  400546:	b662      	cpsie	i
  400548:	b661      	cpsie	f
  40054a:	f3bf 8f4f 	dsb	sy
  40054e:	f3bf 8f6f 	isb	sy
  400552:	df00      	svc	0
  400554:	bf00      	nop
  400556:	0000      	.short	0x0000
  400558:	e000ed08 	.word	0xe000ed08

0040055c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40055c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40056c <vPortEnableVFP+0x10>
  400560:	6801      	ldr	r1, [r0, #0]
  400562:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400566:	6001      	str	r1, [r0, #0]
  400568:	4770      	bx	lr
  40056a:	0000      	.short	0x0000
  40056c:	e000ed88 	.word	0xe000ed88

00400570 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400574:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400578:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40057c:	4b05      	ldr	r3, [pc, #20]	; (400594 <pxPortInitialiseStack+0x24>)
  40057e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400582:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400586:	f06f 0302 	mvn.w	r3, #2
  40058a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40058e:	3844      	subs	r0, #68	; 0x44
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	00400501 	.word	0x00400501

00400598 <SVC_Handler>:
	__asm volatile (
  400598:	4b06      	ldr	r3, [pc, #24]	; (4005b4 <pxCurrentTCBConst2>)
  40059a:	6819      	ldr	r1, [r3, #0]
  40059c:	6808      	ldr	r0, [r1, #0]
  40059e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005a2:	f380 8809 	msr	PSP, r0
  4005a6:	f3bf 8f6f 	isb	sy
  4005aa:	f04f 0000 	mov.w	r0, #0
  4005ae:	f380 8811 	msr	BASEPRI, r0
  4005b2:	4770      	bx	lr

004005b4 <pxCurrentTCBConst2>:
  4005b4:	2040c204 	.word	0x2040c204
  4005b8:	4770      	bx	lr
  4005ba:	bf00      	nop

004005bc <vPortEnterCritical>:
  4005bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005c0:	b672      	cpsid	i
  4005c2:	f383 8811 	msr	BASEPRI, r3
  4005c6:	f3bf 8f6f 	isb	sy
  4005ca:	f3bf 8f4f 	dsb	sy
  4005ce:	b662      	cpsie	i
	uxCriticalNesting++;
  4005d0:	4a0b      	ldr	r2, [pc, #44]	; (400600 <vPortEnterCritical+0x44>)
  4005d2:	6813      	ldr	r3, [r2, #0]
  4005d4:	3301      	adds	r3, #1
  4005d6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4005d8:	2b01      	cmp	r3, #1
  4005da:	d10f      	bne.n	4005fc <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4005dc:	4b09      	ldr	r3, [pc, #36]	; (400604 <vPortEnterCritical+0x48>)
  4005de:	681b      	ldr	r3, [r3, #0]
  4005e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005e4:	d00a      	beq.n	4005fc <vPortEnterCritical+0x40>
  4005e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005ea:	b672      	cpsid	i
  4005ec:	f383 8811 	msr	BASEPRI, r3
  4005f0:	f3bf 8f6f 	isb	sy
  4005f4:	f3bf 8f4f 	dsb	sy
  4005f8:	b662      	cpsie	i
  4005fa:	e7fe      	b.n	4005fa <vPortEnterCritical+0x3e>
  4005fc:	4770      	bx	lr
  4005fe:	bf00      	nop
  400600:	2040000c 	.word	0x2040000c
  400604:	e000ed04 	.word	0xe000ed04

00400608 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400608:	4b0a      	ldr	r3, [pc, #40]	; (400634 <vPortExitCritical+0x2c>)
  40060a:	681b      	ldr	r3, [r3, #0]
  40060c:	b953      	cbnz	r3, 400624 <vPortExitCritical+0x1c>
  40060e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400612:	b672      	cpsid	i
  400614:	f383 8811 	msr	BASEPRI, r3
  400618:	f3bf 8f6f 	isb	sy
  40061c:	f3bf 8f4f 	dsb	sy
  400620:	b662      	cpsie	i
  400622:	e7fe      	b.n	400622 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400624:	3b01      	subs	r3, #1
  400626:	4a03      	ldr	r2, [pc, #12]	; (400634 <vPortExitCritical+0x2c>)
  400628:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40062a:	b90b      	cbnz	r3, 400630 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40062c:	f383 8811 	msr	BASEPRI, r3
  400630:	4770      	bx	lr
  400632:	bf00      	nop
  400634:	2040000c 	.word	0x2040000c

00400638 <PendSV_Handler>:
	__asm volatile
  400638:	f3ef 8009 	mrs	r0, PSP
  40063c:	f3bf 8f6f 	isb	sy
  400640:	4b15      	ldr	r3, [pc, #84]	; (400698 <pxCurrentTCBConst>)
  400642:	681a      	ldr	r2, [r3, #0]
  400644:	f01e 0f10 	tst.w	lr, #16
  400648:	bf08      	it	eq
  40064a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40064e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400652:	6010      	str	r0, [r2, #0]
  400654:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400658:	f04f 0080 	mov.w	r0, #128	; 0x80
  40065c:	b672      	cpsid	i
  40065e:	f380 8811 	msr	BASEPRI, r0
  400662:	f3bf 8f4f 	dsb	sy
  400666:	f3bf 8f6f 	isb	sy
  40066a:	b662      	cpsie	i
  40066c:	f001 f94a 	bl	401904 <vTaskSwitchContext>
  400670:	f04f 0000 	mov.w	r0, #0
  400674:	f380 8811 	msr	BASEPRI, r0
  400678:	bc08      	pop	{r3}
  40067a:	6819      	ldr	r1, [r3, #0]
  40067c:	6808      	ldr	r0, [r1, #0]
  40067e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400682:	f01e 0f10 	tst.w	lr, #16
  400686:	bf08      	it	eq
  400688:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40068c:	f380 8809 	msr	PSP, r0
  400690:	f3bf 8f6f 	isb	sy
  400694:	4770      	bx	lr
  400696:	bf00      	nop

00400698 <pxCurrentTCBConst>:
  400698:	2040c204 	.word	0x2040c204
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop

004006a0 <SysTick_Handler>:
{
  4006a0:	b508      	push	{r3, lr}
	__asm volatile
  4006a2:	f3ef 8311 	mrs	r3, BASEPRI
  4006a6:	f04f 0280 	mov.w	r2, #128	; 0x80
  4006aa:	b672      	cpsid	i
  4006ac:	f382 8811 	msr	BASEPRI, r2
  4006b0:	f3bf 8f6f 	isb	sy
  4006b4:	f3bf 8f4f 	dsb	sy
  4006b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4006ba:	4b05      	ldr	r3, [pc, #20]	; (4006d0 <SysTick_Handler+0x30>)
  4006bc:	4798      	blx	r3
  4006be:	b118      	cbz	r0, 4006c8 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4006c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4006c4:	4b03      	ldr	r3, [pc, #12]	; (4006d4 <SysTick_Handler+0x34>)
  4006c6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4006c8:	2300      	movs	r3, #0
  4006ca:	f383 8811 	msr	BASEPRI, r3
  4006ce:	bd08      	pop	{r3, pc}
  4006d0:	00401571 	.word	0x00401571
  4006d4:	e000ed04 	.word	0xe000ed04

004006d8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4006d8:	4a03      	ldr	r2, [pc, #12]	; (4006e8 <vPortSetupTimerInterrupt+0x10>)
  4006da:	4b04      	ldr	r3, [pc, #16]	; (4006ec <vPortSetupTimerInterrupt+0x14>)
  4006dc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4006de:	2207      	movs	r2, #7
  4006e0:	3b04      	subs	r3, #4
  4006e2:	601a      	str	r2, [r3, #0]
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop
  4006e8:	000927bf 	.word	0x000927bf
  4006ec:	e000e014 	.word	0xe000e014

004006f0 <xPortStartScheduler>:
{
  4006f0:	b500      	push	{lr}
  4006f2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4006f4:	4b25      	ldr	r3, [pc, #148]	; (40078c <xPortStartScheduler+0x9c>)
  4006f6:	781a      	ldrb	r2, [r3, #0]
  4006f8:	b2d2      	uxtb	r2, r2
  4006fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4006fc:	22ff      	movs	r2, #255	; 0xff
  4006fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400700:	781b      	ldrb	r3, [r3, #0]
  400702:	b2db      	uxtb	r3, r3
  400704:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400708:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40070c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400710:	4a1f      	ldr	r2, [pc, #124]	; (400790 <xPortStartScheduler+0xa0>)
  400712:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400714:	2207      	movs	r2, #7
  400716:	4b1f      	ldr	r3, [pc, #124]	; (400794 <xPortStartScheduler+0xa4>)
  400718:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40071a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40071e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400722:	d010      	beq.n	400746 <xPortStartScheduler+0x56>
  400724:	2206      	movs	r2, #6
  400726:	e000      	b.n	40072a <xPortStartScheduler+0x3a>
  400728:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40072a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40072e:	005b      	lsls	r3, r3, #1
  400730:	b2db      	uxtb	r3, r3
  400732:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400736:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40073a:	1e51      	subs	r1, r2, #1
  40073c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400740:	d1f2      	bne.n	400728 <xPortStartScheduler+0x38>
  400742:	4b14      	ldr	r3, [pc, #80]	; (400794 <xPortStartScheduler+0xa4>)
  400744:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400746:	4a13      	ldr	r2, [pc, #76]	; (400794 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400748:	6813      	ldr	r3, [r2, #0]
  40074a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40074c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400750:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400752:	9b01      	ldr	r3, [sp, #4]
  400754:	b2db      	uxtb	r3, r3
  400756:	4a0d      	ldr	r2, [pc, #52]	; (40078c <xPortStartScheduler+0x9c>)
  400758:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <xPortStartScheduler+0xa8>)
  40075c:	681a      	ldr	r2, [r3, #0]
  40075e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400762:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400764:	681a      	ldr	r2, [r3, #0]
  400766:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40076a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40076c:	4b0b      	ldr	r3, [pc, #44]	; (40079c <xPortStartScheduler+0xac>)
  40076e:	4798      	blx	r3
	uxCriticalNesting = 0;
  400770:	2200      	movs	r2, #0
  400772:	4b0b      	ldr	r3, [pc, #44]	; (4007a0 <xPortStartScheduler+0xb0>)
  400774:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400776:	4b0b      	ldr	r3, [pc, #44]	; (4007a4 <xPortStartScheduler+0xb4>)
  400778:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40077a:	4a0b      	ldr	r2, [pc, #44]	; (4007a8 <xPortStartScheduler+0xb8>)
  40077c:	6813      	ldr	r3, [r2, #0]
  40077e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400782:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  400784:	4b09      	ldr	r3, [pc, #36]	; (4007ac <xPortStartScheduler+0xbc>)
  400786:	4798      	blx	r3
	prvTaskExitError();
  400788:	4b09      	ldr	r3, [pc, #36]	; (4007b0 <xPortStartScheduler+0xc0>)
  40078a:	4798      	blx	r3
  40078c:	e000e400 	.word	0xe000e400
  400790:	204009f4 	.word	0x204009f4
  400794:	204009f8 	.word	0x204009f8
  400798:	e000ed20 	.word	0xe000ed20
  40079c:	004006d9 	.word	0x004006d9
  4007a0:	2040000c 	.word	0x2040000c
  4007a4:	0040055d 	.word	0x0040055d
  4007a8:	e000ef34 	.word	0xe000ef34
  4007ac:	0040053d 	.word	0x0040053d
  4007b0:	00400501 	.word	0x00400501

004007b4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4007b4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4007b8:	2b0f      	cmp	r3, #15
  4007ba:	d911      	bls.n	4007e0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4007bc:	4a12      	ldr	r2, [pc, #72]	; (400808 <vPortValidateInterruptPriority+0x54>)
  4007be:	5c9b      	ldrb	r3, [r3, r2]
  4007c0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4007c2:	4a12      	ldr	r2, [pc, #72]	; (40080c <vPortValidateInterruptPriority+0x58>)
  4007c4:	7812      	ldrb	r2, [r2, #0]
  4007c6:	429a      	cmp	r2, r3
  4007c8:	d90a      	bls.n	4007e0 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  4007ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007ce:	b672      	cpsid	i
  4007d0:	f383 8811 	msr	BASEPRI, r3
  4007d4:	f3bf 8f6f 	isb	sy
  4007d8:	f3bf 8f4f 	dsb	sy
  4007dc:	b662      	cpsie	i
  4007de:	e7fe      	b.n	4007de <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4007e0:	4b0b      	ldr	r3, [pc, #44]	; (400810 <vPortValidateInterruptPriority+0x5c>)
  4007e2:	681b      	ldr	r3, [r3, #0]
  4007e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4007e8:	4a0a      	ldr	r2, [pc, #40]	; (400814 <vPortValidateInterruptPriority+0x60>)
  4007ea:	6812      	ldr	r2, [r2, #0]
  4007ec:	4293      	cmp	r3, r2
  4007ee:	d90a      	bls.n	400806 <vPortValidateInterruptPriority+0x52>
  4007f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007f4:	b672      	cpsid	i
  4007f6:	f383 8811 	msr	BASEPRI, r3
  4007fa:	f3bf 8f6f 	isb	sy
  4007fe:	f3bf 8f4f 	dsb	sy
  400802:	b662      	cpsie	i
  400804:	e7fe      	b.n	400804 <vPortValidateInterruptPriority+0x50>
  400806:	4770      	bx	lr
  400808:	e000e3f0 	.word	0xe000e3f0
  40080c:	204009f4 	.word	0x204009f4
  400810:	e000ed0c 	.word	0xe000ed0c
  400814:	204009f8 	.word	0x204009f8

00400818 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400818:	b538      	push	{r3, r4, r5, lr}
  40081a:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40081c:	f010 0f07 	tst.w	r0, #7
  400820:	d002      	beq.n	400828 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400822:	f020 0407 	bic.w	r4, r0, #7
  400826:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400828:	4b11      	ldr	r3, [pc, #68]	; (400870 <pvPortMalloc+0x58>)
  40082a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  40082c:	4b11      	ldr	r3, [pc, #68]	; (400874 <pvPortMalloc+0x5c>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	b193      	cbz	r3, 400858 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400832:	4b11      	ldr	r3, [pc, #68]	; (400878 <pvPortMalloc+0x60>)
  400834:	681b      	ldr	r3, [r3, #0]
  400836:	441c      	add	r4, r3
  400838:	42a3      	cmp	r3, r4
  40083a:	d213      	bcs.n	400864 <pvPortMalloc+0x4c>
  40083c:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400840:	4294      	cmp	r4, r2
  400842:	d80f      	bhi.n	400864 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400844:	4a0b      	ldr	r2, [pc, #44]	; (400874 <pvPortMalloc+0x5c>)
  400846:	6815      	ldr	r5, [r2, #0]
  400848:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40084a:	4b0b      	ldr	r3, [pc, #44]	; (400878 <pvPortMalloc+0x60>)
  40084c:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40084e:	4b0b      	ldr	r3, [pc, #44]	; (40087c <pvPortMalloc+0x64>)
  400850:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400852:	b14d      	cbz	r5, 400868 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400854:	4628      	mov	r0, r5
  400856:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400858:	4b09      	ldr	r3, [pc, #36]	; (400880 <pvPortMalloc+0x68>)
  40085a:	f023 0307 	bic.w	r3, r3, #7
  40085e:	4a05      	ldr	r2, [pc, #20]	; (400874 <pvPortMalloc+0x5c>)
  400860:	6013      	str	r3, [r2, #0]
  400862:	e7e6      	b.n	400832 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400864:	4b05      	ldr	r3, [pc, #20]	; (40087c <pvPortMalloc+0x64>)
  400866:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400868:	4b06      	ldr	r3, [pc, #24]	; (400884 <pvPortMalloc+0x6c>)
  40086a:	4798      	blx	r3
  40086c:	2500      	movs	r5, #0
	return pvReturn;
  40086e:	e7f1      	b.n	400854 <pvPortMalloc+0x3c>
  400870:	00401555 	.word	0x00401555
  400874:	204009fc 	.word	0x204009fc
  400878:	2040c200 	.word	0x2040c200
  40087c:	004016bd 	.word	0x004016bd
  400880:	20400a08 	.word	0x20400a08
  400884:	00405da7 	.word	0x00405da7

00400888 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400888:	b150      	cbz	r0, 4008a0 <vPortFree+0x18>
  40088a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40088e:	b672      	cpsid	i
  400890:	f383 8811 	msr	BASEPRI, r3
  400894:	f3bf 8f6f 	isb	sy
  400898:	f3bf 8f4f 	dsb	sy
  40089c:	b662      	cpsie	i
  40089e:	e7fe      	b.n	40089e <vPortFree+0x16>
  4008a0:	4770      	bx	lr
	...

004008a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4008a4:	b538      	push	{r3, r4, r5, lr}
  4008a6:	4604      	mov	r4, r0
  4008a8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4008aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4008ac:	b95a      	cbnz	r2, 4008c6 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4008ae:	6803      	ldr	r3, [r0, #0]
  4008b0:	2b00      	cmp	r3, #0
  4008b2:	d12e      	bne.n	400912 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4008b4:	6840      	ldr	r0, [r0, #4]
  4008b6:	4b1b      	ldr	r3, [pc, #108]	; (400924 <prvCopyDataToQueue+0x80>)
  4008b8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4008ba:	2300      	movs	r3, #0
  4008bc:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4008be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4008c0:	3301      	adds	r3, #1
  4008c2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4008c4:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4008c6:	b96d      	cbnz	r5, 4008e4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4008c8:	6880      	ldr	r0, [r0, #8]
  4008ca:	4b17      	ldr	r3, [pc, #92]	; (400928 <prvCopyDataToQueue+0x84>)
  4008cc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4008ce:	68a3      	ldr	r3, [r4, #8]
  4008d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008d2:	4413      	add	r3, r2
  4008d4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008d6:	6862      	ldr	r2, [r4, #4]
  4008d8:	4293      	cmp	r3, r2
  4008da:	d31c      	bcc.n	400916 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4008dc:	6823      	ldr	r3, [r4, #0]
  4008de:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4008e0:	2000      	movs	r0, #0
  4008e2:	e7ec      	b.n	4008be <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4008e4:	68c0      	ldr	r0, [r0, #12]
  4008e6:	4b10      	ldr	r3, [pc, #64]	; (400928 <prvCopyDataToQueue+0x84>)
  4008e8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4008ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4008ec:	425b      	negs	r3, r3
  4008ee:	68e2      	ldr	r2, [r4, #12]
  4008f0:	441a      	add	r2, r3
  4008f2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008f4:	6821      	ldr	r1, [r4, #0]
  4008f6:	428a      	cmp	r2, r1
  4008f8:	d202      	bcs.n	400900 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4008fa:	6862      	ldr	r2, [r4, #4]
  4008fc:	4413      	add	r3, r2
  4008fe:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400900:	2d02      	cmp	r5, #2
  400902:	d10a      	bne.n	40091a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400904:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400906:	b153      	cbz	r3, 40091e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400908:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40090a:	3b01      	subs	r3, #1
  40090c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40090e:	2000      	movs	r0, #0
  400910:	e7d5      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400912:	2000      	movs	r0, #0
  400914:	e7d3      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400916:	2000      	movs	r0, #0
  400918:	e7d1      	b.n	4008be <prvCopyDataToQueue+0x1a>
  40091a:	2000      	movs	r0, #0
  40091c:	e7cf      	b.n	4008be <prvCopyDataToQueue+0x1a>
  40091e:	2000      	movs	r0, #0
  400920:	e7cd      	b.n	4008be <prvCopyDataToQueue+0x1a>
  400922:	bf00      	nop
  400924:	00401d05 	.word	0x00401d05
  400928:	00406261 	.word	0x00406261

0040092c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40092c:	b530      	push	{r4, r5, lr}
  40092e:	b083      	sub	sp, #12
  400930:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400932:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400934:	b174      	cbz	r4, 400954 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40093a:	429a      	cmp	r2, r3
  40093c:	d315      	bcc.n	40096a <prvNotifyQueueSetContainer+0x3e>
  40093e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400942:	b672      	cpsid	i
  400944:	f383 8811 	msr	BASEPRI, r3
  400948:	f3bf 8f6f 	isb	sy
  40094c:	f3bf 8f4f 	dsb	sy
  400950:	b662      	cpsie	i
  400952:	e7fe      	b.n	400952 <prvNotifyQueueSetContainer+0x26>
  400954:	f04f 0380 	mov.w	r3, #128	; 0x80
  400958:	b672      	cpsid	i
  40095a:	f383 8811 	msr	BASEPRI, r3
  40095e:	f3bf 8f6f 	isb	sy
  400962:	f3bf 8f4f 	dsb	sy
  400966:	b662      	cpsie	i
  400968:	e7fe      	b.n	400968 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40096a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40096c:	4293      	cmp	r3, r2
  40096e:	d803      	bhi.n	400978 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  400970:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400972:	4628      	mov	r0, r5
  400974:	b003      	add	sp, #12
  400976:	bd30      	pop	{r4, r5, pc}
  400978:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40097a:	a901      	add	r1, sp, #4
  40097c:	4620      	mov	r0, r4
  40097e:	4b0b      	ldr	r3, [pc, #44]	; (4009ac <prvNotifyQueueSetContainer+0x80>)
  400980:	4798      	blx	r3
  400982:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400984:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400986:	f1b3 3fff 	cmp.w	r3, #4294967295
  40098a:	d10a      	bne.n	4009a2 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40098c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40098e:	2b00      	cmp	r3, #0
  400990:	d0ef      	beq.n	400972 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400992:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400996:	4b06      	ldr	r3, [pc, #24]	; (4009b0 <prvNotifyQueueSetContainer+0x84>)
  400998:	4798      	blx	r3
  40099a:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40099c:	bf18      	it	ne
  40099e:	2501      	movne	r5, #1
  4009a0:	e7e7      	b.n	400972 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4009a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009a4:	3301      	adds	r3, #1
  4009a6:	64a3      	str	r3, [r4, #72]	; 0x48
  4009a8:	e7e3      	b.n	400972 <prvNotifyQueueSetContainer+0x46>
  4009aa:	bf00      	nop
  4009ac:	004008a5 	.word	0x004008a5
  4009b0:	00401ad9 	.word	0x00401ad9

004009b4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4009b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4009b6:	b172      	cbz	r2, 4009d6 <prvCopyDataFromQueue+0x22>
{
  4009b8:	b510      	push	{r4, lr}
  4009ba:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4009bc:	68c4      	ldr	r4, [r0, #12]
  4009be:	4414      	add	r4, r2
  4009c0:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4009c2:	6840      	ldr	r0, [r0, #4]
  4009c4:	4284      	cmp	r4, r0
  4009c6:	d301      	bcc.n	4009cc <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4009c8:	6818      	ldr	r0, [r3, #0]
  4009ca:	60d8      	str	r0, [r3, #12]
  4009cc:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4009ce:	68d9      	ldr	r1, [r3, #12]
  4009d0:	4b01      	ldr	r3, [pc, #4]	; (4009d8 <prvCopyDataFromQueue+0x24>)
  4009d2:	4798      	blx	r3
  4009d4:	bd10      	pop	{r4, pc}
  4009d6:	4770      	bx	lr
  4009d8:	00406261 	.word	0x00406261

004009dc <prvUnlockQueue>:
{
  4009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009de:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4009e0:	4b22      	ldr	r3, [pc, #136]	; (400a6c <prvUnlockQueue+0x90>)
  4009e2:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4009e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009e6:	2b00      	cmp	r3, #0
  4009e8:	dd1b      	ble.n	400a22 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4009ea:	4d21      	ldr	r5, [pc, #132]	; (400a70 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  4009ec:	4f21      	ldr	r7, [pc, #132]	; (400a74 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009ee:	4e22      	ldr	r6, [pc, #136]	; (400a78 <prvUnlockQueue+0x9c>)
  4009f0:	e00b      	b.n	400a0a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4009f4:	b1ab      	cbz	r3, 400a22 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4009fa:	47b0      	blx	r6
  4009fc:	b978      	cbnz	r0, 400a1e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  4009fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a00:	3b01      	subs	r3, #1
  400a02:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400a04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a06:	2b00      	cmp	r3, #0
  400a08:	dd0b      	ble.n	400a22 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400a0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0f0      	beq.n	4009f2 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400a10:	2100      	movs	r1, #0
  400a12:	4620      	mov	r0, r4
  400a14:	47a8      	blx	r5
  400a16:	2801      	cmp	r0, #1
  400a18:	d1f1      	bne.n	4009fe <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400a1a:	47b8      	blx	r7
  400a1c:	e7ef      	b.n	4009fe <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400a1e:	47b8      	blx	r7
  400a20:	e7ed      	b.n	4009fe <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400a22:	f04f 33ff 	mov.w	r3, #4294967295
  400a26:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400a28:	4b14      	ldr	r3, [pc, #80]	; (400a7c <prvUnlockQueue+0xa0>)
  400a2a:	4798      	blx	r3
	taskENTER_CRITICAL();
  400a2c:	4b0f      	ldr	r3, [pc, #60]	; (400a6c <prvUnlockQueue+0x90>)
  400a2e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a32:	2b00      	cmp	r3, #0
  400a34:	dd14      	ble.n	400a60 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a36:	6923      	ldr	r3, [r4, #16]
  400a38:	b193      	cbz	r3, 400a60 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a3a:	f104 0610 	add.w	r6, r4, #16
  400a3e:	4d0e      	ldr	r5, [pc, #56]	; (400a78 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400a40:	4f0c      	ldr	r7, [pc, #48]	; (400a74 <prvUnlockQueue+0x98>)
  400a42:	e007      	b.n	400a54 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400a44:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a46:	3b01      	subs	r3, #1
  400a48:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	dd07      	ble.n	400a60 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a50:	6923      	ldr	r3, [r4, #16]
  400a52:	b12b      	cbz	r3, 400a60 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a54:	4630      	mov	r0, r6
  400a56:	47a8      	blx	r5
  400a58:	2800      	cmp	r0, #0
  400a5a:	d0f3      	beq.n	400a44 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400a5c:	47b8      	blx	r7
  400a5e:	e7f1      	b.n	400a44 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400a60:	f04f 33ff 	mov.w	r3, #4294967295
  400a64:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400a66:	4b05      	ldr	r3, [pc, #20]	; (400a7c <prvUnlockQueue+0xa0>)
  400a68:	4798      	blx	r3
  400a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a6c:	004005bd 	.word	0x004005bd
  400a70:	0040092d 	.word	0x0040092d
  400a74:	00401c35 	.word	0x00401c35
  400a78:	00401ad9 	.word	0x00401ad9
  400a7c:	00400609 	.word	0x00400609

00400a80 <xQueueGenericReset>:
{
  400a80:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  400a82:	b308      	cbz	r0, 400ac8 <xQueueGenericReset+0x48>
  400a84:	4604      	mov	r4, r0
  400a86:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400a88:	4b1d      	ldr	r3, [pc, #116]	; (400b00 <xQueueGenericReset+0x80>)
  400a8a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400a8c:	6822      	ldr	r2, [r4, #0]
  400a8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a92:	fb03 f301 	mul.w	r3, r3, r1
  400a96:	18d0      	adds	r0, r2, r3
  400a98:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a9a:	2000      	movs	r0, #0
  400a9c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400a9e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400aa0:	1a5b      	subs	r3, r3, r1
  400aa2:	4413      	add	r3, r2
  400aa4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400aa6:	f04f 33ff 	mov.w	r3, #4294967295
  400aaa:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400aac:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400aae:	b9fd      	cbnz	r5, 400af0 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400ab0:	6923      	ldr	r3, [r4, #16]
  400ab2:	b12b      	cbz	r3, 400ac0 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400ab4:	f104 0010 	add.w	r0, r4, #16
  400ab8:	4b12      	ldr	r3, [pc, #72]	; (400b04 <xQueueGenericReset+0x84>)
  400aba:	4798      	blx	r3
  400abc:	2801      	cmp	r0, #1
  400abe:	d00e      	beq.n	400ade <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  400ac0:	4b11      	ldr	r3, [pc, #68]	; (400b08 <xQueueGenericReset+0x88>)
  400ac2:	4798      	blx	r3
}
  400ac4:	2001      	movs	r0, #1
  400ac6:	bd38      	pop	{r3, r4, r5, pc}
  400ac8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400acc:	b672      	cpsid	i
  400ace:	f383 8811 	msr	BASEPRI, r3
  400ad2:	f3bf 8f6f 	isb	sy
  400ad6:	f3bf 8f4f 	dsb	sy
  400ada:	b662      	cpsie	i
  400adc:	e7fe      	b.n	400adc <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  400ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ae2:	4b0a      	ldr	r3, [pc, #40]	; (400b0c <xQueueGenericReset+0x8c>)
  400ae4:	601a      	str	r2, [r3, #0]
  400ae6:	f3bf 8f4f 	dsb	sy
  400aea:	f3bf 8f6f 	isb	sy
  400aee:	e7e7      	b.n	400ac0 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400af0:	f104 0010 	add.w	r0, r4, #16
  400af4:	4d06      	ldr	r5, [pc, #24]	; (400b10 <xQueueGenericReset+0x90>)
  400af6:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400af8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400afc:	47a8      	blx	r5
  400afe:	e7df      	b.n	400ac0 <xQueueGenericReset+0x40>
  400b00:	004005bd 	.word	0x004005bd
  400b04:	00401ad9 	.word	0x00401ad9
  400b08:	00400609 	.word	0x00400609
  400b0c:	e000ed04 	.word	0xe000ed04
  400b10:	00400471 	.word	0x00400471

00400b14 <xQueueGenericCreate>:
{
  400b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400b16:	b950      	cbnz	r0, 400b2e <xQueueGenericCreate+0x1a>
  400b18:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b1c:	b672      	cpsid	i
  400b1e:	f383 8811 	msr	BASEPRI, r3
  400b22:	f3bf 8f6f 	isb	sy
  400b26:	f3bf 8f4f 	dsb	sy
  400b2a:	b662      	cpsie	i
  400b2c:	e7fe      	b.n	400b2c <xQueueGenericCreate+0x18>
  400b2e:	4606      	mov	r6, r0
  400b30:	4617      	mov	r7, r2
  400b32:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400b34:	b189      	cbz	r1, 400b5a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400b36:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400b3a:	3059      	adds	r0, #89	; 0x59
  400b3c:	4b12      	ldr	r3, [pc, #72]	; (400b88 <xQueueGenericCreate+0x74>)
  400b3e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400b40:	4604      	mov	r4, r0
  400b42:	b9e8      	cbnz	r0, 400b80 <xQueueGenericCreate+0x6c>
  400b44:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b48:	b672      	cpsid	i
  400b4a:	f383 8811 	msr	BASEPRI, r3
  400b4e:	f3bf 8f6f 	isb	sy
  400b52:	f3bf 8f4f 	dsb	sy
  400b56:	b662      	cpsie	i
  400b58:	e7fe      	b.n	400b58 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400b5a:	2058      	movs	r0, #88	; 0x58
  400b5c:	4b0a      	ldr	r3, [pc, #40]	; (400b88 <xQueueGenericCreate+0x74>)
  400b5e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400b60:	4604      	mov	r4, r0
  400b62:	2800      	cmp	r0, #0
  400b64:	d0ee      	beq.n	400b44 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b66:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  400b68:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400b6a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b6c:	2101      	movs	r1, #1
  400b6e:	4620      	mov	r0, r4
  400b70:	4b06      	ldr	r3, [pc, #24]	; (400b8c <xQueueGenericCreate+0x78>)
  400b72:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400b74:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  400b78:	2300      	movs	r3, #0
  400b7a:	6563      	str	r3, [r4, #84]	; 0x54
}
  400b7c:	4620      	mov	r0, r4
  400b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400b80:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400b84:	6003      	str	r3, [r0, #0]
  400b86:	e7ef      	b.n	400b68 <xQueueGenericCreate+0x54>
  400b88:	00400819 	.word	0x00400819
  400b8c:	00400a81 	.word	0x00400a81

00400b90 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
  400b90:	b950      	cbnz	r0, 400ba8 <xQueueCreateCountingSemaphore+0x18>
  400b92:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b96:	b672      	cpsid	i
  400b98:	f383 8811 	msr	BASEPRI, r3
  400b9c:	f3bf 8f6f 	isb	sy
  400ba0:	f3bf 8f4f 	dsb	sy
  400ba4:	b662      	cpsie	i
  400ba6:	e7fe      	b.n	400ba6 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
  400ba8:	4288      	cmp	r0, r1
  400baa:	d20a      	bcs.n	400bc2 <xQueueCreateCountingSemaphore+0x32>
  400bac:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bb0:	b672      	cpsid	i
  400bb2:	f383 8811 	msr	BASEPRI, r3
  400bb6:	f3bf 8f6f 	isb	sy
  400bba:	f3bf 8f4f 	dsb	sy
  400bbe:	b662      	cpsie	i
  400bc0:	e7fe      	b.n	400bc0 <xQueueCreateCountingSemaphore+0x30>
	{
  400bc2:	b510      	push	{r4, lr}
  400bc4:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
  400bc6:	2202      	movs	r2, #2
  400bc8:	2100      	movs	r1, #0
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <xQueueCreateCountingSemaphore+0x5c>)
  400bcc:	4798      	blx	r3
		if( xHandle != NULL )
  400bce:	b108      	cbz	r0, 400bd4 <xQueueCreateCountingSemaphore+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
  400bd0:	6384      	str	r4, [r0, #56]	; 0x38
	}
  400bd2:	bd10      	pop	{r4, pc}
  400bd4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bd8:	b672      	cpsid	i
  400bda:	f383 8811 	msr	BASEPRI, r3
  400bde:	f3bf 8f6f 	isb	sy
  400be2:	f3bf 8f4f 	dsb	sy
  400be6:	b662      	cpsie	i
  400be8:	e7fe      	b.n	400be8 <xQueueCreateCountingSemaphore+0x58>
  400bea:	bf00      	nop
  400bec:	00400b15 	.word	0x00400b15

00400bf0 <xQueueGenericSend>:
{
  400bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bf4:	b085      	sub	sp, #20
  400bf6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400bf8:	b1b8      	cbz	r0, 400c2a <xQueueGenericSend+0x3a>
  400bfa:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400bfc:	b301      	cbz	r1, 400c40 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400bfe:	2b02      	cmp	r3, #2
  400c00:	d02c      	beq.n	400c5c <xQueueGenericSend+0x6c>
  400c02:	461d      	mov	r5, r3
  400c04:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400c06:	4b66      	ldr	r3, [pc, #408]	; (400da0 <xQueueGenericSend+0x1b0>)
  400c08:	4798      	blx	r3
  400c0a:	2800      	cmp	r0, #0
  400c0c:	d134      	bne.n	400c78 <xQueueGenericSend+0x88>
  400c0e:	9b01      	ldr	r3, [sp, #4]
  400c10:	2b00      	cmp	r3, #0
  400c12:	d038      	beq.n	400c86 <xQueueGenericSend+0x96>
  400c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c18:	b672      	cpsid	i
  400c1a:	f383 8811 	msr	BASEPRI, r3
  400c1e:	f3bf 8f6f 	isb	sy
  400c22:	f3bf 8f4f 	dsb	sy
  400c26:	b662      	cpsie	i
  400c28:	e7fe      	b.n	400c28 <xQueueGenericSend+0x38>
  400c2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c2e:	b672      	cpsid	i
  400c30:	f383 8811 	msr	BASEPRI, r3
  400c34:	f3bf 8f6f 	isb	sy
  400c38:	f3bf 8f4f 	dsb	sy
  400c3c:	b662      	cpsie	i
  400c3e:	e7fe      	b.n	400c3e <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c40:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c42:	2a00      	cmp	r2, #0
  400c44:	d0db      	beq.n	400bfe <xQueueGenericSend+0xe>
  400c46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c4a:	b672      	cpsid	i
  400c4c:	f383 8811 	msr	BASEPRI, r3
  400c50:	f3bf 8f6f 	isb	sy
  400c54:	f3bf 8f4f 	dsb	sy
  400c58:	b662      	cpsie	i
  400c5a:	e7fe      	b.n	400c5a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400c5e:	2a01      	cmp	r2, #1
  400c60:	d0cf      	beq.n	400c02 <xQueueGenericSend+0x12>
  400c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c66:	b672      	cpsid	i
  400c68:	f383 8811 	msr	BASEPRI, r3
  400c6c:	f3bf 8f6f 	isb	sy
  400c70:	f3bf 8f4f 	dsb	sy
  400c74:	b662      	cpsie	i
  400c76:	e7fe      	b.n	400c76 <xQueueGenericSend+0x86>
  400c78:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400c7a:	4e4a      	ldr	r6, [pc, #296]	; (400da4 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  400c7c:	f8df a150 	ldr.w	sl, [pc, #336]	; 400dd0 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  400c80:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400db0 <xQueueGenericSend+0x1c0>
  400c84:	e042      	b.n	400d0c <xQueueGenericSend+0x11c>
  400c86:	2700      	movs	r7, #0
  400c88:	e7f7      	b.n	400c7a <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c8a:	462a      	mov	r2, r5
  400c8c:	4641      	mov	r1, r8
  400c8e:	4620      	mov	r0, r4
  400c90:	4b45      	ldr	r3, [pc, #276]	; (400da8 <xQueueGenericSend+0x1b8>)
  400c92:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400c94:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400c96:	b19b      	cbz	r3, 400cc0 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400c98:	4629      	mov	r1, r5
  400c9a:	4620      	mov	r0, r4
  400c9c:	4b43      	ldr	r3, [pc, #268]	; (400dac <xQueueGenericSend+0x1bc>)
  400c9e:	4798      	blx	r3
  400ca0:	2801      	cmp	r0, #1
  400ca2:	d107      	bne.n	400cb4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ca8:	4b41      	ldr	r3, [pc, #260]	; (400db0 <xQueueGenericSend+0x1c0>)
  400caa:	601a      	str	r2, [r3, #0]
  400cac:	f3bf 8f4f 	dsb	sy
  400cb0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400cb4:	4b3f      	ldr	r3, [pc, #252]	; (400db4 <xQueueGenericSend+0x1c4>)
  400cb6:	4798      	blx	r3
				return pdPASS;
  400cb8:	2001      	movs	r0, #1
}
  400cba:	b005      	add	sp, #20
  400cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400cc2:	b173      	cbz	r3, 400ce2 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400cc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cc8:	4b3b      	ldr	r3, [pc, #236]	; (400db8 <xQueueGenericSend+0x1c8>)
  400cca:	4798      	blx	r3
  400ccc:	2801      	cmp	r0, #1
  400cce:	d1f1      	bne.n	400cb4 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  400cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cd4:	4b36      	ldr	r3, [pc, #216]	; (400db0 <xQueueGenericSend+0x1c0>)
  400cd6:	601a      	str	r2, [r3, #0]
  400cd8:	f3bf 8f4f 	dsb	sy
  400cdc:	f3bf 8f6f 	isb	sy
  400ce0:	e7e8      	b.n	400cb4 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  400ce2:	2800      	cmp	r0, #0
  400ce4:	d0e6      	beq.n	400cb4 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cea:	4b31      	ldr	r3, [pc, #196]	; (400db0 <xQueueGenericSend+0x1c0>)
  400cec:	601a      	str	r2, [r3, #0]
  400cee:	f3bf 8f4f 	dsb	sy
  400cf2:	f3bf 8f6f 	isb	sy
  400cf6:	e7dd      	b.n	400cb4 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  400cf8:	4b2e      	ldr	r3, [pc, #184]	; (400db4 <xQueueGenericSend+0x1c4>)
  400cfa:	4798      	blx	r3
					return errQUEUE_FULL;
  400cfc:	2000      	movs	r0, #0
  400cfe:	e7dc      	b.n	400cba <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  400d00:	4620      	mov	r0, r4
  400d02:	4b2e      	ldr	r3, [pc, #184]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d04:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d06:	4b2e      	ldr	r3, [pc, #184]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d08:	4798      	blx	r3
  400d0a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  400d0c:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d12:	429a      	cmp	r2, r3
  400d14:	d3b9      	bcc.n	400c8a <xQueueGenericSend+0x9a>
  400d16:	2d02      	cmp	r5, #2
  400d18:	d0b7      	beq.n	400c8a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400d1a:	9b01      	ldr	r3, [sp, #4]
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	d0eb      	beq.n	400cf8 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  400d20:	b90f      	cbnz	r7, 400d26 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  400d22:	a802      	add	r0, sp, #8
  400d24:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400d26:	4b23      	ldr	r3, [pc, #140]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d28:	4798      	blx	r3
		vTaskSuspendAll();
  400d2a:	4b26      	ldr	r3, [pc, #152]	; (400dc4 <xQueueGenericSend+0x1d4>)
  400d2c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d2e:	47b0      	blx	r6
  400d30:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d32:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d36:	d101      	bne.n	400d3c <xQueueGenericSend+0x14c>
  400d38:	2300      	movs	r3, #0
  400d3a:	6463      	str	r3, [r4, #68]	; 0x44
  400d3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d42:	d101      	bne.n	400d48 <xQueueGenericSend+0x158>
  400d44:	2300      	movs	r3, #0
  400d46:	64a3      	str	r3, [r4, #72]	; 0x48
  400d48:	4b1a      	ldr	r3, [pc, #104]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d4a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d4c:	a901      	add	r1, sp, #4
  400d4e:	a802      	add	r0, sp, #8
  400d50:	4b1d      	ldr	r3, [pc, #116]	; (400dc8 <xQueueGenericSend+0x1d8>)
  400d52:	4798      	blx	r3
  400d54:	b9e0      	cbnz	r0, 400d90 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  400d56:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400d58:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400d5c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400d5e:	4b15      	ldr	r3, [pc, #84]	; (400db4 <xQueueGenericSend+0x1c4>)
  400d60:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400d62:	45bb      	cmp	fp, r7
  400d64:	d1cc      	bne.n	400d00 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400d66:	9901      	ldr	r1, [sp, #4]
  400d68:	f104 0010 	add.w	r0, r4, #16
  400d6c:	4b17      	ldr	r3, [pc, #92]	; (400dcc <xQueueGenericSend+0x1dc>)
  400d6e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d70:	4620      	mov	r0, r4
  400d72:	4b12      	ldr	r3, [pc, #72]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d74:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d76:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d78:	4798      	blx	r3
  400d7a:	2800      	cmp	r0, #0
  400d7c:	d1c5      	bne.n	400d0a <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  400d7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400d82:	f8c9 3000 	str.w	r3, [r9]
  400d86:	f3bf 8f4f 	dsb	sy
  400d8a:	f3bf 8f6f 	isb	sy
  400d8e:	e7bc      	b.n	400d0a <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  400d90:	4620      	mov	r0, r4
  400d92:	4b0a      	ldr	r3, [pc, #40]	; (400dbc <xQueueGenericSend+0x1cc>)
  400d94:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400d96:	4b0a      	ldr	r3, [pc, #40]	; (400dc0 <xQueueGenericSend+0x1d0>)
  400d98:	4798      	blx	r3
			return errQUEUE_FULL;
  400d9a:	2000      	movs	r0, #0
  400d9c:	e78d      	b.n	400cba <xQueueGenericSend+0xca>
  400d9e:	bf00      	nop
  400da0:	00401c41 	.word	0x00401c41
  400da4:	004005bd 	.word	0x004005bd
  400da8:	004008a5 	.word	0x004008a5
  400dac:	0040092d 	.word	0x0040092d
  400db0:	e000ed04 	.word	0xe000ed04
  400db4:	00400609 	.word	0x00400609
  400db8:	00401ad9 	.word	0x00401ad9
  400dbc:	004009dd 	.word	0x004009dd
  400dc0:	004016bd 	.word	0x004016bd
  400dc4:	00401555 	.word	0x00401555
  400dc8:	00401ba1 	.word	0x00401ba1
  400dcc:	004019d5 	.word	0x004019d5
  400dd0:	00401b71 	.word	0x00401b71

00400dd4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  400dd4:	2800      	cmp	r0, #0
  400dd6:	d036      	beq.n	400e46 <xQueueGenericSendFromISR+0x72>
{
  400dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ddc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400dde:	2900      	cmp	r1, #0
  400de0:	d03c      	beq.n	400e5c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400de2:	2b02      	cmp	r3, #2
  400de4:	d048      	beq.n	400e78 <xQueueGenericSendFromISR+0xa4>
  400de6:	461e      	mov	r6, r3
  400de8:	4615      	mov	r5, r2
  400dea:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400dec:	4b35      	ldr	r3, [pc, #212]	; (400ec4 <xQueueGenericSendFromISR+0xf0>)
  400dee:	4798      	blx	r3
	__asm volatile
  400df0:	f3ef 8711 	mrs	r7, BASEPRI
  400df4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400df8:	b672      	cpsid	i
  400dfa:	f383 8811 	msr	BASEPRI, r3
  400dfe:	f3bf 8f6f 	isb	sy
  400e02:	f3bf 8f4f 	dsb	sy
  400e06:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400e0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400e0c:	429a      	cmp	r2, r3
  400e0e:	d301      	bcc.n	400e14 <xQueueGenericSendFromISR+0x40>
  400e10:	2e02      	cmp	r6, #2
  400e12:	d14f      	bne.n	400eb4 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e14:	4632      	mov	r2, r6
  400e16:	4641      	mov	r1, r8
  400e18:	4620      	mov	r0, r4
  400e1a:	4b2b      	ldr	r3, [pc, #172]	; (400ec8 <xQueueGenericSendFromISR+0xf4>)
  400e1c:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400e1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e20:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e24:	d141      	bne.n	400eaa <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  400e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400e28:	2b00      	cmp	r3, #0
  400e2a:	d033      	beq.n	400e94 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400e2c:	4631      	mov	r1, r6
  400e2e:	4620      	mov	r0, r4
  400e30:	4b26      	ldr	r3, [pc, #152]	; (400ecc <xQueueGenericSendFromISR+0xf8>)
  400e32:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400e34:	2d00      	cmp	r5, #0
  400e36:	d03f      	beq.n	400eb8 <xQueueGenericSendFromISR+0xe4>
  400e38:	2801      	cmp	r0, #1
  400e3a:	d13d      	bne.n	400eb8 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400e3c:	6028      	str	r0, [r5, #0]
	__asm volatile
  400e3e:	f387 8811 	msr	BASEPRI, r7
}
  400e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  400e46:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e4a:	b672      	cpsid	i
  400e4c:	f383 8811 	msr	BASEPRI, r3
  400e50:	f3bf 8f6f 	isb	sy
  400e54:	f3bf 8f4f 	dsb	sy
  400e58:	b662      	cpsie	i
  400e5a:	e7fe      	b.n	400e5a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e5c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400e5e:	2800      	cmp	r0, #0
  400e60:	d0bf      	beq.n	400de2 <xQueueGenericSendFromISR+0xe>
  400e62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e66:	b672      	cpsid	i
  400e68:	f383 8811 	msr	BASEPRI, r3
  400e6c:	f3bf 8f6f 	isb	sy
  400e70:	f3bf 8f4f 	dsb	sy
  400e74:	b662      	cpsie	i
  400e76:	e7fe      	b.n	400e76 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e78:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400e7a:	2801      	cmp	r0, #1
  400e7c:	d0b3      	beq.n	400de6 <xQueueGenericSendFromISR+0x12>
  400e7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e82:	b672      	cpsid	i
  400e84:	f383 8811 	msr	BASEPRI, r3
  400e88:	f3bf 8f6f 	isb	sy
  400e8c:	f3bf 8f4f 	dsb	sy
  400e90:	b662      	cpsie	i
  400e92:	e7fe      	b.n	400e92 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e96:	b18b      	cbz	r3, 400ebc <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e9c:	4b0c      	ldr	r3, [pc, #48]	; (400ed0 <xQueueGenericSendFromISR+0xfc>)
  400e9e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400ea0:	b175      	cbz	r5, 400ec0 <xQueueGenericSendFromISR+0xec>
  400ea2:	b168      	cbz	r0, 400ec0 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400ea4:	2001      	movs	r0, #1
  400ea6:	6028      	str	r0, [r5, #0]
  400ea8:	e7c9      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  400eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400eac:	3301      	adds	r3, #1
  400eae:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400eb0:	2001      	movs	r0, #1
  400eb2:	e7c4      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  400eb4:	2000      	movs	r0, #0
  400eb6:	e7c2      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400eb8:	2001      	movs	r0, #1
  400eba:	e7c0      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ebc:	2001      	movs	r0, #1
  400ebe:	e7be      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ec0:	2001      	movs	r0, #1
  400ec2:	e7bc      	b.n	400e3e <xQueueGenericSendFromISR+0x6a>
  400ec4:	004007b5 	.word	0x004007b5
  400ec8:	004008a5 	.word	0x004008a5
  400ecc:	0040092d 	.word	0x0040092d
  400ed0:	00401ad9 	.word	0x00401ad9

00400ed4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  400ed4:	b170      	cbz	r0, 400ef4 <xQueueGiveFromISR+0x20>
{
  400ed6:	b570      	push	{r4, r5, r6, lr}
  400ed8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  400eda:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400edc:	b1ab      	cbz	r3, 400f0a <xQueueGiveFromISR+0x36>
  400ede:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ee2:	b672      	cpsid	i
  400ee4:	f383 8811 	msr	BASEPRI, r3
  400ee8:	f3bf 8f6f 	isb	sy
  400eec:	f3bf 8f4f 	dsb	sy
  400ef0:	b662      	cpsie	i
  400ef2:	e7fe      	b.n	400ef2 <xQueueGiveFromISR+0x1e>
  400ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef8:	b672      	cpsid	i
  400efa:	f383 8811 	msr	BASEPRI, r3
  400efe:	f3bf 8f6f 	isb	sy
  400f02:	f3bf 8f4f 	dsb	sy
  400f06:	b662      	cpsie	i
  400f08:	e7fe      	b.n	400f08 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400f0a:	6803      	ldr	r3, [r0, #0]
  400f0c:	b333      	cbz	r3, 400f5c <xQueueGiveFromISR+0x88>
  400f0e:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400f10:	4b25      	ldr	r3, [pc, #148]	; (400fa8 <xQueueGiveFromISR+0xd4>)
  400f12:	4798      	blx	r3
	__asm volatile
  400f14:	f3ef 8611 	mrs	r6, BASEPRI
  400f18:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f1c:	b672      	cpsid	i
  400f1e:	f383 8811 	msr	BASEPRI, r3
  400f22:	f3bf 8f6f 	isb	sy
  400f26:	f3bf 8f4f 	dsb	sy
  400f2a:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400f2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f30:	429a      	cmp	r2, r3
  400f32:	d231      	bcs.n	400f98 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  400f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f36:	3301      	adds	r3, #1
  400f38:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  400f3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f40:	d125      	bne.n	400f8e <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  400f42:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400f44:	b1c3      	cbz	r3, 400f78 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400f46:	2100      	movs	r1, #0
  400f48:	4620      	mov	r0, r4
  400f4a:	4b18      	ldr	r3, [pc, #96]	; (400fac <xQueueGiveFromISR+0xd8>)
  400f4c:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400f4e:	b32d      	cbz	r5, 400f9c <xQueueGiveFromISR+0xc8>
  400f50:	2801      	cmp	r0, #1
  400f52:	d123      	bne.n	400f9c <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400f54:	6028      	str	r0, [r5, #0]
	__asm volatile
  400f56:	f386 8811 	msr	BASEPRI, r6
}
  400f5a:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400f5c:	6843      	ldr	r3, [r0, #4]
  400f5e:	2b00      	cmp	r3, #0
  400f60:	d0d5      	beq.n	400f0e <xQueueGiveFromISR+0x3a>
	__asm volatile
  400f62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f66:	b672      	cpsid	i
  400f68:	f383 8811 	msr	BASEPRI, r3
  400f6c:	f3bf 8f6f 	isb	sy
  400f70:	f3bf 8f4f 	dsb	sy
  400f74:	b662      	cpsie	i
  400f76:	e7fe      	b.n	400f76 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f7a:	b18b      	cbz	r3, 400fa0 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f80:	4b0b      	ldr	r3, [pc, #44]	; (400fb0 <xQueueGiveFromISR+0xdc>)
  400f82:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400f84:	b175      	cbz	r5, 400fa4 <xQueueGiveFromISR+0xd0>
  400f86:	b168      	cbz	r0, 400fa4 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400f88:	2001      	movs	r0, #1
  400f8a:	6028      	str	r0, [r5, #0]
  400f8c:	e7e3      	b.n	400f56 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  400f8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f90:	3301      	adds	r3, #1
  400f92:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400f94:	2001      	movs	r0, #1
  400f96:	e7de      	b.n	400f56 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  400f98:	2000      	movs	r0, #0
  400f9a:	e7dc      	b.n	400f56 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  400f9c:	2001      	movs	r0, #1
  400f9e:	e7da      	b.n	400f56 <xQueueGiveFromISR+0x82>
  400fa0:	2001      	movs	r0, #1
  400fa2:	e7d8      	b.n	400f56 <xQueueGiveFromISR+0x82>
  400fa4:	2001      	movs	r0, #1
  400fa6:	e7d6      	b.n	400f56 <xQueueGiveFromISR+0x82>
  400fa8:	004007b5 	.word	0x004007b5
  400fac:	0040092d 	.word	0x0040092d
  400fb0:	00401ad9 	.word	0x00401ad9

00400fb4 <xQueueGenericReceive>:
{
  400fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400fb8:	b084      	sub	sp, #16
  400fba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400fbc:	b198      	cbz	r0, 400fe6 <xQueueGenericReceive+0x32>
  400fbe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400fc0:	b1e1      	cbz	r1, 400ffc <xQueueGenericReceive+0x48>
  400fc2:	4698      	mov	r8, r3
  400fc4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400fc6:	4b61      	ldr	r3, [pc, #388]	; (40114c <xQueueGenericReceive+0x198>)
  400fc8:	4798      	blx	r3
  400fca:	bb28      	cbnz	r0, 401018 <xQueueGenericReceive+0x64>
  400fcc:	9b01      	ldr	r3, [sp, #4]
  400fce:	b353      	cbz	r3, 401026 <xQueueGenericReceive+0x72>
  400fd0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fd4:	b672      	cpsid	i
  400fd6:	f383 8811 	msr	BASEPRI, r3
  400fda:	f3bf 8f6f 	isb	sy
  400fde:	f3bf 8f4f 	dsb	sy
  400fe2:	b662      	cpsie	i
  400fe4:	e7fe      	b.n	400fe4 <xQueueGenericReceive+0x30>
  400fe6:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fea:	b672      	cpsid	i
  400fec:	f383 8811 	msr	BASEPRI, r3
  400ff0:	f3bf 8f6f 	isb	sy
  400ff4:	f3bf 8f4f 	dsb	sy
  400ff8:	b662      	cpsie	i
  400ffa:	e7fe      	b.n	400ffa <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400ffc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ffe:	2a00      	cmp	r2, #0
  401000:	d0df      	beq.n	400fc2 <xQueueGenericReceive+0xe>
  401002:	f04f 0380 	mov.w	r3, #128	; 0x80
  401006:	b672      	cpsid	i
  401008:	f383 8811 	msr	BASEPRI, r3
  40100c:	f3bf 8f6f 	isb	sy
  401010:	f3bf 8f4f 	dsb	sy
  401014:	b662      	cpsie	i
  401016:	e7fe      	b.n	401016 <xQueueGenericReceive+0x62>
  401018:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  40101a:	4d4d      	ldr	r5, [pc, #308]	; (401150 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  40101c:	f8df a160 	ldr.w	sl, [pc, #352]	; 401180 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401020:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401160 <xQueueGenericReceive+0x1ac>
  401024:	e04b      	b.n	4010be <xQueueGenericReceive+0x10a>
  401026:	2600      	movs	r6, #0
  401028:	e7f7      	b.n	40101a <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  40102a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40102c:	4639      	mov	r1, r7
  40102e:	4620      	mov	r0, r4
  401030:	4b48      	ldr	r3, [pc, #288]	; (401154 <xQueueGenericReceive+0x1a0>)
  401032:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401034:	f1b8 0f00 	cmp.w	r8, #0
  401038:	d11d      	bne.n	401076 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  40103a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40103c:	3b01      	subs	r3, #1
  40103e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401040:	6823      	ldr	r3, [r4, #0]
  401042:	b913      	cbnz	r3, 40104a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401044:	4b44      	ldr	r3, [pc, #272]	; (401158 <xQueueGenericReceive+0x1a4>)
  401046:	4798      	blx	r3
  401048:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40104a:	6923      	ldr	r3, [r4, #16]
  40104c:	b16b      	cbz	r3, 40106a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40104e:	f104 0010 	add.w	r0, r4, #16
  401052:	4b42      	ldr	r3, [pc, #264]	; (40115c <xQueueGenericReceive+0x1a8>)
  401054:	4798      	blx	r3
  401056:	2801      	cmp	r0, #1
  401058:	d107      	bne.n	40106a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40105a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40105e:	4b40      	ldr	r3, [pc, #256]	; (401160 <xQueueGenericReceive+0x1ac>)
  401060:	601a      	str	r2, [r3, #0]
  401062:	f3bf 8f4f 	dsb	sy
  401066:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  40106a:	4b3e      	ldr	r3, [pc, #248]	; (401164 <xQueueGenericReceive+0x1b0>)
  40106c:	4798      	blx	r3
				return pdPASS;
  40106e:	2001      	movs	r0, #1
}
  401070:	b004      	add	sp, #16
  401072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401076:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401078:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40107a:	2b00      	cmp	r3, #0
  40107c:	d0f5      	beq.n	40106a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40107e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401082:	4b36      	ldr	r3, [pc, #216]	; (40115c <xQueueGenericReceive+0x1a8>)
  401084:	4798      	blx	r3
  401086:	2800      	cmp	r0, #0
  401088:	d0ef      	beq.n	40106a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  40108a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40108e:	4b34      	ldr	r3, [pc, #208]	; (401160 <xQueueGenericReceive+0x1ac>)
  401090:	601a      	str	r2, [r3, #0]
  401092:	f3bf 8f4f 	dsb	sy
  401096:	f3bf 8f6f 	isb	sy
  40109a:	e7e6      	b.n	40106a <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  40109c:	4b31      	ldr	r3, [pc, #196]	; (401164 <xQueueGenericReceive+0x1b0>)
  40109e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4010a0:	2000      	movs	r0, #0
  4010a2:	e7e5      	b.n	401070 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4010a4:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4010a6:	6860      	ldr	r0, [r4, #4]
  4010a8:	4b2f      	ldr	r3, [pc, #188]	; (401168 <xQueueGenericReceive+0x1b4>)
  4010aa:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4010ac:	4b2d      	ldr	r3, [pc, #180]	; (401164 <xQueueGenericReceive+0x1b0>)
  4010ae:	4798      	blx	r3
  4010b0:	e030      	b.n	401114 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4010b2:	4620      	mov	r0, r4
  4010b4:	4b2d      	ldr	r3, [pc, #180]	; (40116c <xQueueGenericReceive+0x1b8>)
  4010b6:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4010b8:	4b2d      	ldr	r3, [pc, #180]	; (401170 <xQueueGenericReceive+0x1bc>)
  4010ba:	4798      	blx	r3
  4010bc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4010be:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4010c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010c2:	2b00      	cmp	r3, #0
  4010c4:	d1b1      	bne.n	40102a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4010c6:	9b01      	ldr	r3, [sp, #4]
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d0e7      	beq.n	40109c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4010cc:	b90e      	cbnz	r6, 4010d2 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4010ce:	a802      	add	r0, sp, #8
  4010d0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4010d2:	4b24      	ldr	r3, [pc, #144]	; (401164 <xQueueGenericReceive+0x1b0>)
  4010d4:	4798      	blx	r3
		vTaskSuspendAll();
  4010d6:	4b27      	ldr	r3, [pc, #156]	; (401174 <xQueueGenericReceive+0x1c0>)
  4010d8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4010da:	47a8      	blx	r5
  4010dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4010de:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010e2:	d101      	bne.n	4010e8 <xQueueGenericReceive+0x134>
  4010e4:	2300      	movs	r3, #0
  4010e6:	6463      	str	r3, [r4, #68]	; 0x44
  4010e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4010ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ee:	d101      	bne.n	4010f4 <xQueueGenericReceive+0x140>
  4010f0:	2300      	movs	r3, #0
  4010f2:	64a3      	str	r3, [r4, #72]	; 0x48
  4010f4:	4b1b      	ldr	r3, [pc, #108]	; (401164 <xQueueGenericReceive+0x1b0>)
  4010f6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4010f8:	a901      	add	r1, sp, #4
  4010fa:	a802      	add	r0, sp, #8
  4010fc:	4b1e      	ldr	r3, [pc, #120]	; (401178 <xQueueGenericReceive+0x1c4>)
  4010fe:	4798      	blx	r3
  401100:	b9e8      	cbnz	r0, 40113e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401102:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401104:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401106:	4b17      	ldr	r3, [pc, #92]	; (401164 <xQueueGenericReceive+0x1b0>)
  401108:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40110a:	2e00      	cmp	r6, #0
  40110c:	d1d1      	bne.n	4010b2 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40110e:	6823      	ldr	r3, [r4, #0]
  401110:	2b00      	cmp	r3, #0
  401112:	d0c7      	beq.n	4010a4 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401114:	9901      	ldr	r1, [sp, #4]
  401116:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40111a:	4b18      	ldr	r3, [pc, #96]	; (40117c <xQueueGenericReceive+0x1c8>)
  40111c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40111e:	4620      	mov	r0, r4
  401120:	4b12      	ldr	r3, [pc, #72]	; (40116c <xQueueGenericReceive+0x1b8>)
  401122:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401124:	4b12      	ldr	r3, [pc, #72]	; (401170 <xQueueGenericReceive+0x1bc>)
  401126:	4798      	blx	r3
  401128:	2800      	cmp	r0, #0
  40112a:	d1c7      	bne.n	4010bc <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  40112c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401130:	f8c9 3000 	str.w	r3, [r9]
  401134:	f3bf 8f4f 	dsb	sy
  401138:	f3bf 8f6f 	isb	sy
  40113c:	e7be      	b.n	4010bc <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40113e:	4620      	mov	r0, r4
  401140:	4b0a      	ldr	r3, [pc, #40]	; (40116c <xQueueGenericReceive+0x1b8>)
  401142:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401144:	4b0a      	ldr	r3, [pc, #40]	; (401170 <xQueueGenericReceive+0x1bc>)
  401146:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401148:	2000      	movs	r0, #0
  40114a:	e791      	b.n	401070 <xQueueGenericReceive+0xbc>
  40114c:	00401c41 	.word	0x00401c41
  401150:	004005bd 	.word	0x004005bd
  401154:	004009b5 	.word	0x004009b5
  401158:	00401dc1 	.word	0x00401dc1
  40115c:	00401ad9 	.word	0x00401ad9
  401160:	e000ed04 	.word	0xe000ed04
  401164:	00400609 	.word	0x00400609
  401168:	00401c61 	.word	0x00401c61
  40116c:	004009dd 	.word	0x004009dd
  401170:	004016bd 	.word	0x004016bd
  401174:	00401555 	.word	0x00401555
  401178:	00401ba1 	.word	0x00401ba1
  40117c:	004019d5 	.word	0x004019d5
  401180:	00401b71 	.word	0x00401b71

00401184 <vQueueAddToRegistry>:
	{
  401184:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401186:	4b0b      	ldr	r3, [pc, #44]	; (4011b4 <vQueueAddToRegistry+0x30>)
  401188:	681b      	ldr	r3, [r3, #0]
  40118a:	b153      	cbz	r3, 4011a2 <vQueueAddToRegistry+0x1e>
  40118c:	2301      	movs	r3, #1
  40118e:	4c09      	ldr	r4, [pc, #36]	; (4011b4 <vQueueAddToRegistry+0x30>)
  401190:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401194:	b132      	cbz	r2, 4011a4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401196:	3301      	adds	r3, #1
  401198:	2b08      	cmp	r3, #8
  40119a:	d1f9      	bne.n	401190 <vQueueAddToRegistry+0xc>
	}
  40119c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011a0:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4011a2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4011a4:	4a03      	ldr	r2, [pc, #12]	; (4011b4 <vQueueAddToRegistry+0x30>)
  4011a6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4011aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4011ae:	6058      	str	r0, [r3, #4]
				break;
  4011b0:	e7f4      	b.n	40119c <vQueueAddToRegistry+0x18>
  4011b2:	bf00      	nop
  4011b4:	2040cf1c 	.word	0x2040cf1c

004011b8 <vQueueWaitForMessageRestricted>:
	{
  4011b8:	b570      	push	{r4, r5, r6, lr}
  4011ba:	4604      	mov	r4, r0
  4011bc:	460d      	mov	r5, r1
  4011be:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4011c0:	4b0f      	ldr	r3, [pc, #60]	; (401200 <vQueueWaitForMessageRestricted+0x48>)
  4011c2:	4798      	blx	r3
  4011c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4011c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011ca:	d00b      	beq.n	4011e4 <vQueueWaitForMessageRestricted+0x2c>
  4011cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4011d2:	d00a      	beq.n	4011ea <vQueueWaitForMessageRestricted+0x32>
  4011d4:	4b0b      	ldr	r3, [pc, #44]	; (401204 <vQueueWaitForMessageRestricted+0x4c>)
  4011d6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4011d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4011da:	b14b      	cbz	r3, 4011f0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4011dc:	4620      	mov	r0, r4
  4011de:	4b0a      	ldr	r3, [pc, #40]	; (401208 <vQueueWaitForMessageRestricted+0x50>)
  4011e0:	4798      	blx	r3
  4011e2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4011e4:	2300      	movs	r3, #0
  4011e6:	6463      	str	r3, [r4, #68]	; 0x44
  4011e8:	e7f0      	b.n	4011cc <vQueueWaitForMessageRestricted+0x14>
  4011ea:	2300      	movs	r3, #0
  4011ec:	64a3      	str	r3, [r4, #72]	; 0x48
  4011ee:	e7f1      	b.n	4011d4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4011f0:	4632      	mov	r2, r6
  4011f2:	4629      	mov	r1, r5
  4011f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011f8:	4b04      	ldr	r3, [pc, #16]	; (40120c <vQueueWaitForMessageRestricted+0x54>)
  4011fa:	4798      	blx	r3
  4011fc:	e7ee      	b.n	4011dc <vQueueWaitForMessageRestricted+0x24>
  4011fe:	bf00      	nop
  401200:	004005bd 	.word	0x004005bd
  401204:	00400609 	.word	0x00400609
  401208:	004009dd 	.word	0x004009dd
  40120c:	00401a59 	.word	0x00401a59

00401210 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401210:	4b08      	ldr	r3, [pc, #32]	; (401234 <prvResetNextTaskUnblockTime+0x24>)
  401212:	681b      	ldr	r3, [r3, #0]
  401214:	681b      	ldr	r3, [r3, #0]
  401216:	b13b      	cbz	r3, 401228 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401218:	4b06      	ldr	r3, [pc, #24]	; (401234 <prvResetNextTaskUnblockTime+0x24>)
  40121a:	681b      	ldr	r3, [r3, #0]
  40121c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40121e:	68db      	ldr	r3, [r3, #12]
  401220:	685a      	ldr	r2, [r3, #4]
  401222:	4b05      	ldr	r3, [pc, #20]	; (401238 <prvResetNextTaskUnblockTime+0x28>)
  401224:	601a      	str	r2, [r3, #0]
  401226:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401228:	f04f 32ff 	mov.w	r2, #4294967295
  40122c:	4b02      	ldr	r3, [pc, #8]	; (401238 <prvResetNextTaskUnblockTime+0x28>)
  40122e:	601a      	str	r2, [r3, #0]
  401230:	4770      	bx	lr
  401232:	bf00      	nop
  401234:	2040c208 	.word	0x2040c208
  401238:	2040c2b4 	.word	0x2040c2b4

0040123c <prvAddCurrentTaskToDelayedList>:
{
  40123c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40123e:	4b0f      	ldr	r3, [pc, #60]	; (40127c <prvAddCurrentTaskToDelayedList+0x40>)
  401240:	681b      	ldr	r3, [r3, #0]
  401242:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401244:	4b0e      	ldr	r3, [pc, #56]	; (401280 <prvAddCurrentTaskToDelayedList+0x44>)
  401246:	681b      	ldr	r3, [r3, #0]
  401248:	4298      	cmp	r0, r3
  40124a:	d30e      	bcc.n	40126a <prvAddCurrentTaskToDelayedList+0x2e>
  40124c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40124e:	4b0d      	ldr	r3, [pc, #52]	; (401284 <prvAddCurrentTaskToDelayedList+0x48>)
  401250:	6818      	ldr	r0, [r3, #0]
  401252:	4b0a      	ldr	r3, [pc, #40]	; (40127c <prvAddCurrentTaskToDelayedList+0x40>)
  401254:	6819      	ldr	r1, [r3, #0]
  401256:	3104      	adds	r1, #4
  401258:	4b0b      	ldr	r3, [pc, #44]	; (401288 <prvAddCurrentTaskToDelayedList+0x4c>)
  40125a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  40125c:	4b0b      	ldr	r3, [pc, #44]	; (40128c <prvAddCurrentTaskToDelayedList+0x50>)
  40125e:	681b      	ldr	r3, [r3, #0]
  401260:	429c      	cmp	r4, r3
  401262:	d201      	bcs.n	401268 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401264:	4b09      	ldr	r3, [pc, #36]	; (40128c <prvAddCurrentTaskToDelayedList+0x50>)
  401266:	601c      	str	r4, [r3, #0]
  401268:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40126a:	4b09      	ldr	r3, [pc, #36]	; (401290 <prvAddCurrentTaskToDelayedList+0x54>)
  40126c:	6818      	ldr	r0, [r3, #0]
  40126e:	4b03      	ldr	r3, [pc, #12]	; (40127c <prvAddCurrentTaskToDelayedList+0x40>)
  401270:	6819      	ldr	r1, [r3, #0]
  401272:	3104      	adds	r1, #4
  401274:	4b04      	ldr	r3, [pc, #16]	; (401288 <prvAddCurrentTaskToDelayedList+0x4c>)
  401276:	4798      	blx	r3
  401278:	bd10      	pop	{r4, pc}
  40127a:	bf00      	nop
  40127c:	2040c204 	.word	0x2040c204
  401280:	2040c2fc 	.word	0x2040c2fc
  401284:	2040c208 	.word	0x2040c208
  401288:	004004a5 	.word	0x004004a5
  40128c:	2040c2b4 	.word	0x2040c2b4
  401290:	2040c20c 	.word	0x2040c20c

00401294 <xTaskGenericCreate>:
{
  401294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401298:	b083      	sub	sp, #12
  40129a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40129c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4012a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4012a2:	b160      	cbz	r0, 4012be <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4012a4:	2d04      	cmp	r5, #4
  4012a6:	d915      	bls.n	4012d4 <xTaskGenericCreate+0x40>
  4012a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012ac:	b672      	cpsid	i
  4012ae:	f383 8811 	msr	BASEPRI, r3
  4012b2:	f3bf 8f6f 	isb	sy
  4012b6:	f3bf 8f4f 	dsb	sy
  4012ba:	b662      	cpsie	i
  4012bc:	e7fe      	b.n	4012bc <xTaskGenericCreate+0x28>
  4012be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012c2:	b672      	cpsid	i
  4012c4:	f383 8811 	msr	BASEPRI, r3
  4012c8:	f3bf 8f6f 	isb	sy
  4012cc:	f3bf 8f4f 	dsb	sy
  4012d0:	b662      	cpsie	i
  4012d2:	e7fe      	b.n	4012d2 <xTaskGenericCreate+0x3e>
  4012d4:	9001      	str	r0, [sp, #4]
  4012d6:	4698      	mov	r8, r3
  4012d8:	4691      	mov	r9, r2
  4012da:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4012dc:	b936      	cbnz	r6, 4012ec <xTaskGenericCreate+0x58>
  4012de:	0090      	lsls	r0, r2, #2
  4012e0:	4b62      	ldr	r3, [pc, #392]	; (40146c <xTaskGenericCreate+0x1d8>)
  4012e2:	4798      	blx	r3
		if( pxStack != NULL )
  4012e4:	4606      	mov	r6, r0
  4012e6:	2800      	cmp	r0, #0
  4012e8:	f000 809e 	beq.w	401428 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4012ec:	2058      	movs	r0, #88	; 0x58
  4012ee:	4b5f      	ldr	r3, [pc, #380]	; (40146c <xTaskGenericCreate+0x1d8>)
  4012f0:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4012f2:	4604      	mov	r4, r0
  4012f4:	2800      	cmp	r0, #0
  4012f6:	f000 8094 	beq.w	401422 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4012fa:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4012fc:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401300:	21a5      	movs	r1, #165	; 0xa5
  401302:	4630      	mov	r0, r6
  401304:	4b5a      	ldr	r3, [pc, #360]	; (401470 <xTaskGenericCreate+0x1dc>)
  401306:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401308:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40130c:	444e      	add	r6, r9
  40130e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401310:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401314:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401318:	783b      	ldrb	r3, [r7, #0]
  40131a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40131e:	783b      	ldrb	r3, [r7, #0]
  401320:	2b00      	cmp	r3, #0
  401322:	f040 8084 	bne.w	40142e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401326:	2700      	movs	r7, #0
  401328:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40132c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40132e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401330:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401332:	f104 0904 	add.w	r9, r4, #4
  401336:	4648      	mov	r0, r9
  401338:	f8df b184 	ldr.w	fp, [pc, #388]	; 4014c0 <xTaskGenericCreate+0x22c>
  40133c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40133e:	f104 0018 	add.w	r0, r4, #24
  401342:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401344:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401346:	f1c5 0305 	rsb	r3, r5, #5
  40134a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40134c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40134e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401350:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401354:	4642      	mov	r2, r8
  401356:	9901      	ldr	r1, [sp, #4]
  401358:	4630      	mov	r0, r6
  40135a:	4b46      	ldr	r3, [pc, #280]	; (401474 <xTaskGenericCreate+0x1e0>)
  40135c:	4798      	blx	r3
  40135e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401360:	f1ba 0f00 	cmp.w	sl, #0
  401364:	d001      	beq.n	40136a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401366:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40136a:	4b43      	ldr	r3, [pc, #268]	; (401478 <xTaskGenericCreate+0x1e4>)
  40136c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40136e:	4a43      	ldr	r2, [pc, #268]	; (40147c <xTaskGenericCreate+0x1e8>)
  401370:	6813      	ldr	r3, [r2, #0]
  401372:	3301      	adds	r3, #1
  401374:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401376:	4b42      	ldr	r3, [pc, #264]	; (401480 <xTaskGenericCreate+0x1ec>)
  401378:	681b      	ldr	r3, [r3, #0]
  40137a:	2b00      	cmp	r3, #0
  40137c:	d166      	bne.n	40144c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  40137e:	4b40      	ldr	r3, [pc, #256]	; (401480 <xTaskGenericCreate+0x1ec>)
  401380:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401382:	6813      	ldr	r3, [r2, #0]
  401384:	2b01      	cmp	r3, #1
  401386:	d121      	bne.n	4013cc <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401388:	4f3e      	ldr	r7, [pc, #248]	; (401484 <xTaskGenericCreate+0x1f0>)
  40138a:	4638      	mov	r0, r7
  40138c:	4e3e      	ldr	r6, [pc, #248]	; (401488 <xTaskGenericCreate+0x1f4>)
  40138e:	47b0      	blx	r6
  401390:	f107 0014 	add.w	r0, r7, #20
  401394:	47b0      	blx	r6
  401396:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40139a:	47b0      	blx	r6
  40139c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4013a0:	47b0      	blx	r6
  4013a2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4013a6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4013a8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4014c4 <xTaskGenericCreate+0x230>
  4013ac:	4640      	mov	r0, r8
  4013ae:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4013b0:	4f36      	ldr	r7, [pc, #216]	; (40148c <xTaskGenericCreate+0x1f8>)
  4013b2:	4638      	mov	r0, r7
  4013b4:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4013b6:	4836      	ldr	r0, [pc, #216]	; (401490 <xTaskGenericCreate+0x1fc>)
  4013b8:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4013ba:	4836      	ldr	r0, [pc, #216]	; (401494 <xTaskGenericCreate+0x200>)
  4013bc:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4013be:	4836      	ldr	r0, [pc, #216]	; (401498 <xTaskGenericCreate+0x204>)
  4013c0:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4013c2:	4b36      	ldr	r3, [pc, #216]	; (40149c <xTaskGenericCreate+0x208>)
  4013c4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4013c8:	4b35      	ldr	r3, [pc, #212]	; (4014a0 <xTaskGenericCreate+0x20c>)
  4013ca:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4013cc:	4a35      	ldr	r2, [pc, #212]	; (4014a4 <xTaskGenericCreate+0x210>)
  4013ce:	6813      	ldr	r3, [r2, #0]
  4013d0:	3301      	adds	r3, #1
  4013d2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4013d4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4013d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4013d8:	4a33      	ldr	r2, [pc, #204]	; (4014a8 <xTaskGenericCreate+0x214>)
  4013da:	6811      	ldr	r1, [r2, #0]
  4013dc:	2301      	movs	r3, #1
  4013de:	4083      	lsls	r3, r0
  4013e0:	430b      	orrs	r3, r1
  4013e2:	6013      	str	r3, [r2, #0]
  4013e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4013e8:	4649      	mov	r1, r9
  4013ea:	4b26      	ldr	r3, [pc, #152]	; (401484 <xTaskGenericCreate+0x1f0>)
  4013ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4013f0:	4b2e      	ldr	r3, [pc, #184]	; (4014ac <xTaskGenericCreate+0x218>)
  4013f2:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4013f4:	4b2e      	ldr	r3, [pc, #184]	; (4014b0 <xTaskGenericCreate+0x21c>)
  4013f6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4013f8:	4b2e      	ldr	r3, [pc, #184]	; (4014b4 <xTaskGenericCreate+0x220>)
  4013fa:	681b      	ldr	r3, [r3, #0]
  4013fc:	2b00      	cmp	r3, #0
  4013fe:	d031      	beq.n	401464 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401400:	4b1f      	ldr	r3, [pc, #124]	; (401480 <xTaskGenericCreate+0x1ec>)
  401402:	681b      	ldr	r3, [r3, #0]
  401404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401406:	429d      	cmp	r5, r3
  401408:	d92e      	bls.n	401468 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  40140a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40140e:	4b2a      	ldr	r3, [pc, #168]	; (4014b8 <xTaskGenericCreate+0x224>)
  401410:	601a      	str	r2, [r3, #0]
  401412:	f3bf 8f4f 	dsb	sy
  401416:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40141a:	2001      	movs	r0, #1
}
  40141c:	b003      	add	sp, #12
  40141e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401422:	4630      	mov	r0, r6
  401424:	4b25      	ldr	r3, [pc, #148]	; (4014bc <xTaskGenericCreate+0x228>)
  401426:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401428:	f04f 30ff 	mov.w	r0, #4294967295
  40142c:	e7f6      	b.n	40141c <xTaskGenericCreate+0x188>
  40142e:	463b      	mov	r3, r7
  401430:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401434:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401436:	7859      	ldrb	r1, [r3, #1]
  401438:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40143c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401440:	2900      	cmp	r1, #0
  401442:	f43f af70 	beq.w	401326 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401446:	42bb      	cmp	r3, r7
  401448:	d1f5      	bne.n	401436 <xTaskGenericCreate+0x1a2>
  40144a:	e76c      	b.n	401326 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  40144c:	4b19      	ldr	r3, [pc, #100]	; (4014b4 <xTaskGenericCreate+0x220>)
  40144e:	681b      	ldr	r3, [r3, #0]
  401450:	2b00      	cmp	r3, #0
  401452:	d1bb      	bne.n	4013cc <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401454:	4b0a      	ldr	r3, [pc, #40]	; (401480 <xTaskGenericCreate+0x1ec>)
  401456:	681b      	ldr	r3, [r3, #0]
  401458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40145a:	429d      	cmp	r5, r3
  40145c:	d3b6      	bcc.n	4013cc <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40145e:	4b08      	ldr	r3, [pc, #32]	; (401480 <xTaskGenericCreate+0x1ec>)
  401460:	601c      	str	r4, [r3, #0]
  401462:	e7b3      	b.n	4013cc <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401464:	2001      	movs	r0, #1
  401466:	e7d9      	b.n	40141c <xTaskGenericCreate+0x188>
  401468:	2001      	movs	r0, #1
	return xReturn;
  40146a:	e7d7      	b.n	40141c <xTaskGenericCreate+0x188>
  40146c:	00400819 	.word	0x00400819
  401470:	00406395 	.word	0x00406395
  401474:	00400571 	.word	0x00400571
  401478:	004005bd 	.word	0x004005bd
  40147c:	2040c274 	.word	0x2040c274
  401480:	2040c204 	.word	0x2040c204
  401484:	2040c210 	.word	0x2040c210
  401488:	00400471 	.word	0x00400471
  40148c:	2040c2a0 	.word	0x2040c2a0
  401490:	2040c2bc 	.word	0x2040c2bc
  401494:	2040c2e8 	.word	0x2040c2e8
  401498:	2040c2d4 	.word	0x2040c2d4
  40149c:	2040c208 	.word	0x2040c208
  4014a0:	2040c20c 	.word	0x2040c20c
  4014a4:	2040c280 	.word	0x2040c280
  4014a8:	2040c288 	.word	0x2040c288
  4014ac:	0040048d 	.word	0x0040048d
  4014b0:	00400609 	.word	0x00400609
  4014b4:	2040c2d0 	.word	0x2040c2d0
  4014b8:	e000ed04 	.word	0xe000ed04
  4014bc:	00400889 	.word	0x00400889
  4014c0:	00400487 	.word	0x00400487
  4014c4:	2040c28c 	.word	0x2040c28c

004014c8 <vTaskStartScheduler>:
{
  4014c8:	b510      	push	{r4, lr}
  4014ca:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4014cc:	2300      	movs	r3, #0
  4014ce:	9303      	str	r3, [sp, #12]
  4014d0:	9302      	str	r3, [sp, #8]
  4014d2:	9301      	str	r3, [sp, #4]
  4014d4:	9300      	str	r3, [sp, #0]
  4014d6:	2282      	movs	r2, #130	; 0x82
  4014d8:	4916      	ldr	r1, [pc, #88]	; (401534 <vTaskStartScheduler+0x6c>)
  4014da:	4817      	ldr	r0, [pc, #92]	; (401538 <vTaskStartScheduler+0x70>)
  4014dc:	4c17      	ldr	r4, [pc, #92]	; (40153c <vTaskStartScheduler+0x74>)
  4014de:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4014e0:	2801      	cmp	r0, #1
  4014e2:	d00b      	beq.n	4014fc <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4014e4:	bb20      	cbnz	r0, 401530 <vTaskStartScheduler+0x68>
  4014e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ea:	b672      	cpsid	i
  4014ec:	f383 8811 	msr	BASEPRI, r3
  4014f0:	f3bf 8f6f 	isb	sy
  4014f4:	f3bf 8f4f 	dsb	sy
  4014f8:	b662      	cpsie	i
  4014fa:	e7fe      	b.n	4014fa <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4014fc:	4b10      	ldr	r3, [pc, #64]	; (401540 <vTaskStartScheduler+0x78>)
  4014fe:	4798      	blx	r3
	if( xReturn == pdPASS )
  401500:	2801      	cmp	r0, #1
  401502:	d1ef      	bne.n	4014e4 <vTaskStartScheduler+0x1c>
  401504:	f04f 0380 	mov.w	r3, #128	; 0x80
  401508:	b672      	cpsid	i
  40150a:	f383 8811 	msr	BASEPRI, r3
  40150e:	f3bf 8f6f 	isb	sy
  401512:	f3bf 8f4f 	dsb	sy
  401516:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401518:	f04f 32ff 	mov.w	r2, #4294967295
  40151c:	4b09      	ldr	r3, [pc, #36]	; (401544 <vTaskStartScheduler+0x7c>)
  40151e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401520:	2201      	movs	r2, #1
  401522:	4b09      	ldr	r3, [pc, #36]	; (401548 <vTaskStartScheduler+0x80>)
  401524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401526:	2200      	movs	r2, #0
  401528:	4b08      	ldr	r3, [pc, #32]	; (40154c <vTaskStartScheduler+0x84>)
  40152a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40152c:	4b08      	ldr	r3, [pc, #32]	; (401550 <vTaskStartScheduler+0x88>)
  40152e:	4798      	blx	r3
}
  401530:	b004      	add	sp, #16
  401532:	bd10      	pop	{r4, pc}
  401534:	0040cefc 	.word	0x0040cefc
  401538:	0040186d 	.word	0x0040186d
  40153c:	00401295 	.word	0x00401295
  401540:	00401ead 	.word	0x00401ead
  401544:	2040c2b4 	.word	0x2040c2b4
  401548:	2040c2d0 	.word	0x2040c2d0
  40154c:	2040c2fc 	.word	0x2040c2fc
  401550:	004006f1 	.word	0x004006f1

00401554 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401554:	4a02      	ldr	r2, [pc, #8]	; (401560 <vTaskSuspendAll+0xc>)
  401556:	6813      	ldr	r3, [r2, #0]
  401558:	3301      	adds	r3, #1
  40155a:	6013      	str	r3, [r2, #0]
  40155c:	4770      	bx	lr
  40155e:	bf00      	nop
  401560:	2040c27c 	.word	0x2040c27c

00401564 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401564:	4b01      	ldr	r3, [pc, #4]	; (40156c <xTaskGetTickCount+0x8>)
  401566:	6818      	ldr	r0, [r3, #0]
}
  401568:	4770      	bx	lr
  40156a:	bf00      	nop
  40156c:	2040c2fc 	.word	0x2040c2fc

00401570 <xTaskIncrementTick>:
{
  401570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401574:	4b42      	ldr	r3, [pc, #264]	; (401680 <xTaskIncrementTick+0x110>)
  401576:	681b      	ldr	r3, [r3, #0]
  401578:	2b00      	cmp	r3, #0
  40157a:	d178      	bne.n	40166e <xTaskIncrementTick+0xfe>
		++xTickCount;
  40157c:	4b41      	ldr	r3, [pc, #260]	; (401684 <xTaskIncrementTick+0x114>)
  40157e:	681a      	ldr	r2, [r3, #0]
  401580:	3201      	adds	r2, #1
  401582:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401584:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401586:	b9d6      	cbnz	r6, 4015be <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401588:	4b3f      	ldr	r3, [pc, #252]	; (401688 <xTaskIncrementTick+0x118>)
  40158a:	681b      	ldr	r3, [r3, #0]
  40158c:	681b      	ldr	r3, [r3, #0]
  40158e:	b153      	cbz	r3, 4015a6 <xTaskIncrementTick+0x36>
  401590:	f04f 0380 	mov.w	r3, #128	; 0x80
  401594:	b672      	cpsid	i
  401596:	f383 8811 	msr	BASEPRI, r3
  40159a:	f3bf 8f6f 	isb	sy
  40159e:	f3bf 8f4f 	dsb	sy
  4015a2:	b662      	cpsie	i
  4015a4:	e7fe      	b.n	4015a4 <xTaskIncrementTick+0x34>
  4015a6:	4a38      	ldr	r2, [pc, #224]	; (401688 <xTaskIncrementTick+0x118>)
  4015a8:	6811      	ldr	r1, [r2, #0]
  4015aa:	4b38      	ldr	r3, [pc, #224]	; (40168c <xTaskIncrementTick+0x11c>)
  4015ac:	6818      	ldr	r0, [r3, #0]
  4015ae:	6010      	str	r0, [r2, #0]
  4015b0:	6019      	str	r1, [r3, #0]
  4015b2:	4a37      	ldr	r2, [pc, #220]	; (401690 <xTaskIncrementTick+0x120>)
  4015b4:	6813      	ldr	r3, [r2, #0]
  4015b6:	3301      	adds	r3, #1
  4015b8:	6013      	str	r3, [r2, #0]
  4015ba:	4b36      	ldr	r3, [pc, #216]	; (401694 <xTaskIncrementTick+0x124>)
  4015bc:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4015be:	4b36      	ldr	r3, [pc, #216]	; (401698 <xTaskIncrementTick+0x128>)
  4015c0:	681b      	ldr	r3, [r3, #0]
  4015c2:	429e      	cmp	r6, r3
  4015c4:	d218      	bcs.n	4015f8 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4015c6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4015c8:	4b34      	ldr	r3, [pc, #208]	; (40169c <xTaskIncrementTick+0x12c>)
  4015ca:	681b      	ldr	r3, [r3, #0]
  4015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4015d2:	4a33      	ldr	r2, [pc, #204]	; (4016a0 <xTaskIncrementTick+0x130>)
  4015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4015d8:	2b02      	cmp	r3, #2
  4015da:	bf28      	it	cs
  4015dc:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4015de:	4b31      	ldr	r3, [pc, #196]	; (4016a4 <xTaskIncrementTick+0x134>)
  4015e0:	681b      	ldr	r3, [r3, #0]
  4015e2:	b90b      	cbnz	r3, 4015e8 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4015e4:	4b30      	ldr	r3, [pc, #192]	; (4016a8 <xTaskIncrementTick+0x138>)
  4015e6:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4015e8:	4b30      	ldr	r3, [pc, #192]	; (4016ac <xTaskIncrementTick+0x13c>)
  4015ea:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4015ec:	2b00      	cmp	r3, #0
}
  4015ee:	bf0c      	ite	eq
  4015f0:	4620      	moveq	r0, r4
  4015f2:	2001      	movne	r0, #1
  4015f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015f8:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4015fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401688 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4015fe:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4016b8 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401602:	4f2b      	ldr	r7, [pc, #172]	; (4016b0 <xTaskIncrementTick+0x140>)
  401604:	e01f      	b.n	401646 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401606:	f04f 32ff 	mov.w	r2, #4294967295
  40160a:	4b23      	ldr	r3, [pc, #140]	; (401698 <xTaskIncrementTick+0x128>)
  40160c:	601a      	str	r2, [r3, #0]
						break;
  40160e:	e7db      	b.n	4015c8 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401610:	4a21      	ldr	r2, [pc, #132]	; (401698 <xTaskIncrementTick+0x128>)
  401612:	6013      	str	r3, [r2, #0]
							break;
  401614:	e7d8      	b.n	4015c8 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401616:	f105 0018 	add.w	r0, r5, #24
  40161a:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  40161c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40161e:	683a      	ldr	r2, [r7, #0]
  401620:	2301      	movs	r3, #1
  401622:	4083      	lsls	r3, r0
  401624:	4313      	orrs	r3, r2
  401626:	603b      	str	r3, [r7, #0]
  401628:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40162c:	4651      	mov	r1, sl
  40162e:	4b1c      	ldr	r3, [pc, #112]	; (4016a0 <xTaskIncrementTick+0x130>)
  401630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401634:	4b1f      	ldr	r3, [pc, #124]	; (4016b4 <xTaskIncrementTick+0x144>)
  401636:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401638:	4b18      	ldr	r3, [pc, #96]	; (40169c <xTaskIncrementTick+0x12c>)
  40163a:	681b      	ldr	r3, [r3, #0]
  40163c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401640:	429a      	cmp	r2, r3
  401642:	bf28      	it	cs
  401644:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401646:	f8d9 3000 	ldr.w	r3, [r9]
  40164a:	681b      	ldr	r3, [r3, #0]
  40164c:	2b00      	cmp	r3, #0
  40164e:	d0da      	beq.n	401606 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401650:	f8d9 3000 	ldr.w	r3, [r9]
  401654:	68db      	ldr	r3, [r3, #12]
  401656:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401658:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40165a:	429e      	cmp	r6, r3
  40165c:	d3d8      	bcc.n	401610 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40165e:	f105 0a04 	add.w	sl, r5, #4
  401662:	4650      	mov	r0, sl
  401664:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401666:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401668:	2b00      	cmp	r3, #0
  40166a:	d1d4      	bne.n	401616 <xTaskIncrementTick+0xa6>
  40166c:	e7d6      	b.n	40161c <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40166e:	4a0d      	ldr	r2, [pc, #52]	; (4016a4 <xTaskIncrementTick+0x134>)
  401670:	6813      	ldr	r3, [r2, #0]
  401672:	3301      	adds	r3, #1
  401674:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401676:	4b0c      	ldr	r3, [pc, #48]	; (4016a8 <xTaskIncrementTick+0x138>)
  401678:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40167a:	2400      	movs	r4, #0
  40167c:	e7b4      	b.n	4015e8 <xTaskIncrementTick+0x78>
  40167e:	bf00      	nop
  401680:	2040c27c 	.word	0x2040c27c
  401684:	2040c2fc 	.word	0x2040c2fc
  401688:	2040c208 	.word	0x2040c208
  40168c:	2040c20c 	.word	0x2040c20c
  401690:	2040c2b8 	.word	0x2040c2b8
  401694:	00401211 	.word	0x00401211
  401698:	2040c2b4 	.word	0x2040c2b4
  40169c:	2040c204 	.word	0x2040c204
  4016a0:	2040c210 	.word	0x2040c210
  4016a4:	2040c278 	.word	0x2040c278
  4016a8:	00405da5 	.word	0x00405da5
  4016ac:	2040c300 	.word	0x2040c300
  4016b0:	2040c288 	.word	0x2040c288
  4016b4:	0040048d 	.word	0x0040048d
  4016b8:	004004d9 	.word	0x004004d9

004016bc <xTaskResumeAll>:
{
  4016bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4016c0:	4b38      	ldr	r3, [pc, #224]	; (4017a4 <xTaskResumeAll+0xe8>)
  4016c2:	681b      	ldr	r3, [r3, #0]
  4016c4:	b953      	cbnz	r3, 4016dc <xTaskResumeAll+0x20>
  4016c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ca:	b672      	cpsid	i
  4016cc:	f383 8811 	msr	BASEPRI, r3
  4016d0:	f3bf 8f6f 	isb	sy
  4016d4:	f3bf 8f4f 	dsb	sy
  4016d8:	b662      	cpsie	i
  4016da:	e7fe      	b.n	4016da <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4016dc:	4b32      	ldr	r3, [pc, #200]	; (4017a8 <xTaskResumeAll+0xec>)
  4016de:	4798      	blx	r3
		--uxSchedulerSuspended;
  4016e0:	4b30      	ldr	r3, [pc, #192]	; (4017a4 <xTaskResumeAll+0xe8>)
  4016e2:	681a      	ldr	r2, [r3, #0]
  4016e4:	3a01      	subs	r2, #1
  4016e6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4016e8:	681b      	ldr	r3, [r3, #0]
  4016ea:	2b00      	cmp	r3, #0
  4016ec:	d155      	bne.n	40179a <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4016ee:	4b2f      	ldr	r3, [pc, #188]	; (4017ac <xTaskResumeAll+0xf0>)
  4016f0:	681b      	ldr	r3, [r3, #0]
  4016f2:	2b00      	cmp	r3, #0
  4016f4:	d132      	bne.n	40175c <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4016f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4016f8:	4b2d      	ldr	r3, [pc, #180]	; (4017b0 <xTaskResumeAll+0xf4>)
  4016fa:	4798      	blx	r3
}
  4016fc:	4620      	mov	r0, r4
  4016fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401702:	68fb      	ldr	r3, [r7, #12]
  401704:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401706:	f104 0018 	add.w	r0, r4, #24
  40170a:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40170c:	f104 0804 	add.w	r8, r4, #4
  401710:	4640      	mov	r0, r8
  401712:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401714:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401716:	682a      	ldr	r2, [r5, #0]
  401718:	2301      	movs	r3, #1
  40171a:	4083      	lsls	r3, r0
  40171c:	4313      	orrs	r3, r2
  40171e:	602b      	str	r3, [r5, #0]
  401720:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401724:	4641      	mov	r1, r8
  401726:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40172a:	4b22      	ldr	r3, [pc, #136]	; (4017b4 <xTaskResumeAll+0xf8>)
  40172c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40172e:	4b22      	ldr	r3, [pc, #136]	; (4017b8 <xTaskResumeAll+0xfc>)
  401730:	681b      	ldr	r3, [r3, #0]
  401732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401736:	429a      	cmp	r2, r3
  401738:	d20c      	bcs.n	401754 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40173a:	683b      	ldr	r3, [r7, #0]
  40173c:	2b00      	cmp	r3, #0
  40173e:	d1e0      	bne.n	401702 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401740:	4b1e      	ldr	r3, [pc, #120]	; (4017bc <xTaskResumeAll+0x100>)
  401742:	681b      	ldr	r3, [r3, #0]
  401744:	b1db      	cbz	r3, 40177e <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401746:	4b1d      	ldr	r3, [pc, #116]	; (4017bc <xTaskResumeAll+0x100>)
  401748:	681b      	ldr	r3, [r3, #0]
  40174a:	b1c3      	cbz	r3, 40177e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40174c:	4e1c      	ldr	r6, [pc, #112]	; (4017c0 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40174e:	4d1d      	ldr	r5, [pc, #116]	; (4017c4 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  401750:	4c1a      	ldr	r4, [pc, #104]	; (4017bc <xTaskResumeAll+0x100>)
  401752:	e00e      	b.n	401772 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401754:	2201      	movs	r2, #1
  401756:	4b1b      	ldr	r3, [pc, #108]	; (4017c4 <xTaskResumeAll+0x108>)
  401758:	601a      	str	r2, [r3, #0]
  40175a:	e7ee      	b.n	40173a <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40175c:	4f1a      	ldr	r7, [pc, #104]	; (4017c8 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40175e:	4e1b      	ldr	r6, [pc, #108]	; (4017cc <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  401760:	4d1b      	ldr	r5, [pc, #108]	; (4017d0 <xTaskResumeAll+0x114>)
  401762:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4017d8 <xTaskResumeAll+0x11c>
  401766:	e7e8      	b.n	40173a <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401768:	6823      	ldr	r3, [r4, #0]
  40176a:	3b01      	subs	r3, #1
  40176c:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40176e:	6823      	ldr	r3, [r4, #0]
  401770:	b12b      	cbz	r3, 40177e <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401772:	47b0      	blx	r6
  401774:	2800      	cmp	r0, #0
  401776:	d0f7      	beq.n	401768 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401778:	2301      	movs	r3, #1
  40177a:	602b      	str	r3, [r5, #0]
  40177c:	e7f4      	b.n	401768 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40177e:	4b11      	ldr	r3, [pc, #68]	; (4017c4 <xTaskResumeAll+0x108>)
  401780:	681b      	ldr	r3, [r3, #0]
  401782:	2b01      	cmp	r3, #1
  401784:	d10b      	bne.n	40179e <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40178a:	4b12      	ldr	r3, [pc, #72]	; (4017d4 <xTaskResumeAll+0x118>)
  40178c:	601a      	str	r2, [r3, #0]
  40178e:	f3bf 8f4f 	dsb	sy
  401792:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401796:	2401      	movs	r4, #1
  401798:	e7ae      	b.n	4016f8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40179a:	2400      	movs	r4, #0
  40179c:	e7ac      	b.n	4016f8 <xTaskResumeAll+0x3c>
  40179e:	2400      	movs	r4, #0
  4017a0:	e7aa      	b.n	4016f8 <xTaskResumeAll+0x3c>
  4017a2:	bf00      	nop
  4017a4:	2040c27c 	.word	0x2040c27c
  4017a8:	004005bd 	.word	0x004005bd
  4017ac:	2040c274 	.word	0x2040c274
  4017b0:	00400609 	.word	0x00400609
  4017b4:	0040048d 	.word	0x0040048d
  4017b8:	2040c204 	.word	0x2040c204
  4017bc:	2040c278 	.word	0x2040c278
  4017c0:	00401571 	.word	0x00401571
  4017c4:	2040c300 	.word	0x2040c300
  4017c8:	2040c2bc 	.word	0x2040c2bc
  4017cc:	004004d9 	.word	0x004004d9
  4017d0:	2040c288 	.word	0x2040c288
  4017d4:	e000ed04 	.word	0xe000ed04
  4017d8:	2040c210 	.word	0x2040c210

004017dc <vTaskDelay>:
	{
  4017dc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4017de:	2800      	cmp	r0, #0
  4017e0:	d029      	beq.n	401836 <vTaskDelay+0x5a>
  4017e2:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4017e4:	4b18      	ldr	r3, [pc, #96]	; (401848 <vTaskDelay+0x6c>)
  4017e6:	681b      	ldr	r3, [r3, #0]
  4017e8:	b153      	cbz	r3, 401800 <vTaskDelay+0x24>
  4017ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ee:	b672      	cpsid	i
  4017f0:	f383 8811 	msr	BASEPRI, r3
  4017f4:	f3bf 8f6f 	isb	sy
  4017f8:	f3bf 8f4f 	dsb	sy
  4017fc:	b662      	cpsie	i
  4017fe:	e7fe      	b.n	4017fe <vTaskDelay+0x22>
			vTaskSuspendAll();
  401800:	4b12      	ldr	r3, [pc, #72]	; (40184c <vTaskDelay+0x70>)
  401802:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401804:	4b12      	ldr	r3, [pc, #72]	; (401850 <vTaskDelay+0x74>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40180a:	4b12      	ldr	r3, [pc, #72]	; (401854 <vTaskDelay+0x78>)
  40180c:	6818      	ldr	r0, [r3, #0]
  40180e:	3004      	adds	r0, #4
  401810:	4b11      	ldr	r3, [pc, #68]	; (401858 <vTaskDelay+0x7c>)
  401812:	4798      	blx	r3
  401814:	b948      	cbnz	r0, 40182a <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401816:	4b0f      	ldr	r3, [pc, #60]	; (401854 <vTaskDelay+0x78>)
  401818:	681a      	ldr	r2, [r3, #0]
  40181a:	4910      	ldr	r1, [pc, #64]	; (40185c <vTaskDelay+0x80>)
  40181c:	680b      	ldr	r3, [r1, #0]
  40181e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401820:	2201      	movs	r2, #1
  401822:	4082      	lsls	r2, r0
  401824:	ea23 0302 	bic.w	r3, r3, r2
  401828:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40182a:	4620      	mov	r0, r4
  40182c:	4b0c      	ldr	r3, [pc, #48]	; (401860 <vTaskDelay+0x84>)
  40182e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401830:	4b0c      	ldr	r3, [pc, #48]	; (401864 <vTaskDelay+0x88>)
  401832:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401834:	b938      	cbnz	r0, 401846 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  401836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40183a:	4b0b      	ldr	r3, [pc, #44]	; (401868 <vTaskDelay+0x8c>)
  40183c:	601a      	str	r2, [r3, #0]
  40183e:	f3bf 8f4f 	dsb	sy
  401842:	f3bf 8f6f 	isb	sy
  401846:	bd10      	pop	{r4, pc}
  401848:	2040c27c 	.word	0x2040c27c
  40184c:	00401555 	.word	0x00401555
  401850:	2040c2fc 	.word	0x2040c2fc
  401854:	2040c204 	.word	0x2040c204
  401858:	004004d9 	.word	0x004004d9
  40185c:	2040c288 	.word	0x2040c288
  401860:	0040123d 	.word	0x0040123d
  401864:	004016bd 	.word	0x004016bd
  401868:	e000ed04 	.word	0xe000ed04

0040186c <prvIdleTask>:
{
  40186c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40186e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4018f8 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401872:	4e19      	ldr	r6, [pc, #100]	; (4018d8 <prvIdleTask+0x6c>)
				taskYIELD();
  401874:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4018fc <prvIdleTask+0x90>
  401878:	e02a      	b.n	4018d0 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40187a:	4b18      	ldr	r3, [pc, #96]	; (4018dc <prvIdleTask+0x70>)
  40187c:	681b      	ldr	r3, [r3, #0]
  40187e:	2b01      	cmp	r3, #1
  401880:	d81e      	bhi.n	4018c0 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401882:	682b      	ldr	r3, [r5, #0]
  401884:	2b00      	cmp	r3, #0
  401886:	d0f8      	beq.n	40187a <prvIdleTask+0xe>
			vTaskSuspendAll();
  401888:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40188a:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  40188c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40188e:	2c00      	cmp	r4, #0
  401890:	d0f7      	beq.n	401882 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401892:	4b13      	ldr	r3, [pc, #76]	; (4018e0 <prvIdleTask+0x74>)
  401894:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401896:	68f3      	ldr	r3, [r6, #12]
  401898:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40189a:	1d20      	adds	r0, r4, #4
  40189c:	4b11      	ldr	r3, [pc, #68]	; (4018e4 <prvIdleTask+0x78>)
  40189e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4018a0:	4a11      	ldr	r2, [pc, #68]	; (4018e8 <prvIdleTask+0x7c>)
  4018a2:	6813      	ldr	r3, [r2, #0]
  4018a4:	3b01      	subs	r3, #1
  4018a6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4018a8:	682b      	ldr	r3, [r5, #0]
  4018aa:	3b01      	subs	r3, #1
  4018ac:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4018ae:	4b0f      	ldr	r3, [pc, #60]	; (4018ec <prvIdleTask+0x80>)
  4018b0:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4018b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4018b4:	f8df a048 	ldr.w	sl, [pc, #72]	; 401900 <prvIdleTask+0x94>
  4018b8:	47d0      	blx	sl
		vPortFree( pxTCB );
  4018ba:	4620      	mov	r0, r4
  4018bc:	47d0      	blx	sl
  4018be:	e7e0      	b.n	401882 <prvIdleTask+0x16>
				taskYIELD();
  4018c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018c4:	f8c9 3000 	str.w	r3, [r9]
  4018c8:	f3bf 8f4f 	dsb	sy
  4018cc:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4018d0:	4d07      	ldr	r5, [pc, #28]	; (4018f0 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4018d2:	4f08      	ldr	r7, [pc, #32]	; (4018f4 <prvIdleTask+0x88>)
  4018d4:	e7d5      	b.n	401882 <prvIdleTask+0x16>
  4018d6:	bf00      	nop
  4018d8:	2040c2e8 	.word	0x2040c2e8
  4018dc:	2040c210 	.word	0x2040c210
  4018e0:	004005bd 	.word	0x004005bd
  4018e4:	004004d9 	.word	0x004004d9
  4018e8:	2040c274 	.word	0x2040c274
  4018ec:	00400609 	.word	0x00400609
  4018f0:	2040c284 	.word	0x2040c284
  4018f4:	004016bd 	.word	0x004016bd
  4018f8:	00401555 	.word	0x00401555
  4018fc:	e000ed04 	.word	0xe000ed04
  401900:	00400889 	.word	0x00400889

00401904 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401904:	4b2d      	ldr	r3, [pc, #180]	; (4019bc <vTaskSwitchContext+0xb8>)
  401906:	681b      	ldr	r3, [r3, #0]
  401908:	2b00      	cmp	r3, #0
  40190a:	d12c      	bne.n	401966 <vTaskSwitchContext+0x62>
{
  40190c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40190e:	2200      	movs	r2, #0
  401910:	4b2b      	ldr	r3, [pc, #172]	; (4019c0 <vTaskSwitchContext+0xbc>)
  401912:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401914:	4b2b      	ldr	r3, [pc, #172]	; (4019c4 <vTaskSwitchContext+0xc0>)
  401916:	681b      	ldr	r3, [r3, #0]
  401918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40191a:	681a      	ldr	r2, [r3, #0]
  40191c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401920:	d103      	bne.n	40192a <vTaskSwitchContext+0x26>
  401922:	685a      	ldr	r2, [r3, #4]
  401924:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401928:	d021      	beq.n	40196e <vTaskSwitchContext+0x6a>
  40192a:	4b26      	ldr	r3, [pc, #152]	; (4019c4 <vTaskSwitchContext+0xc0>)
  40192c:	6818      	ldr	r0, [r3, #0]
  40192e:	6819      	ldr	r1, [r3, #0]
  401930:	3134      	adds	r1, #52	; 0x34
  401932:	4b25      	ldr	r3, [pc, #148]	; (4019c8 <vTaskSwitchContext+0xc4>)
  401934:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401936:	4b25      	ldr	r3, [pc, #148]	; (4019cc <vTaskSwitchContext+0xc8>)
  401938:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40193a:	fab3 f383 	clz	r3, r3
  40193e:	b2db      	uxtb	r3, r3
  401940:	f1c3 031f 	rsb	r3, r3, #31
  401944:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401948:	4a21      	ldr	r2, [pc, #132]	; (4019d0 <vTaskSwitchContext+0xcc>)
  40194a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40194e:	b9ba      	cbnz	r2, 401980 <vTaskSwitchContext+0x7c>
	__asm volatile
  401950:	f04f 0380 	mov.w	r3, #128	; 0x80
  401954:	b672      	cpsid	i
  401956:	f383 8811 	msr	BASEPRI, r3
  40195a:	f3bf 8f6f 	isb	sy
  40195e:	f3bf 8f4f 	dsb	sy
  401962:	b662      	cpsie	i
  401964:	e7fe      	b.n	401964 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401966:	2201      	movs	r2, #1
  401968:	4b15      	ldr	r3, [pc, #84]	; (4019c0 <vTaskSwitchContext+0xbc>)
  40196a:	601a      	str	r2, [r3, #0]
  40196c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40196e:	689a      	ldr	r2, [r3, #8]
  401970:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401974:	d1d9      	bne.n	40192a <vTaskSwitchContext+0x26>
  401976:	68db      	ldr	r3, [r3, #12]
  401978:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40197c:	d1d5      	bne.n	40192a <vTaskSwitchContext+0x26>
  40197e:	e7da      	b.n	401936 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401980:	4a13      	ldr	r2, [pc, #76]	; (4019d0 <vTaskSwitchContext+0xcc>)
  401982:	0099      	lsls	r1, r3, #2
  401984:	18c8      	adds	r0, r1, r3
  401986:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40198a:	6844      	ldr	r4, [r0, #4]
  40198c:	6864      	ldr	r4, [r4, #4]
  40198e:	6044      	str	r4, [r0, #4]
  401990:	4419      	add	r1, r3
  401992:	4602      	mov	r2, r0
  401994:	3208      	adds	r2, #8
  401996:	4294      	cmp	r4, r2
  401998:	d009      	beq.n	4019ae <vTaskSwitchContext+0xaa>
  40199a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40199e:	4a0c      	ldr	r2, [pc, #48]	; (4019d0 <vTaskSwitchContext+0xcc>)
  4019a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4019a4:	685b      	ldr	r3, [r3, #4]
  4019a6:	68da      	ldr	r2, [r3, #12]
  4019a8:	4b06      	ldr	r3, [pc, #24]	; (4019c4 <vTaskSwitchContext+0xc0>)
  4019aa:	601a      	str	r2, [r3, #0]
  4019ac:	bd10      	pop	{r4, pc}
  4019ae:	6860      	ldr	r0, [r4, #4]
  4019b0:	4a07      	ldr	r2, [pc, #28]	; (4019d0 <vTaskSwitchContext+0xcc>)
  4019b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4019b6:	6050      	str	r0, [r2, #4]
  4019b8:	e7ef      	b.n	40199a <vTaskSwitchContext+0x96>
  4019ba:	bf00      	nop
  4019bc:	2040c27c 	.word	0x2040c27c
  4019c0:	2040c300 	.word	0x2040c300
  4019c4:	2040c204 	.word	0x2040c204
  4019c8:	00405d8d 	.word	0x00405d8d
  4019cc:	2040c288 	.word	0x2040c288
  4019d0:	2040c210 	.word	0x2040c210

004019d4 <vTaskPlaceOnEventList>:
{
  4019d4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4019d6:	b1e0      	cbz	r0, 401a12 <vTaskPlaceOnEventList+0x3e>
  4019d8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4019da:	4d17      	ldr	r5, [pc, #92]	; (401a38 <vTaskPlaceOnEventList+0x64>)
  4019dc:	6829      	ldr	r1, [r5, #0]
  4019de:	3118      	adds	r1, #24
  4019e0:	4b16      	ldr	r3, [pc, #88]	; (401a3c <vTaskPlaceOnEventList+0x68>)
  4019e2:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4019e4:	6828      	ldr	r0, [r5, #0]
  4019e6:	3004      	adds	r0, #4
  4019e8:	4b15      	ldr	r3, [pc, #84]	; (401a40 <vTaskPlaceOnEventList+0x6c>)
  4019ea:	4798      	blx	r3
  4019ec:	b940      	cbnz	r0, 401a00 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4019ee:	682a      	ldr	r2, [r5, #0]
  4019f0:	4914      	ldr	r1, [pc, #80]	; (401a44 <vTaskPlaceOnEventList+0x70>)
  4019f2:	680b      	ldr	r3, [r1, #0]
  4019f4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4019f6:	2201      	movs	r2, #1
  4019f8:	4082      	lsls	r2, r0
  4019fa:	ea23 0302 	bic.w	r3, r3, r2
  4019fe:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  401a00:	f1b4 3fff 	cmp.w	r4, #4294967295
  401a04:	d010      	beq.n	401a28 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  401a06:	4b10      	ldr	r3, [pc, #64]	; (401a48 <vTaskPlaceOnEventList+0x74>)
  401a08:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a0a:	4420      	add	r0, r4
  401a0c:	4b0f      	ldr	r3, [pc, #60]	; (401a4c <vTaskPlaceOnEventList+0x78>)
  401a0e:	4798      	blx	r3
  401a10:	bd38      	pop	{r3, r4, r5, pc}
  401a12:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a16:	b672      	cpsid	i
  401a18:	f383 8811 	msr	BASEPRI, r3
  401a1c:	f3bf 8f6f 	isb	sy
  401a20:	f3bf 8f4f 	dsb	sy
  401a24:	b662      	cpsie	i
  401a26:	e7fe      	b.n	401a26 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a28:	4b03      	ldr	r3, [pc, #12]	; (401a38 <vTaskPlaceOnEventList+0x64>)
  401a2a:	6819      	ldr	r1, [r3, #0]
  401a2c:	3104      	adds	r1, #4
  401a2e:	4808      	ldr	r0, [pc, #32]	; (401a50 <vTaskPlaceOnEventList+0x7c>)
  401a30:	4b08      	ldr	r3, [pc, #32]	; (401a54 <vTaskPlaceOnEventList+0x80>)
  401a32:	4798      	blx	r3
  401a34:	bd38      	pop	{r3, r4, r5, pc}
  401a36:	bf00      	nop
  401a38:	2040c204 	.word	0x2040c204
  401a3c:	004004a5 	.word	0x004004a5
  401a40:	004004d9 	.word	0x004004d9
  401a44:	2040c288 	.word	0x2040c288
  401a48:	2040c2fc 	.word	0x2040c2fc
  401a4c:	0040123d 	.word	0x0040123d
  401a50:	2040c2d4 	.word	0x2040c2d4
  401a54:	0040048d 	.word	0x0040048d

00401a58 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401a58:	b1e8      	cbz	r0, 401a96 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401a5a:	b570      	push	{r4, r5, r6, lr}
  401a5c:	4615      	mov	r5, r2
  401a5e:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a60:	4e16      	ldr	r6, [pc, #88]	; (401abc <vTaskPlaceOnEventListRestricted+0x64>)
  401a62:	6831      	ldr	r1, [r6, #0]
  401a64:	3118      	adds	r1, #24
  401a66:	4b16      	ldr	r3, [pc, #88]	; (401ac0 <vTaskPlaceOnEventListRestricted+0x68>)
  401a68:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a6a:	6830      	ldr	r0, [r6, #0]
  401a6c:	3004      	adds	r0, #4
  401a6e:	4b15      	ldr	r3, [pc, #84]	; (401ac4 <vTaskPlaceOnEventListRestricted+0x6c>)
  401a70:	4798      	blx	r3
  401a72:	b940      	cbnz	r0, 401a86 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401a74:	6832      	ldr	r2, [r6, #0]
  401a76:	4914      	ldr	r1, [pc, #80]	; (401ac8 <vTaskPlaceOnEventListRestricted+0x70>)
  401a78:	680b      	ldr	r3, [r1, #0]
  401a7a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401a7c:	2201      	movs	r2, #1
  401a7e:	4082      	lsls	r2, r0
  401a80:	ea23 0302 	bic.w	r3, r3, r2
  401a84:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401a86:	2d01      	cmp	r5, #1
  401a88:	d010      	beq.n	401aac <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401a8a:	4b10      	ldr	r3, [pc, #64]	; (401acc <vTaskPlaceOnEventListRestricted+0x74>)
  401a8c:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a8e:	4420      	add	r0, r4
  401a90:	4b0f      	ldr	r3, [pc, #60]	; (401ad0 <vTaskPlaceOnEventListRestricted+0x78>)
  401a92:	4798      	blx	r3
  401a94:	bd70      	pop	{r4, r5, r6, pc}
  401a96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9a:	b672      	cpsid	i
  401a9c:	f383 8811 	msr	BASEPRI, r3
  401aa0:	f3bf 8f6f 	isb	sy
  401aa4:	f3bf 8f4f 	dsb	sy
  401aa8:	b662      	cpsie	i
  401aaa:	e7fe      	b.n	401aaa <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401aac:	4b03      	ldr	r3, [pc, #12]	; (401abc <vTaskPlaceOnEventListRestricted+0x64>)
  401aae:	6819      	ldr	r1, [r3, #0]
  401ab0:	3104      	adds	r1, #4
  401ab2:	4808      	ldr	r0, [pc, #32]	; (401ad4 <vTaskPlaceOnEventListRestricted+0x7c>)
  401ab4:	4b02      	ldr	r3, [pc, #8]	; (401ac0 <vTaskPlaceOnEventListRestricted+0x68>)
  401ab6:	4798      	blx	r3
  401ab8:	bd70      	pop	{r4, r5, r6, pc}
  401aba:	bf00      	nop
  401abc:	2040c204 	.word	0x2040c204
  401ac0:	0040048d 	.word	0x0040048d
  401ac4:	004004d9 	.word	0x004004d9
  401ac8:	2040c288 	.word	0x2040c288
  401acc:	2040c2fc 	.word	0x2040c2fc
  401ad0:	0040123d 	.word	0x0040123d
  401ad4:	2040c2d4 	.word	0x2040c2d4

00401ad8 <xTaskRemoveFromEventList>:
{
  401ad8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401ada:	68c3      	ldr	r3, [r0, #12]
  401adc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ade:	b324      	cbz	r4, 401b2a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401ae0:	f104 0518 	add.w	r5, r4, #24
  401ae4:	4628      	mov	r0, r5
  401ae6:	4b1a      	ldr	r3, [pc, #104]	; (401b50 <xTaskRemoveFromEventList+0x78>)
  401ae8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401aea:	4b1a      	ldr	r3, [pc, #104]	; (401b54 <xTaskRemoveFromEventList+0x7c>)
  401aec:	681b      	ldr	r3, [r3, #0]
  401aee:	bb3b      	cbnz	r3, 401b40 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401af0:	1d25      	adds	r5, r4, #4
  401af2:	4628      	mov	r0, r5
  401af4:	4b16      	ldr	r3, [pc, #88]	; (401b50 <xTaskRemoveFromEventList+0x78>)
  401af6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401af8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401afa:	4a17      	ldr	r2, [pc, #92]	; (401b58 <xTaskRemoveFromEventList+0x80>)
  401afc:	6811      	ldr	r1, [r2, #0]
  401afe:	2301      	movs	r3, #1
  401b00:	4083      	lsls	r3, r0
  401b02:	430b      	orrs	r3, r1
  401b04:	6013      	str	r3, [r2, #0]
  401b06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b0a:	4629      	mov	r1, r5
  401b0c:	4b13      	ldr	r3, [pc, #76]	; (401b5c <xTaskRemoveFromEventList+0x84>)
  401b0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b12:	4b13      	ldr	r3, [pc, #76]	; (401b60 <xTaskRemoveFromEventList+0x88>)
  401b14:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b16:	4b13      	ldr	r3, [pc, #76]	; (401b64 <xTaskRemoveFromEventList+0x8c>)
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b1e:	429a      	cmp	r2, r3
  401b20:	d913      	bls.n	401b4a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  401b22:	2001      	movs	r0, #1
  401b24:	4b10      	ldr	r3, [pc, #64]	; (401b68 <xTaskRemoveFromEventList+0x90>)
  401b26:	6018      	str	r0, [r3, #0]
  401b28:	bd38      	pop	{r3, r4, r5, pc}
  401b2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b2e:	b672      	cpsid	i
  401b30:	f383 8811 	msr	BASEPRI, r3
  401b34:	f3bf 8f6f 	isb	sy
  401b38:	f3bf 8f4f 	dsb	sy
  401b3c:	b662      	cpsie	i
  401b3e:	e7fe      	b.n	401b3e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b40:	4629      	mov	r1, r5
  401b42:	480a      	ldr	r0, [pc, #40]	; (401b6c <xTaskRemoveFromEventList+0x94>)
  401b44:	4b06      	ldr	r3, [pc, #24]	; (401b60 <xTaskRemoveFromEventList+0x88>)
  401b46:	4798      	blx	r3
  401b48:	e7e5      	b.n	401b16 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401b4a:	2000      	movs	r0, #0
}
  401b4c:	bd38      	pop	{r3, r4, r5, pc}
  401b4e:	bf00      	nop
  401b50:	004004d9 	.word	0x004004d9
  401b54:	2040c27c 	.word	0x2040c27c
  401b58:	2040c288 	.word	0x2040c288
  401b5c:	2040c210 	.word	0x2040c210
  401b60:	0040048d 	.word	0x0040048d
  401b64:	2040c204 	.word	0x2040c204
  401b68:	2040c300 	.word	0x2040c300
  401b6c:	2040c2bc 	.word	0x2040c2bc

00401b70 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  401b70:	b130      	cbz	r0, 401b80 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b72:	4a09      	ldr	r2, [pc, #36]	; (401b98 <vTaskSetTimeOutState+0x28>)
  401b74:	6812      	ldr	r2, [r2, #0]
  401b76:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401b78:	4a08      	ldr	r2, [pc, #32]	; (401b9c <vTaskSetTimeOutState+0x2c>)
  401b7a:	6812      	ldr	r2, [r2, #0]
  401b7c:	6042      	str	r2, [r0, #4]
  401b7e:	4770      	bx	lr
  401b80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b84:	b672      	cpsid	i
  401b86:	f383 8811 	msr	BASEPRI, r3
  401b8a:	f3bf 8f6f 	isb	sy
  401b8e:	f3bf 8f4f 	dsb	sy
  401b92:	b662      	cpsie	i
  401b94:	e7fe      	b.n	401b94 <vTaskSetTimeOutState+0x24>
  401b96:	bf00      	nop
  401b98:	2040c2b8 	.word	0x2040c2b8
  401b9c:	2040c2fc 	.word	0x2040c2fc

00401ba0 <xTaskCheckForTimeOut>:
{
  401ba0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  401ba2:	b1c0      	cbz	r0, 401bd6 <xTaskCheckForTimeOut+0x36>
  401ba4:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401ba6:	b309      	cbz	r1, 401bec <xTaskCheckForTimeOut+0x4c>
  401ba8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401baa:	4b1d      	ldr	r3, [pc, #116]	; (401c20 <xTaskCheckForTimeOut+0x80>)
  401bac:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401bae:	4b1d      	ldr	r3, [pc, #116]	; (401c24 <xTaskCheckForTimeOut+0x84>)
  401bb0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401bb2:	682b      	ldr	r3, [r5, #0]
  401bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bb8:	d02e      	beq.n	401c18 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401bba:	491b      	ldr	r1, [pc, #108]	; (401c28 <xTaskCheckForTimeOut+0x88>)
  401bbc:	6809      	ldr	r1, [r1, #0]
  401bbe:	6820      	ldr	r0, [r4, #0]
  401bc0:	4288      	cmp	r0, r1
  401bc2:	d002      	beq.n	401bca <xTaskCheckForTimeOut+0x2a>
  401bc4:	6861      	ldr	r1, [r4, #4]
  401bc6:	428a      	cmp	r2, r1
  401bc8:	d228      	bcs.n	401c1c <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401bca:	6861      	ldr	r1, [r4, #4]
  401bcc:	1a50      	subs	r0, r2, r1
  401bce:	4283      	cmp	r3, r0
  401bd0:	d817      	bhi.n	401c02 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  401bd2:	2401      	movs	r4, #1
  401bd4:	e01c      	b.n	401c10 <xTaskCheckForTimeOut+0x70>
  401bd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bda:	b672      	cpsid	i
  401bdc:	f383 8811 	msr	BASEPRI, r3
  401be0:	f3bf 8f6f 	isb	sy
  401be4:	f3bf 8f4f 	dsb	sy
  401be8:	b662      	cpsie	i
  401bea:	e7fe      	b.n	401bea <xTaskCheckForTimeOut+0x4a>
  401bec:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bf0:	b672      	cpsid	i
  401bf2:	f383 8811 	msr	BASEPRI, r3
  401bf6:	f3bf 8f6f 	isb	sy
  401bfa:	f3bf 8f4f 	dsb	sy
  401bfe:	b662      	cpsie	i
  401c00:	e7fe      	b.n	401c00 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401c02:	1a9b      	subs	r3, r3, r2
  401c04:	440b      	add	r3, r1
  401c06:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401c08:	4620      	mov	r0, r4
  401c0a:	4b08      	ldr	r3, [pc, #32]	; (401c2c <xTaskCheckForTimeOut+0x8c>)
  401c0c:	4798      	blx	r3
			xReturn = pdFALSE;
  401c0e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401c10:	4b07      	ldr	r3, [pc, #28]	; (401c30 <xTaskCheckForTimeOut+0x90>)
  401c12:	4798      	blx	r3
}
  401c14:	4620      	mov	r0, r4
  401c16:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  401c18:	2400      	movs	r4, #0
  401c1a:	e7f9      	b.n	401c10 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401c1c:	2401      	movs	r4, #1
  401c1e:	e7f7      	b.n	401c10 <xTaskCheckForTimeOut+0x70>
  401c20:	004005bd 	.word	0x004005bd
  401c24:	2040c2fc 	.word	0x2040c2fc
  401c28:	2040c2b8 	.word	0x2040c2b8
  401c2c:	00401b71 	.word	0x00401b71
  401c30:	00400609 	.word	0x00400609

00401c34 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401c34:	2201      	movs	r2, #1
  401c36:	4b01      	ldr	r3, [pc, #4]	; (401c3c <vTaskMissedYield+0x8>)
  401c38:	601a      	str	r2, [r3, #0]
  401c3a:	4770      	bx	lr
  401c3c:	2040c300 	.word	0x2040c300

00401c40 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c40:	4b05      	ldr	r3, [pc, #20]	; (401c58 <xTaskGetSchedulerState+0x18>)
  401c42:	681b      	ldr	r3, [r3, #0]
  401c44:	b133      	cbz	r3, 401c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c46:	4b05      	ldr	r3, [pc, #20]	; (401c5c <xTaskGetSchedulerState+0x1c>)
  401c48:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c4a:	2b00      	cmp	r3, #0
  401c4c:	bf0c      	ite	eq
  401c4e:	2002      	moveq	r0, #2
  401c50:	2000      	movne	r0, #0
  401c52:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c54:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401c56:	4770      	bx	lr
  401c58:	2040c2d0 	.word	0x2040c2d0
  401c5c:	2040c27c 	.word	0x2040c27c

00401c60 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c60:	2800      	cmp	r0, #0
  401c62:	d044      	beq.n	401cee <vTaskPriorityInherit+0x8e>
	{
  401c64:	b538      	push	{r3, r4, r5, lr}
  401c66:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c68:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c6a:	4921      	ldr	r1, [pc, #132]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401c6c:	6809      	ldr	r1, [r1, #0]
  401c6e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c70:	428a      	cmp	r2, r1
  401c72:	d214      	bcs.n	401c9e <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401c74:	6981      	ldr	r1, [r0, #24]
  401c76:	2900      	cmp	r1, #0
  401c78:	db05      	blt.n	401c86 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c7a:	491d      	ldr	r1, [pc, #116]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401c7c:	6809      	ldr	r1, [r1, #0]
  401c7e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c80:	f1c1 0105 	rsb	r1, r1, #5
  401c84:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401c86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401c8a:	491a      	ldr	r1, [pc, #104]	; (401cf4 <vTaskPriorityInherit+0x94>)
  401c8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401c90:	6961      	ldr	r1, [r4, #20]
  401c92:	4291      	cmp	r1, r2
  401c94:	d004      	beq.n	401ca0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c96:	4a16      	ldr	r2, [pc, #88]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401c98:	6812      	ldr	r2, [r2, #0]
  401c9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401c9c:	62e2      	str	r2, [r4, #44]	; 0x2c
  401c9e:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401ca0:	1d25      	adds	r5, r4, #4
  401ca2:	4628      	mov	r0, r5
  401ca4:	4b14      	ldr	r3, [pc, #80]	; (401cf8 <vTaskPriorityInherit+0x98>)
  401ca6:	4798      	blx	r3
  401ca8:	b970      	cbnz	r0, 401cc8 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401cac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401cb0:	4a10      	ldr	r2, [pc, #64]	; (401cf4 <vTaskPriorityInherit+0x94>)
  401cb2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401cb6:	b93a      	cbnz	r2, 401cc8 <vTaskPriorityInherit+0x68>
  401cb8:	4810      	ldr	r0, [pc, #64]	; (401cfc <vTaskPriorityInherit+0x9c>)
  401cba:	6802      	ldr	r2, [r0, #0]
  401cbc:	2101      	movs	r1, #1
  401cbe:	fa01 f303 	lsl.w	r3, r1, r3
  401cc2:	ea22 0303 	bic.w	r3, r2, r3
  401cc6:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cc8:	4b09      	ldr	r3, [pc, #36]	; (401cf0 <vTaskPriorityInherit+0x90>)
  401cca:	681b      	ldr	r3, [r3, #0]
  401ccc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401cce:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401cd0:	4a0a      	ldr	r2, [pc, #40]	; (401cfc <vTaskPriorityInherit+0x9c>)
  401cd2:	6811      	ldr	r1, [r2, #0]
  401cd4:	2301      	movs	r3, #1
  401cd6:	4083      	lsls	r3, r0
  401cd8:	430b      	orrs	r3, r1
  401cda:	6013      	str	r3, [r2, #0]
  401cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ce0:	4629      	mov	r1, r5
  401ce2:	4b04      	ldr	r3, [pc, #16]	; (401cf4 <vTaskPriorityInherit+0x94>)
  401ce4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ce8:	4b05      	ldr	r3, [pc, #20]	; (401d00 <vTaskPriorityInherit+0xa0>)
  401cea:	4798      	blx	r3
  401cec:	bd38      	pop	{r3, r4, r5, pc}
  401cee:	4770      	bx	lr
  401cf0:	2040c204 	.word	0x2040c204
  401cf4:	2040c210 	.word	0x2040c210
  401cf8:	004004d9 	.word	0x004004d9
  401cfc:	2040c288 	.word	0x2040c288
  401d00:	0040048d 	.word	0x0040048d

00401d04 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401d04:	2800      	cmp	r0, #0
  401d06:	d04d      	beq.n	401da4 <xTaskPriorityDisinherit+0xa0>
	{
  401d08:	b538      	push	{r3, r4, r5, lr}
  401d0a:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401d0c:	4a27      	ldr	r2, [pc, #156]	; (401dac <xTaskPriorityDisinherit+0xa8>)
  401d0e:	6812      	ldr	r2, [r2, #0]
  401d10:	4290      	cmp	r0, r2
  401d12:	d00a      	beq.n	401d2a <xTaskPriorityDisinherit+0x26>
  401d14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d18:	b672      	cpsid	i
  401d1a:	f383 8811 	msr	BASEPRI, r3
  401d1e:	f3bf 8f6f 	isb	sy
  401d22:	f3bf 8f4f 	dsb	sy
  401d26:	b662      	cpsie	i
  401d28:	e7fe      	b.n	401d28 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401d2a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401d2c:	b952      	cbnz	r2, 401d44 <xTaskPriorityDisinherit+0x40>
  401d2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d32:	b672      	cpsid	i
  401d34:	f383 8811 	msr	BASEPRI, r3
  401d38:	f3bf 8f6f 	isb	sy
  401d3c:	f3bf 8f4f 	dsb	sy
  401d40:	b662      	cpsie	i
  401d42:	e7fe      	b.n	401d42 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401d44:	3a01      	subs	r2, #1
  401d46:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401d4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d4c:	4288      	cmp	r0, r1
  401d4e:	d02b      	beq.n	401da8 <xTaskPriorityDisinherit+0xa4>
  401d50:	bb52      	cbnz	r2, 401da8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d52:	1d25      	adds	r5, r4, #4
  401d54:	4628      	mov	r0, r5
  401d56:	4b16      	ldr	r3, [pc, #88]	; (401db0 <xTaskPriorityDisinherit+0xac>)
  401d58:	4798      	blx	r3
  401d5a:	b968      	cbnz	r0, 401d78 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401d5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401d5e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401d62:	4b14      	ldr	r3, [pc, #80]	; (401db4 <xTaskPriorityDisinherit+0xb0>)
  401d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d68:	b933      	cbnz	r3, 401d78 <xTaskPriorityDisinherit+0x74>
  401d6a:	4813      	ldr	r0, [pc, #76]	; (401db8 <xTaskPriorityDisinherit+0xb4>)
  401d6c:	6803      	ldr	r3, [r0, #0]
  401d6e:	2201      	movs	r2, #1
  401d70:	408a      	lsls	r2, r1
  401d72:	ea23 0302 	bic.w	r3, r3, r2
  401d76:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d78:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401d7a:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d7c:	f1c0 0305 	rsb	r3, r0, #5
  401d80:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401d82:	4a0d      	ldr	r2, [pc, #52]	; (401db8 <xTaskPriorityDisinherit+0xb4>)
  401d84:	6811      	ldr	r1, [r2, #0]
  401d86:	2401      	movs	r4, #1
  401d88:	fa04 f300 	lsl.w	r3, r4, r0
  401d8c:	430b      	orrs	r3, r1
  401d8e:	6013      	str	r3, [r2, #0]
  401d90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d94:	4629      	mov	r1, r5
  401d96:	4b07      	ldr	r3, [pc, #28]	; (401db4 <xTaskPriorityDisinherit+0xb0>)
  401d98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d9c:	4b07      	ldr	r3, [pc, #28]	; (401dbc <xTaskPriorityDisinherit+0xb8>)
  401d9e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401da0:	4620      	mov	r0, r4
  401da2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401da4:	2000      	movs	r0, #0
  401da6:	4770      	bx	lr
  401da8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401daa:	bd38      	pop	{r3, r4, r5, pc}
  401dac:	2040c204 	.word	0x2040c204
  401db0:	004004d9 	.word	0x004004d9
  401db4:	2040c210 	.word	0x2040c210
  401db8:	2040c288 	.word	0x2040c288
  401dbc:	0040048d 	.word	0x0040048d

00401dc0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401dc0:	4b05      	ldr	r3, [pc, #20]	; (401dd8 <pvTaskIncrementMutexHeldCount+0x18>)
  401dc2:	681b      	ldr	r3, [r3, #0]
  401dc4:	b123      	cbz	r3, 401dd0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401dc6:	4b04      	ldr	r3, [pc, #16]	; (401dd8 <pvTaskIncrementMutexHeldCount+0x18>)
  401dc8:	681a      	ldr	r2, [r3, #0]
  401dca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401dcc:	3301      	adds	r3, #1
  401dce:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401dd0:	4b01      	ldr	r3, [pc, #4]	; (401dd8 <pvTaskIncrementMutexHeldCount+0x18>)
  401dd2:	6818      	ldr	r0, [r3, #0]
	}
  401dd4:	4770      	bx	lr
  401dd6:	bf00      	nop
  401dd8:	2040c204 	.word	0x2040c204

00401ddc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401ddc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401dde:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401de0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401de2:	4291      	cmp	r1, r2
  401de4:	d80c      	bhi.n	401e00 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401de6:	1ad2      	subs	r2, r2, r3
  401de8:	6983      	ldr	r3, [r0, #24]
  401dea:	429a      	cmp	r2, r3
  401dec:	d301      	bcc.n	401df2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401dee:	2001      	movs	r0, #1
  401df0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401df2:	1d01      	adds	r1, r0, #4
  401df4:	4b09      	ldr	r3, [pc, #36]	; (401e1c <prvInsertTimerInActiveList+0x40>)
  401df6:	6818      	ldr	r0, [r3, #0]
  401df8:	4b09      	ldr	r3, [pc, #36]	; (401e20 <prvInsertTimerInActiveList+0x44>)
  401dfa:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401dfc:	2000      	movs	r0, #0
  401dfe:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401e00:	429a      	cmp	r2, r3
  401e02:	d203      	bcs.n	401e0c <prvInsertTimerInActiveList+0x30>
  401e04:	4299      	cmp	r1, r3
  401e06:	d301      	bcc.n	401e0c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401e08:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401e0a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401e0c:	1d01      	adds	r1, r0, #4
  401e0e:	4b05      	ldr	r3, [pc, #20]	; (401e24 <prvInsertTimerInActiveList+0x48>)
  401e10:	6818      	ldr	r0, [r3, #0]
  401e12:	4b03      	ldr	r3, [pc, #12]	; (401e20 <prvInsertTimerInActiveList+0x44>)
  401e14:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401e16:	2000      	movs	r0, #0
  401e18:	bd08      	pop	{r3, pc}
  401e1a:	bf00      	nop
  401e1c:	2040c308 	.word	0x2040c308
  401e20:	004004a5 	.word	0x004004a5
  401e24:	2040c304 	.word	0x2040c304

00401e28 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401e28:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401e2a:	4b15      	ldr	r3, [pc, #84]	; (401e80 <prvCheckForValidListAndQueue+0x58>)
  401e2c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401e2e:	4b15      	ldr	r3, [pc, #84]	; (401e84 <prvCheckForValidListAndQueue+0x5c>)
  401e30:	681b      	ldr	r3, [r3, #0]
  401e32:	b113      	cbz	r3, 401e3a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401e34:	4b14      	ldr	r3, [pc, #80]	; (401e88 <prvCheckForValidListAndQueue+0x60>)
  401e36:	4798      	blx	r3
  401e38:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401e3a:	4d14      	ldr	r5, [pc, #80]	; (401e8c <prvCheckForValidListAndQueue+0x64>)
  401e3c:	4628      	mov	r0, r5
  401e3e:	4e14      	ldr	r6, [pc, #80]	; (401e90 <prvCheckForValidListAndQueue+0x68>)
  401e40:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401e42:	4c14      	ldr	r4, [pc, #80]	; (401e94 <prvCheckForValidListAndQueue+0x6c>)
  401e44:	4620      	mov	r0, r4
  401e46:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401e48:	4b13      	ldr	r3, [pc, #76]	; (401e98 <prvCheckForValidListAndQueue+0x70>)
  401e4a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401e4c:	4b13      	ldr	r3, [pc, #76]	; (401e9c <prvCheckForValidListAndQueue+0x74>)
  401e4e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401e50:	2200      	movs	r2, #0
  401e52:	2110      	movs	r1, #16
  401e54:	2005      	movs	r0, #5
  401e56:	4b12      	ldr	r3, [pc, #72]	; (401ea0 <prvCheckForValidListAndQueue+0x78>)
  401e58:	4798      	blx	r3
  401e5a:	4b0a      	ldr	r3, [pc, #40]	; (401e84 <prvCheckForValidListAndQueue+0x5c>)
  401e5c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401e5e:	b118      	cbz	r0, 401e68 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401e60:	4910      	ldr	r1, [pc, #64]	; (401ea4 <prvCheckForValidListAndQueue+0x7c>)
  401e62:	4b11      	ldr	r3, [pc, #68]	; (401ea8 <prvCheckForValidListAndQueue+0x80>)
  401e64:	4798      	blx	r3
  401e66:	e7e5      	b.n	401e34 <prvCheckForValidListAndQueue+0xc>
  401e68:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e6c:	b672      	cpsid	i
  401e6e:	f383 8811 	msr	BASEPRI, r3
  401e72:	f3bf 8f6f 	isb	sy
  401e76:	f3bf 8f4f 	dsb	sy
  401e7a:	b662      	cpsie	i
  401e7c:	e7fe      	b.n	401e7c <prvCheckForValidListAndQueue+0x54>
  401e7e:	bf00      	nop
  401e80:	004005bd 	.word	0x004005bd
  401e84:	2040c338 	.word	0x2040c338
  401e88:	00400609 	.word	0x00400609
  401e8c:	2040c30c 	.word	0x2040c30c
  401e90:	00400471 	.word	0x00400471
  401e94:	2040c320 	.word	0x2040c320
  401e98:	2040c304 	.word	0x2040c304
  401e9c:	2040c308 	.word	0x2040c308
  401ea0:	00400b15 	.word	0x00400b15
  401ea4:	0040cf04 	.word	0x0040cf04
  401ea8:	00401185 	.word	0x00401185

00401eac <xTimerCreateTimerTask>:
{
  401eac:	b510      	push	{r4, lr}
  401eae:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401eb0:	4b0f      	ldr	r3, [pc, #60]	; (401ef0 <xTimerCreateTimerTask+0x44>)
  401eb2:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401eb4:	4b0f      	ldr	r3, [pc, #60]	; (401ef4 <xTimerCreateTimerTask+0x48>)
  401eb6:	681b      	ldr	r3, [r3, #0]
  401eb8:	b173      	cbz	r3, 401ed8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401eba:	2300      	movs	r3, #0
  401ebc:	9303      	str	r3, [sp, #12]
  401ebe:	9302      	str	r3, [sp, #8]
  401ec0:	9301      	str	r3, [sp, #4]
  401ec2:	2204      	movs	r2, #4
  401ec4:	9200      	str	r2, [sp, #0]
  401ec6:	f44f 7282 	mov.w	r2, #260	; 0x104
  401eca:	490b      	ldr	r1, [pc, #44]	; (401ef8 <xTimerCreateTimerTask+0x4c>)
  401ecc:	480b      	ldr	r0, [pc, #44]	; (401efc <xTimerCreateTimerTask+0x50>)
  401ece:	4c0c      	ldr	r4, [pc, #48]	; (401f00 <xTimerCreateTimerTask+0x54>)
  401ed0:	47a0      	blx	r4
	configASSERT( xReturn );
  401ed2:	b108      	cbz	r0, 401ed8 <xTimerCreateTimerTask+0x2c>
}
  401ed4:	b004      	add	sp, #16
  401ed6:	bd10      	pop	{r4, pc}
  401ed8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401edc:	b672      	cpsid	i
  401ede:	f383 8811 	msr	BASEPRI, r3
  401ee2:	f3bf 8f6f 	isb	sy
  401ee6:	f3bf 8f4f 	dsb	sy
  401eea:	b662      	cpsie	i
  401eec:	e7fe      	b.n	401eec <xTimerCreateTimerTask+0x40>
  401eee:	bf00      	nop
  401ef0:	00401e29 	.word	0x00401e29
  401ef4:	2040c338 	.word	0x2040c338
  401ef8:	0040cf0c 	.word	0x0040cf0c
  401efc:	0040202d 	.word	0x0040202d
  401f00:	00401295 	.word	0x00401295

00401f04 <xTimerGenericCommand>:
	configASSERT( xTimer );
  401f04:	b1d8      	cbz	r0, 401f3e <xTimerGenericCommand+0x3a>
{
  401f06:	b530      	push	{r4, r5, lr}
  401f08:	b085      	sub	sp, #20
  401f0a:	4615      	mov	r5, r2
  401f0c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  401f0e:	4a15      	ldr	r2, [pc, #84]	; (401f64 <xTimerGenericCommand+0x60>)
  401f10:	6810      	ldr	r0, [r2, #0]
  401f12:	b320      	cbz	r0, 401f5e <xTimerGenericCommand+0x5a>
  401f14:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  401f16:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401f18:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401f1a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401f1c:	2905      	cmp	r1, #5
  401f1e:	dc19      	bgt.n	401f54 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401f20:	4b11      	ldr	r3, [pc, #68]	; (401f68 <xTimerGenericCommand+0x64>)
  401f22:	4798      	blx	r3
  401f24:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401f26:	f04f 0300 	mov.w	r3, #0
  401f2a:	bf0c      	ite	eq
  401f2c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401f2e:	461a      	movne	r2, r3
  401f30:	4669      	mov	r1, sp
  401f32:	480c      	ldr	r0, [pc, #48]	; (401f64 <xTimerGenericCommand+0x60>)
  401f34:	6800      	ldr	r0, [r0, #0]
  401f36:	4c0d      	ldr	r4, [pc, #52]	; (401f6c <xTimerGenericCommand+0x68>)
  401f38:	47a0      	blx	r4
}
  401f3a:	b005      	add	sp, #20
  401f3c:	bd30      	pop	{r4, r5, pc}
  401f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f42:	b672      	cpsid	i
  401f44:	f383 8811 	msr	BASEPRI, r3
  401f48:	f3bf 8f6f 	isb	sy
  401f4c:	f3bf 8f4f 	dsb	sy
  401f50:	b662      	cpsie	i
  401f52:	e7fe      	b.n	401f52 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401f54:	2300      	movs	r3, #0
  401f56:	4669      	mov	r1, sp
  401f58:	4c05      	ldr	r4, [pc, #20]	; (401f70 <xTimerGenericCommand+0x6c>)
  401f5a:	47a0      	blx	r4
  401f5c:	e7ed      	b.n	401f3a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  401f5e:	2000      	movs	r0, #0
	return xReturn;
  401f60:	e7eb      	b.n	401f3a <xTimerGenericCommand+0x36>
  401f62:	bf00      	nop
  401f64:	2040c338 	.word	0x2040c338
  401f68:	00401c41 	.word	0x00401c41
  401f6c:	00400bf1 	.word	0x00400bf1
  401f70:	00400dd5 	.word	0x00400dd5

00401f74 <prvSampleTimeNow>:
{
  401f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f78:	b082      	sub	sp, #8
  401f7a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401f7c:	4b24      	ldr	r3, [pc, #144]	; (402010 <prvSampleTimeNow+0x9c>)
  401f7e:	4798      	blx	r3
  401f80:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401f82:	4b24      	ldr	r3, [pc, #144]	; (402014 <prvSampleTimeNow+0xa0>)
  401f84:	681b      	ldr	r3, [r3, #0]
  401f86:	4298      	cmp	r0, r3
  401f88:	d31b      	bcc.n	401fc2 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  401f8a:	2300      	movs	r3, #0
  401f8c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401f90:	4b20      	ldr	r3, [pc, #128]	; (402014 <prvSampleTimeNow+0xa0>)
  401f92:	601f      	str	r7, [r3, #0]
}
  401f94:	4638      	mov	r0, r7
  401f96:	b002      	add	sp, #8
  401f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401f9c:	2100      	movs	r1, #0
  401f9e:	9100      	str	r1, [sp, #0]
  401fa0:	460b      	mov	r3, r1
  401fa2:	4652      	mov	r2, sl
  401fa4:	4620      	mov	r0, r4
  401fa6:	4c1c      	ldr	r4, [pc, #112]	; (402018 <prvSampleTimeNow+0xa4>)
  401fa8:	47a0      	blx	r4
				configASSERT( xResult );
  401faa:	b960      	cbnz	r0, 401fc6 <prvSampleTimeNow+0x52>
  401fac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fb0:	b672      	cpsid	i
  401fb2:	f383 8811 	msr	BASEPRI, r3
  401fb6:	f3bf 8f6f 	isb	sy
  401fba:	f3bf 8f4f 	dsb	sy
  401fbe:	b662      	cpsie	i
  401fc0:	e7fe      	b.n	401fc0 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fc2:	4d16      	ldr	r5, [pc, #88]	; (40201c <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fc4:	4e16      	ldr	r6, [pc, #88]	; (402020 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fc6:	682b      	ldr	r3, [r5, #0]
  401fc8:	681a      	ldr	r2, [r3, #0]
  401fca:	b1c2      	cbz	r2, 401ffe <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401fcc:	68db      	ldr	r3, [r3, #12]
  401fce:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401fd2:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fd4:	f104 0904 	add.w	r9, r4, #4
  401fd8:	4648      	mov	r0, r9
  401fda:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fde:	4620      	mov	r0, r4
  401fe0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401fe2:	69e3      	ldr	r3, [r4, #28]
  401fe4:	2b01      	cmp	r3, #1
  401fe6:	d1ee      	bne.n	401fc6 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401fe8:	69a3      	ldr	r3, [r4, #24]
  401fea:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401fec:	459a      	cmp	sl, r3
  401fee:	d2d5      	bcs.n	401f9c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401ff0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401ff2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401ff4:	4649      	mov	r1, r9
  401ff6:	6828      	ldr	r0, [r5, #0]
  401ff8:	4b0a      	ldr	r3, [pc, #40]	; (402024 <prvSampleTimeNow+0xb0>)
  401ffa:	4798      	blx	r3
  401ffc:	e7e3      	b.n	401fc6 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  401ffe:	4a0a      	ldr	r2, [pc, #40]	; (402028 <prvSampleTimeNow+0xb4>)
  402000:	6810      	ldr	r0, [r2, #0]
  402002:	4906      	ldr	r1, [pc, #24]	; (40201c <prvSampleTimeNow+0xa8>)
  402004:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402006:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402008:	2301      	movs	r3, #1
  40200a:	f8c8 3000 	str.w	r3, [r8]
  40200e:	e7bf      	b.n	401f90 <prvSampleTimeNow+0x1c>
  402010:	00401565 	.word	0x00401565
  402014:	2040c334 	.word	0x2040c334
  402018:	00401f05 	.word	0x00401f05
  40201c:	2040c304 	.word	0x2040c304
  402020:	004004d9 	.word	0x004004d9
  402024:	004004a5 	.word	0x004004a5
  402028:	2040c308 	.word	0x2040c308

0040202c <prvTimerTask>:
{
  40202c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402030:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402032:	4e75      	ldr	r6, [pc, #468]	; (402208 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402034:	4f75      	ldr	r7, [pc, #468]	; (40220c <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402036:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402234 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40203a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402238 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40203e:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402040:	681a      	ldr	r2, [r3, #0]
  402042:	2a00      	cmp	r2, #0
  402044:	f000 80ce 	beq.w	4021e4 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402048:	68db      	ldr	r3, [r3, #12]
  40204a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  40204c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40204e:	a804      	add	r0, sp, #16
  402050:	4b6f      	ldr	r3, [pc, #444]	; (402210 <prvTimerTask+0x1e4>)
  402052:	4798      	blx	r3
  402054:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402056:	9b04      	ldr	r3, [sp, #16]
  402058:	2b00      	cmp	r3, #0
  40205a:	d144      	bne.n	4020e6 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40205c:	42a0      	cmp	r0, r4
  40205e:	d212      	bcs.n	402086 <prvTimerTask+0x5a>
  402060:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402062:	1b61      	subs	r1, r4, r5
  402064:	4b6b      	ldr	r3, [pc, #428]	; (402214 <prvTimerTask+0x1e8>)
  402066:	6818      	ldr	r0, [r3, #0]
  402068:	4b6b      	ldr	r3, [pc, #428]	; (402218 <prvTimerTask+0x1ec>)
  40206a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40206c:	4b6b      	ldr	r3, [pc, #428]	; (40221c <prvTimerTask+0x1f0>)
  40206e:	4798      	blx	r3
  402070:	2800      	cmp	r0, #0
  402072:	d13a      	bne.n	4020ea <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402078:	f8c9 3000 	str.w	r3, [r9]
  40207c:	f3bf 8f4f 	dsb	sy
  402080:	f3bf 8f6f 	isb	sy
  402084:	e031      	b.n	4020ea <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402086:	4b65      	ldr	r3, [pc, #404]	; (40221c <prvTimerTask+0x1f0>)
  402088:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40208a:	6833      	ldr	r3, [r6, #0]
  40208c:	68db      	ldr	r3, [r3, #12]
  40208e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402092:	f10a 0004 	add.w	r0, sl, #4
  402096:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402098:	f8da 301c 	ldr.w	r3, [sl, #28]
  40209c:	2b01      	cmp	r3, #1
  40209e:	d004      	beq.n	4020aa <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4020a0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4020a4:	4650      	mov	r0, sl
  4020a6:	4798      	blx	r3
  4020a8:	e01f      	b.n	4020ea <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4020aa:	f8da 1018 	ldr.w	r1, [sl, #24]
  4020ae:	4623      	mov	r3, r4
  4020b0:	462a      	mov	r2, r5
  4020b2:	4421      	add	r1, r4
  4020b4:	4650      	mov	r0, sl
  4020b6:	4d5a      	ldr	r5, [pc, #360]	; (402220 <prvTimerTask+0x1f4>)
  4020b8:	47a8      	blx	r5
  4020ba:	2801      	cmp	r0, #1
  4020bc:	d1f0      	bne.n	4020a0 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4020be:	2100      	movs	r1, #0
  4020c0:	9100      	str	r1, [sp, #0]
  4020c2:	460b      	mov	r3, r1
  4020c4:	4622      	mov	r2, r4
  4020c6:	4650      	mov	r0, sl
  4020c8:	4c56      	ldr	r4, [pc, #344]	; (402224 <prvTimerTask+0x1f8>)
  4020ca:	47a0      	blx	r4
			configASSERT( xResult );
  4020cc:	2800      	cmp	r0, #0
  4020ce:	d1e7      	bne.n	4020a0 <prvTimerTask+0x74>
  4020d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020d4:	b672      	cpsid	i
  4020d6:	f383 8811 	msr	BASEPRI, r3
  4020da:	f3bf 8f6f 	isb	sy
  4020de:	f3bf 8f4f 	dsb	sy
  4020e2:	b662      	cpsie	i
  4020e4:	e7fe      	b.n	4020e4 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4020e6:	4b4d      	ldr	r3, [pc, #308]	; (40221c <prvTimerTask+0x1f0>)
  4020e8:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4020ea:	4d4a      	ldr	r5, [pc, #296]	; (402214 <prvTimerTask+0x1e8>)
  4020ec:	4c4e      	ldr	r4, [pc, #312]	; (402228 <prvTimerTask+0x1fc>)
  4020ee:	e006      	b.n	4020fe <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4020f0:	9907      	ldr	r1, [sp, #28]
  4020f2:	9806      	ldr	r0, [sp, #24]
  4020f4:	9b05      	ldr	r3, [sp, #20]
  4020f6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4020f8:	9b04      	ldr	r3, [sp, #16]
  4020fa:	2b00      	cmp	r3, #0
  4020fc:	da09      	bge.n	402112 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4020fe:	2300      	movs	r3, #0
  402100:	461a      	mov	r2, r3
  402102:	a904      	add	r1, sp, #16
  402104:	6828      	ldr	r0, [r5, #0]
  402106:	47a0      	blx	r4
  402108:	2800      	cmp	r0, #0
  40210a:	d098      	beq.n	40203e <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40210c:	9b04      	ldr	r3, [sp, #16]
  40210e:	2b00      	cmp	r3, #0
  402110:	dbee      	blt.n	4020f0 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402112:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402116:	f8da 3014 	ldr.w	r3, [sl, #20]
  40211a:	b113      	cbz	r3, 402122 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40211c:	f10a 0004 	add.w	r0, sl, #4
  402120:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402122:	a803      	add	r0, sp, #12
  402124:	4b3a      	ldr	r3, [pc, #232]	; (402210 <prvTimerTask+0x1e4>)
  402126:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402128:	9b04      	ldr	r3, [sp, #16]
  40212a:	2b09      	cmp	r3, #9
  40212c:	d8e7      	bhi.n	4020fe <prvTimerTask+0xd2>
  40212e:	a201      	add	r2, pc, #4	; (adr r2, 402134 <prvTimerTask+0x108>)
  402130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402134:	0040215d 	.word	0x0040215d
  402138:	0040215d 	.word	0x0040215d
  40213c:	0040215d 	.word	0x0040215d
  402140:	004020ff 	.word	0x004020ff
  402144:	004021b1 	.word	0x004021b1
  402148:	004021dd 	.word	0x004021dd
  40214c:	0040215d 	.word	0x0040215d
  402150:	0040215d 	.word	0x0040215d
  402154:	004020ff 	.word	0x004020ff
  402158:	004021b1 	.word	0x004021b1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  40215c:	9c05      	ldr	r4, [sp, #20]
  40215e:	f8da 1018 	ldr.w	r1, [sl, #24]
  402162:	4623      	mov	r3, r4
  402164:	4602      	mov	r2, r0
  402166:	4421      	add	r1, r4
  402168:	4650      	mov	r0, sl
  40216a:	4c2d      	ldr	r4, [pc, #180]	; (402220 <prvTimerTask+0x1f4>)
  40216c:	47a0      	blx	r4
  40216e:	2801      	cmp	r0, #1
  402170:	d1bc      	bne.n	4020ec <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402172:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402176:	4650      	mov	r0, sl
  402178:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40217a:	f8da 301c 	ldr.w	r3, [sl, #28]
  40217e:	2b01      	cmp	r3, #1
  402180:	d1b4      	bne.n	4020ec <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402182:	f8da 2018 	ldr.w	r2, [sl, #24]
  402186:	2100      	movs	r1, #0
  402188:	9100      	str	r1, [sp, #0]
  40218a:	460b      	mov	r3, r1
  40218c:	9805      	ldr	r0, [sp, #20]
  40218e:	4402      	add	r2, r0
  402190:	4650      	mov	r0, sl
  402192:	4c24      	ldr	r4, [pc, #144]	; (402224 <prvTimerTask+0x1f8>)
  402194:	47a0      	blx	r4
							configASSERT( xResult );
  402196:	2800      	cmp	r0, #0
  402198:	d1a8      	bne.n	4020ec <prvTimerTask+0xc0>
  40219a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40219e:	b672      	cpsid	i
  4021a0:	f383 8811 	msr	BASEPRI, r3
  4021a4:	f3bf 8f6f 	isb	sy
  4021a8:	f3bf 8f4f 	dsb	sy
  4021ac:	b662      	cpsie	i
  4021ae:	e7fe      	b.n	4021ae <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4021b0:	9905      	ldr	r1, [sp, #20]
  4021b2:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4021b6:	b131      	cbz	r1, 4021c6 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4021b8:	4603      	mov	r3, r0
  4021ba:	4602      	mov	r2, r0
  4021bc:	4401      	add	r1, r0
  4021be:	4650      	mov	r0, sl
  4021c0:	4c17      	ldr	r4, [pc, #92]	; (402220 <prvTimerTask+0x1f4>)
  4021c2:	47a0      	blx	r4
  4021c4:	e792      	b.n	4020ec <prvTimerTask+0xc0>
  4021c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021ca:	b672      	cpsid	i
  4021cc:	f383 8811 	msr	BASEPRI, r3
  4021d0:	f3bf 8f6f 	isb	sy
  4021d4:	f3bf 8f4f 	dsb	sy
  4021d8:	b662      	cpsie	i
  4021da:	e7fe      	b.n	4021da <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4021dc:	4650      	mov	r0, sl
  4021de:	4b13      	ldr	r3, [pc, #76]	; (40222c <prvTimerTask+0x200>)
  4021e0:	4798      	blx	r3
  4021e2:	e783      	b.n	4020ec <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4021e4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4021e6:	a804      	add	r0, sp, #16
  4021e8:	4b09      	ldr	r3, [pc, #36]	; (402210 <prvTimerTask+0x1e4>)
  4021ea:	4798      	blx	r3
  4021ec:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4021ee:	9b04      	ldr	r3, [sp, #16]
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	f47f af78 	bne.w	4020e6 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4021f6:	4b0e      	ldr	r3, [pc, #56]	; (402230 <prvTimerTask+0x204>)
  4021f8:	681b      	ldr	r3, [r3, #0]
  4021fa:	681a      	ldr	r2, [r3, #0]
  4021fc:	fab2 f282 	clz	r2, r2
  402200:	0952      	lsrs	r2, r2, #5
  402202:	2400      	movs	r4, #0
  402204:	e72d      	b.n	402062 <prvTimerTask+0x36>
  402206:	bf00      	nop
  402208:	2040c304 	.word	0x2040c304
  40220c:	00401555 	.word	0x00401555
  402210:	00401f75 	.word	0x00401f75
  402214:	2040c338 	.word	0x2040c338
  402218:	004011b9 	.word	0x004011b9
  40221c:	004016bd 	.word	0x004016bd
  402220:	00401ddd 	.word	0x00401ddd
  402224:	00401f05 	.word	0x00401f05
  402228:	00400fb5 	.word	0x00400fb5
  40222c:	00400889 	.word	0x00400889
  402230:	2040c308 	.word	0x2040c308
  402234:	e000ed04 	.word	0xe000ed04
  402238:	004004d9 	.word	0x004004d9

0040223c <chip_isr>:
  //CORSI acorda task wifi freertos
  //BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  //xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
  //vTaskNotifyGiveFromISR( xHandleWifi, &xHigherPriorityTaskWoken );
  
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  40223c:	2810      	cmp	r0, #16
  40223e:	d108      	bne.n	402252 <chip_isr+0x16>
  402240:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402244:	d105      	bne.n	402252 <chip_isr+0x16>
{
  402246:	b508      	push	{r3, lr}
		if (gpfIsr) {
  402248:	4b02      	ldr	r3, [pc, #8]	; (402254 <chip_isr+0x18>)
  40224a:	681b      	ldr	r3, [r3, #0]
  40224c:	b103      	cbz	r3, 402250 <chip_isr+0x14>
			gpfIsr();
  40224e:	4798      	blx	r3
  402250:	bd08      	pop	{r3, pc}
  402252:	4770      	bx	lr
  402254:	2040c33c 	.word	0x2040c33c

00402258 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  402258:	b150      	cbz	r0, 402270 <nm_bsp_sleep+0x18>
{
  40225a:	b570      	push	{r4, r5, r6, lr}
  40225c:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  40225e:	4e05      	ldr	r6, [pc, #20]	; (402274 <nm_bsp_sleep+0x1c>)
  402260:	4d05      	ldr	r5, [pc, #20]	; (402278 <nm_bsp_sleep+0x20>)
  402262:	4630      	mov	r0, r6
  402264:	47a8      	blx	r5
	while(u32TimeMsec--) {
  402266:	3c01      	subs	r4, #1
  402268:	f1b4 3fff 	cmp.w	r4, #4294967295
  40226c:	d1f9      	bne.n	402262 <nm_bsp_sleep+0xa>
  40226e:	bd70      	pop	{r4, r5, r6, pc}
  402270:	4770      	bx	lr
  402272:	bf00      	nop
  402274:	00031635 	.word	0x00031635
  402278:	20400001 	.word	0x20400001

0040227c <nm_bsp_reset>:
{
  40227c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402280:	4f09      	ldr	r7, [pc, #36]	; (4022a8 <nm_bsp_reset+0x2c>)
  402282:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  402286:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  40228a:	4d08      	ldr	r5, [pc, #32]	; (4022ac <nm_bsp_reset+0x30>)
  40228c:	2608      	movs	r6, #8
  40228e:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  402290:	2064      	movs	r0, #100	; 0x64
  402292:	4c07      	ldr	r4, [pc, #28]	; (4022b0 <nm_bsp_reset+0x34>)
  402294:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402296:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  40229a:	2064      	movs	r0, #100	; 0x64
  40229c:	47a0      	blx	r4
  40229e:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  4022a0:	2064      	movs	r0, #100	; 0x64
  4022a2:	47a0      	blx	r4
  4022a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4022a8:	400e1200 	.word	0x400e1200
  4022ac:	400e1000 	.word	0x400e1000
  4022b0:	00402259 	.word	0x00402259

004022b4 <nm_bsp_init>:
{
  4022b4:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  4022b6:	2200      	movs	r2, #0
  4022b8:	4b14      	ldr	r3, [pc, #80]	; (40230c <nm_bsp_init+0x58>)
  4022ba:	601a      	str	r2, [r3, #0]
  4022bc:	200a      	movs	r0, #10
  4022be:	4c14      	ldr	r4, [pc, #80]	; (402310 <nm_bsp_init+0x5c>)
  4022c0:	47a0      	blx	r4
  4022c2:	200b      	movs	r0, #11
  4022c4:	47a0      	blx	r4
  4022c6:	200c      	movs	r0, #12
  4022c8:	47a0      	blx	r4
  4022ca:	2010      	movs	r0, #16
  4022cc:	47a0      	blx	r4
  4022ce:	2011      	movs	r0, #17
  4022d0:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022d2:	4b10      	ldr	r3, [pc, #64]	; (402314 <nm_bsp_init+0x60>)
  4022d4:	2208      	movs	r2, #8
  4022d6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022dc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022de:	4a0e      	ldr	r2, [pc, #56]	; (402318 <nm_bsp_init+0x64>)
  4022e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4022e4:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022e6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022ea:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4022ec:	2204      	movs	r2, #4
  4022ee:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4022f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  4022f6:	4b09      	ldr	r3, [pc, #36]	; (40231c <nm_bsp_init+0x68>)
  4022f8:	681b      	ldr	r3, [r3, #0]
  4022fa:	f013 0f01 	tst.w	r3, #1
  4022fe:	d001      	beq.n	402304 <nm_bsp_init+0x50>
  402300:	4b06      	ldr	r3, [pc, #24]	; (40231c <nm_bsp_init+0x68>)
  402302:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  402304:	4b06      	ldr	r3, [pc, #24]	; (402320 <nm_bsp_init+0x6c>)
  402306:	4798      	blx	r3
}
  402308:	2000      	movs	r0, #0
  40230a:	bd10      	pop	{r4, pc}
  40230c:	2040c33c 	.word	0x2040c33c
  402310:	00405509 	.word	0x00405509
  402314:	400e1000 	.word	0x400e1000
  402318:	400e1200 	.word	0x400e1200
  40231c:	e000e010 	.word	0xe000e010
  402320:	0040227d 	.word	0x0040227d

00402324 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  402324:	b530      	push	{r4, r5, lr}
  402326:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  402328:	4b17      	ldr	r3, [pc, #92]	; (402388 <nm_bsp_register_isr+0x64>)
  40232a:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  40232c:	2010      	movs	r0, #16
  40232e:	4b17      	ldr	r3, [pc, #92]	; (40238c <nm_bsp_register_isr+0x68>)
  402330:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  402332:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402336:	207c      	movs	r0, #124	; 0x7c
  402338:	4b15      	ldr	r3, [pc, #84]	; (402390 <nm_bsp_register_isr+0x6c>)
  40233a:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  40233c:	4c15      	ldr	r4, [pc, #84]	; (402394 <nm_bsp_register_isr+0x70>)
  40233e:	2201      	movs	r2, #1
  402340:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402344:	4620      	mov	r0, r4
  402346:	4b14      	ldr	r3, [pc, #80]	; (402398 <nm_bsp_register_isr+0x74>)
  402348:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  40234a:	4b14      	ldr	r3, [pc, #80]	; (40239c <nm_bsp_register_isr+0x78>)
  40234c:	9300      	str	r3, [sp, #0]
  40234e:	2351      	movs	r3, #81	; 0x51
  402350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402354:	2110      	movs	r1, #16
  402356:	4620      	mov	r0, r4
  402358:	4d11      	ldr	r5, [pc, #68]	; (4023a0 <nm_bsp_register_isr+0x7c>)
  40235a:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  40235c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402360:	4620      	mov	r0, r4
  402362:	4b10      	ldr	r3, [pc, #64]	; (4023a4 <nm_bsp_register_isr+0x80>)
  402364:	4798      	blx	r3
  // corsi: clear PIO IRQ before enable nvic
  pio_get_interrupt_status(CONF_WINC_SPI_INT_PIO);
  402366:	4620      	mov	r0, r4
  402368:	4b0f      	ldr	r3, [pc, #60]	; (4023a8 <nm_bsp_register_isr+0x84>)
  40236a:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40236c:	4b0f      	ldr	r3, [pc, #60]	; (4023ac <nm_bsp_register_isr+0x88>)
  40236e:	22a0      	movs	r2, #160	; 0xa0
  402370:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402374:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402378:	601a      	str	r2, [r3, #0]
  // corsi: for use with RTOS priority shall be < configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY 
 	NVIC_SetPriority((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID, 5);
 	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  40237a:	2205      	movs	r2, #5
  40237c:	2110      	movs	r1, #16
  40237e:	4620      	mov	r0, r4
  402380:	4b0b      	ldr	r3, [pc, #44]	; (4023b0 <nm_bsp_register_isr+0x8c>)
  402382:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  402384:	b003      	add	sp, #12
  402386:	bd30      	pop	{r4, r5, pc}
  402388:	2040c33c 	.word	0x2040c33c
  40238c:	00405509 	.word	0x00405509
  402390:	00405111 	.word	0x00405111
  402394:	400e1400 	.word	0x400e1400
  402398:	00404fb1 	.word	0x00404fb1
  40239c:	0040223d 	.word	0x0040223d
  4023a0:	00405291 	.word	0x00405291
  4023a4:	004050ff 	.word	0x004050ff
  4023a8:	00405107 	.word	0x00405107
  4023ac:	e000e100 	.word	0xe000e100
  4023b0:	00405365 	.word	0x00405365

004023b4 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  4023b4:	b508      	push	{r3, lr}
	if (u8Enable) {
  4023b6:	b928      	cbnz	r0, 4023c4 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4023b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4023bc:	4804      	ldr	r0, [pc, #16]	; (4023d0 <nm_bsp_interrupt_ctrl+0x1c>)
  4023be:	4b05      	ldr	r3, [pc, #20]	; (4023d4 <nm_bsp_interrupt_ctrl+0x20>)
  4023c0:	4798      	blx	r3
  4023c2:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  4023c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4023c8:	4801      	ldr	r0, [pc, #4]	; (4023d0 <nm_bsp_interrupt_ctrl+0x1c>)
  4023ca:	4b03      	ldr	r3, [pc, #12]	; (4023d8 <nm_bsp_interrupt_ctrl+0x24>)
  4023cc:	4798      	blx	r3
  4023ce:	bd08      	pop	{r3, pc}
  4023d0:	400e1400 	.word	0x400e1400
  4023d4:	00405103 	.word	0x00405103
  4023d8:	004050ff 	.word	0x004050ff

004023dc <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  4023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  4023de:	4c39      	ldr	r4, [pc, #228]	; (4024c4 <nm_bus_init+0xe8>)
  4023e0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4023e4:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4023e6:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4023ea:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4023ec:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4023ee:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4023f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4023f4:	430b      	orrs	r3, r1
  4023f6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4023f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4023fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4023fe:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402404:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402406:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40240a:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40240c:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40240e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402412:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402414:	4313      	orrs	r3, r2
  402416:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402418:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40241a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40241e:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  402420:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  402424:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402426:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40242a:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  40242c:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40242e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  402432:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402434:	4318      	orrs	r0, r3
  402436:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402438:	6f60      	ldr	r0, [r4, #116]	; 0x74
  40243a:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40243e:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402440:	6061      	str	r1, [r4, #4]
  402442:	6062      	str	r2, [r4, #4]
  402444:	6063      	str	r3, [r4, #4]
  402446:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  40244a:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  40244c:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40244e:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  402450:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  402452:	4d1d      	ldr	r5, [pc, #116]	; (4024c8 <nm_bus_init+0xec>)
  402454:	4628      	mov	r0, r5
  402456:	4b1d      	ldr	r3, [pc, #116]	; (4024cc <nm_bus_init+0xf0>)
  402458:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40245a:	2302      	movs	r3, #2
  40245c:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40245e:	2380      	movs	r3, #128	; 0x80
  402460:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  402462:	686b      	ldr	r3, [r5, #4]
  402464:	f043 0301 	orr.w	r3, r3, #1
  402468:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40246a:	686b      	ldr	r3, [r5, #4]
  40246c:	f043 0310 	orr.w	r3, r3, #16
  402470:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  402472:	2101      	movs	r1, #1
  402474:	4628      	mov	r0, r5
  402476:	4b16      	ldr	r3, [pc, #88]	; (4024d0 <nm_bus_init+0xf4>)
  402478:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  40247a:	2200      	movs	r2, #0
  40247c:	2101      	movs	r1, #1
  40247e:	4628      	mov	r0, r5
  402480:	4b14      	ldr	r3, [pc, #80]	; (4024d4 <nm_bus_init+0xf8>)
  402482:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  402484:	2201      	movs	r2, #1
  402486:	4611      	mov	r1, r2
  402488:	4628      	mov	r0, r5
  40248a:	4b13      	ldr	r3, [pc, #76]	; (4024d8 <nm_bus_init+0xfc>)
  40248c:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  40248e:	2200      	movs	r2, #0
  402490:	2101      	movs	r1, #1
  402492:	4628      	mov	r0, r5
  402494:	4b11      	ldr	r3, [pc, #68]	; (4024dc <nm_bus_init+0x100>)
  402496:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  402498:	4911      	ldr	r1, [pc, #68]	; (4024e0 <nm_bus_init+0x104>)
  40249a:	4812      	ldr	r0, [pc, #72]	; (4024e4 <nm_bus_init+0x108>)
  40249c:	4b12      	ldr	r3, [pc, #72]	; (4024e8 <nm_bus_init+0x10c>)
  40249e:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  4024a0:	b2c2      	uxtb	r2, r0
  4024a2:	2101      	movs	r1, #1
  4024a4:	4628      	mov	r0, r5
  4024a6:	4b11      	ldr	r3, [pc, #68]	; (4024ec <nm_bus_init+0x110>)
  4024a8:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  4024aa:	2300      	movs	r3, #0
  4024ac:	461a      	mov	r2, r3
  4024ae:	2101      	movs	r1, #1
  4024b0:	4628      	mov	r0, r5
  4024b2:	4f0f      	ldr	r7, [pc, #60]	; (4024f0 <nm_bus_init+0x114>)
  4024b4:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4024b6:	2301      	movs	r3, #1
  4024b8:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4024ba:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4024bc:	4b0d      	ldr	r3, [pc, #52]	; (4024f4 <nm_bus_init+0x118>)
  4024be:	4798      	blx	r3
#endif
	return result;
}
  4024c0:	2000      	movs	r0, #0
  4024c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024c4:	400e1400 	.word	0x400e1400
  4024c8:	40008000 	.word	0x40008000
  4024cc:	0040555d 	.word	0x0040555d
  4024d0:	00405589 	.word	0x00405589
  4024d4:	00405603 	.word	0x00405603
  4024d8:	00405621 	.word	0x00405621
  4024dc:	0040563f 	.word	0x0040563f
  4024e0:	11e1a300 	.word	0x11e1a300
  4024e4:	02dc6c00 	.word	0x02dc6c00
  4024e8:	00405653 	.word	0x00405653
  4024ec:	00405669 	.word	0x00405669
  4024f0:	00405691 	.word	0x00405691
  4024f4:	0040227d 	.word	0x0040227d

004024f8 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024fc:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4024fe:	2803      	cmp	r0, #3
  402500:	d144      	bne.n	40258c <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  402502:	680e      	ldr	r6, [r1, #0]
  402504:	684d      	ldr	r5, [r1, #4]
  402506:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  402508:	2300      	movs	r3, #0
  40250a:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40250e:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  402512:	b186      	cbz	r6, 402536 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  402514:	2d00      	cmp	r5, #0
  402516:	d136      	bne.n	402586 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  402518:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  40251c:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40251e:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  402520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402524:	4b20      	ldr	r3, [pc, #128]	; (4025a8 <nm_bus_ioctl+0xb0>)
  402526:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  402528:	b32c      	cbz	r4, 402576 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  40252a:	4f20      	ldr	r7, [pc, #128]	; (4025ac <nm_bus_ioctl+0xb4>)
  40252c:	f8df b094 	ldr.w	fp, [pc, #148]	; 4025c4 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  402530:	f8df a094 	ldr.w	sl, [pc, #148]	; 4025c8 <nm_bus_ioctl+0xd0>
  402534:	e006      	b.n	402544 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402536:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  40253a:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40253e:	ae01      	add	r6, sp, #4
  402540:	e7ee      	b.n	402520 <nm_bus_ioctl+0x28>
	while (u16Sz) {
  402542:	b1c4      	cbz	r4, 402576 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402544:	2300      	movs	r3, #0
  402546:	461a      	mov	r2, r3
  402548:	7831      	ldrb	r1, [r6, #0]
  40254a:	4638      	mov	r0, r7
  40254c:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40254e:	f10d 0205 	add.w	r2, sp, #5
  402552:	f10d 0106 	add.w	r1, sp, #6
  402556:	4638      	mov	r0, r7
  402558:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  40255a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40255e:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  402560:	3c01      	subs	r4, #1
  402562:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  402564:	f1b8 0f00 	cmp.w	r8, #0
  402568:	d100      	bne.n	40256c <nm_bus_ioctl+0x74>
			pu8Miso++;
  40256a:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  40256c:	f1b9 0f00 	cmp.w	r9, #0
  402570:	d1e7      	bne.n	402542 <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  402572:	3601      	adds	r6, #1
  402574:	e7e5      	b.n	402542 <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  402576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40257a:	4b0b      	ldr	r3, [pc, #44]	; (4025a8 <nm_bus_ioctl+0xb0>)
  40257c:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  40257e:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  402580:	b003      	add	sp, #12
  402582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  402586:	f06f 0005 	mvn.w	r0, #5
		break;
  40258a:	e7f9      	b.n	402580 <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  40258c:	f240 121f 	movw	r2, #287	; 0x11f
  402590:	4907      	ldr	r1, [pc, #28]	; (4025b0 <nm_bus_ioctl+0xb8>)
  402592:	4808      	ldr	r0, [pc, #32]	; (4025b4 <nm_bus_ioctl+0xbc>)
  402594:	4c08      	ldr	r4, [pc, #32]	; (4025b8 <nm_bus_ioctl+0xc0>)
  402596:	47a0      	blx	r4
  402598:	4808      	ldr	r0, [pc, #32]	; (4025bc <nm_bus_ioctl+0xc4>)
  40259a:	47a0      	blx	r4
  40259c:	4808      	ldr	r0, [pc, #32]	; (4025c0 <nm_bus_ioctl+0xc8>)
  40259e:	47a0      	blx	r4
			s8Ret = -1;
  4025a0:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  4025a4:	e7ec      	b.n	402580 <nm_bus_ioctl+0x88>
  4025a6:	bf00      	nop
  4025a8:	400e1400 	.word	0x400e1400
  4025ac:	40008000 	.word	0x40008000
  4025b0:	0040cf14 	.word	0x0040cf14
  4025b4:	0040cf24 	.word	0x0040cf24
  4025b8:	00406239 	.word	0x00406239
  4025bc:	0040cf38 	.word	0x0040cf38
  4025c0:	0040cf50 	.word	0x0040cf50
  4025c4:	004055cf 	.word	0x004055cf
  4025c8:	0040559f 	.word	0x0040559f

004025cc <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4025cc:	2202      	movs	r2, #2
  4025ce:	4b0e      	ldr	r3, [pc, #56]	; (402608 <nm_bus_deinit+0x3c>)
  4025d0:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025d2:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4025d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4025da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4025de:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4025e8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4025f2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4025fc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  402602:	2000      	movs	r0, #0
  402604:	4770      	bx	lr
  402606:	bf00      	nop
  402608:	40008000 	.word	0x40008000

0040260c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  40260c:	b13a      	cbz	r2, 40261e <m2m_memcpy+0x12>
  40260e:	3901      	subs	r1, #1
  402610:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  402612:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402616:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  40261a:	4290      	cmp	r0, r2
  40261c:	d1f9      	bne.n	402612 <m2m_memcpy+0x6>
  40261e:	4770      	bx	lr

00402620 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  402620:	b122      	cbz	r2, 40262c <m2m_memset+0xc>
  402622:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402624:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402628:	4290      	cmp	r0, r2
  40262a:	d1fb      	bne.n	402624 <m2m_memset+0x4>
  40262c:	4770      	bx	lr

0040262e <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40262e:	7803      	ldrb	r3, [r0, #0]
  402630:	b143      	cbz	r3, 402644 <m2m_strlen+0x16>
  402632:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  402634:	3301      	adds	r3, #1
  402636:	b29b      	uxth	r3, r3
	while(*pcStr)
  402638:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  40263c:	2a00      	cmp	r2, #0
  40263e:	d1f9      	bne.n	402634 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  402640:	4618      	mov	r0, r3
  402642:	4770      	bx	lr
	uint16	u16StrLen = 0;
  402644:	2300      	movs	r3, #0
  402646:	e7fb      	b.n	402640 <m2m_strlen+0x12>

00402648 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  402648:	4a02      	ldr	r2, [pc, #8]	; (402654 <isr+0xc>)
  40264a:	7813      	ldrb	r3, [r2, #0]
  40264c:	3301      	adds	r3, #1
  40264e:	b2db      	uxtb	r3, r3
  402650:	7013      	strb	r3, [r2, #0]
  402652:	4770      	bx	lr
  402654:	2040c343 	.word	0x2040c343

00402658 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402658:	4770      	bx	lr
	...

0040265c <hif_set_rx_done>:
{
  40265c:	b500      	push	{lr}
  40265e:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  402660:	2001      	movs	r0, #1
  402662:	4b0b      	ldr	r3, [pc, #44]	; (402690 <hif_set_rx_done+0x34>)
  402664:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402666:	a901      	add	r1, sp, #4
  402668:	f241 0070 	movw	r0, #4208	; 0x1070
  40266c:	4b09      	ldr	r3, [pc, #36]	; (402694 <hif_set_rx_done+0x38>)
  40266e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402670:	4603      	mov	r3, r0
  402672:	b118      	cbz	r0, 40267c <hif_set_rx_done+0x20>
}
  402674:	4618      	mov	r0, r3
  402676:	b003      	add	sp, #12
  402678:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  40267c:	9901      	ldr	r1, [sp, #4]
  40267e:	f041 0102 	orr.w	r1, r1, #2
  402682:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402684:	f241 0070 	movw	r0, #4208	; 0x1070
  402688:	4b03      	ldr	r3, [pc, #12]	; (402698 <hif_set_rx_done+0x3c>)
  40268a:	4798      	blx	r3
  40268c:	4603      	mov	r3, r0
  40268e:	e7f1      	b.n	402674 <hif_set_rx_done+0x18>
  402690:	004023b5 	.word	0x004023b5
  402694:	00403949 	.word	0x00403949
  402698:	00403955 	.word	0x00403955

0040269c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  40269c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40269e:	4b12      	ldr	r3, [pc, #72]	; (4026e8 <hif_chip_wake+0x4c>)
  4026a0:	781b      	ldrb	r3, [r3, #0]
  4026a2:	b94b      	cbnz	r3, 4026b8 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4026a4:	4b11      	ldr	r3, [pc, #68]	; (4026ec <hif_chip_wake+0x50>)
  4026a6:	781b      	ldrb	r3, [r3, #0]
  4026a8:	b2db      	uxtb	r3, r3
  4026aa:	2b03      	cmp	r3, #3
  4026ac:	d00c      	beq.n	4026c8 <hif_chip_wake+0x2c>
  4026ae:	4b0f      	ldr	r3, [pc, #60]	; (4026ec <hif_chip_wake+0x50>)
  4026b0:	781b      	ldrb	r3, [r3, #0]
  4026b2:	b2db      	uxtb	r3, r3
  4026b4:	2b04      	cmp	r3, #4
  4026b6:	d007      	beq.n	4026c8 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4026b8:	4a0b      	ldr	r2, [pc, #44]	; (4026e8 <hif_chip_wake+0x4c>)
  4026ba:	7813      	ldrb	r3, [r2, #0]
  4026bc:	3301      	adds	r3, #1
  4026be:	b2db      	uxtb	r3, r3
  4026c0:	7013      	strb	r3, [r2, #0]
  4026c2:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4026c4:	4618      	mov	r0, r3
  4026c6:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  4026c8:	4b09      	ldr	r3, [pc, #36]	; (4026f0 <hif_chip_wake+0x54>)
  4026ca:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4026cc:	4603      	mov	r3, r0
  4026ce:	2800      	cmp	r0, #0
  4026d0:	d1f8      	bne.n	4026c4 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4026d2:	f245 6178 	movw	r1, #22136	; 0x5678
  4026d6:	f241 0074 	movw	r0, #4212	; 0x1074
  4026da:	4b06      	ldr	r3, [pc, #24]	; (4026f4 <hif_chip_wake+0x58>)
  4026dc:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4026de:	4603      	mov	r3, r0
  4026e0:	2800      	cmp	r0, #0
  4026e2:	d0e9      	beq.n	4026b8 <hif_chip_wake+0x1c>
  4026e4:	e7ee      	b.n	4026c4 <hif_chip_wake+0x28>
  4026e6:	bf00      	nop
  4026e8:	2040c341 	.word	0x2040c341
  4026ec:	2040c340 	.word	0x2040c340
  4026f0:	004034b9 	.word	0x004034b9
  4026f4:	00403955 	.word	0x00403955

004026f8 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4026f8:	4b1e      	ldr	r3, [pc, #120]	; (402774 <hif_chip_sleep+0x7c>)
  4026fa:	781b      	ldrb	r3, [r3, #0]
  4026fc:	b123      	cbz	r3, 402708 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  4026fe:	4a1d      	ldr	r2, [pc, #116]	; (402774 <hif_chip_sleep+0x7c>)
  402700:	7813      	ldrb	r3, [r2, #0]
  402702:	3b01      	subs	r3, #1
  402704:	b2db      	uxtb	r3, r3
  402706:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402708:	4b1a      	ldr	r3, [pc, #104]	; (402774 <hif_chip_sleep+0x7c>)
  40270a:	781b      	ldrb	r3, [r3, #0]
  40270c:	2b00      	cmp	r3, #0
  40270e:	d12e      	bne.n	40276e <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402710:	4b19      	ldr	r3, [pc, #100]	; (402778 <hif_chip_sleep+0x80>)
  402712:	781b      	ldrb	r3, [r3, #0]
  402714:	b2db      	uxtb	r3, r3
  402716:	2b03      	cmp	r3, #3
  402718:	d006      	beq.n	402728 <hif_chip_sleep+0x30>
  40271a:	4b17      	ldr	r3, [pc, #92]	; (402778 <hif_chip_sleep+0x80>)
  40271c:	781b      	ldrb	r3, [r3, #0]
  40271e:	b2db      	uxtb	r3, r3
  402720:	2b04      	cmp	r3, #4
  402722:	d001      	beq.n	402728 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402724:	2300      	movs	r3, #0
  402726:	e023      	b.n	402770 <hif_chip_sleep+0x78>
{
  402728:	b500      	push	{lr}
  40272a:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  40272c:	2300      	movs	r3, #0
  40272e:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  402730:	f244 3121 	movw	r1, #17185	; 0x4321
  402734:	f241 0074 	movw	r0, #4212	; 0x1074
  402738:	4b10      	ldr	r3, [pc, #64]	; (40277c <hif_chip_sleep+0x84>)
  40273a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40273c:	4603      	mov	r3, r0
  40273e:	b118      	cbz	r0, 402748 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  402740:	4618      	mov	r0, r3
  402742:	b003      	add	sp, #12
  402744:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  402748:	a901      	add	r1, sp, #4
  40274a:	2001      	movs	r0, #1
  40274c:	4b0c      	ldr	r3, [pc, #48]	; (402780 <hif_chip_sleep+0x88>)
  40274e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402750:	4603      	mov	r3, r0
  402752:	2800      	cmp	r0, #0
  402754:	d1f4      	bne.n	402740 <hif_chip_sleep+0x48>
			if(reg&0x2)
  402756:	9901      	ldr	r1, [sp, #4]
  402758:	f011 0f02 	tst.w	r1, #2
  40275c:	d0f0      	beq.n	402740 <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  40275e:	f021 0102 	bic.w	r1, r1, #2
  402762:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  402764:	2001      	movs	r0, #1
  402766:	4b05      	ldr	r3, [pc, #20]	; (40277c <hif_chip_sleep+0x84>)
  402768:	4798      	blx	r3
  40276a:	4603      	mov	r3, r0
  40276c:	e7e8      	b.n	402740 <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  40276e:	2300      	movs	r3, #0
}
  402770:	4618      	mov	r0, r3
  402772:	4770      	bx	lr
  402774:	2040c341 	.word	0x2040c341
  402778:	2040c340 	.word	0x2040c340
  40277c:	00403955 	.word	0x00403955
  402780:	00403949 	.word	0x00403949

00402784 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  402784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402788:	b087      	sub	sp, #28
  40278a:	4607      	mov	r7, r0
  40278c:	4688      	mov	r8, r1
  40278e:	4692      	mov	sl, r2
  402790:	4699      	mov	r9, r3
  402792:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402794:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  402798:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  40279c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  4027a0:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  4027a4:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  4027a8:	2308      	movs	r3, #8
  4027aa:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  4027ae:	2c00      	cmp	r4, #0
  4027b0:	f000 809f 	beq.w	4028f2 <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4027b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4027b8:	fa16 f383 	uxtah	r3, r6, r3
  4027bc:	442b      	add	r3, r5
  4027be:	b29b      	uxth	r3, r3
  4027c0:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  4027c4:	4b5c      	ldr	r3, [pc, #368]	; (402938 <hif_send+0x1b4>)
  4027c6:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4027c8:	4683      	mov	fp, r0
  4027ca:	2800      	cmp	r0, #0
  4027cc:	f040 80a2 	bne.w	402914 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  4027d0:	2300      	movs	r3, #0
  4027d2:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4027d4:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4027d8:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4027da:	9b02      	ldr	r3, [sp, #8]
  4027dc:	431f      	orrs	r7, r3
  4027de:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4027e0:	9b02      	ldr	r3, [sp, #8]
  4027e2:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  4027e6:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4027e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4027ec:	9b02      	ldr	r3, [sp, #8]
  4027ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4027f2:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4027f4:	9902      	ldr	r1, [sp, #8]
  4027f6:	f241 008c 	movw	r0, #4236	; 0x108c
  4027fa:	4b50      	ldr	r3, [pc, #320]	; (40293c <hif_send+0x1b8>)
  4027fc:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4027fe:	4683      	mov	fp, r0
  402800:	2800      	cmp	r0, #0
  402802:	f040 8091 	bne.w	402928 <hif_send+0x1a4>


		reg = 0;
  402806:	2300      	movs	r3, #0
  402808:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  40280a:	9b02      	ldr	r3, [sp, #8]
  40280c:	f043 0302 	orr.w	r3, r3, #2
  402810:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  402812:	9902      	ldr	r1, [sp, #8]
  402814:	f241 0078 	movw	r0, #4216	; 0x1078
  402818:	4b48      	ldr	r3, [pc, #288]	; (40293c <hif_send+0x1b8>)
  40281a:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40281c:	4683      	mov	fp, r0
  40281e:	2800      	cmp	r0, #0
  402820:	f040 8082 	bne.w	402928 <hif_send+0x1a4>
		dma_addr = 0;
  402824:	2300      	movs	r3, #0
  402826:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402828:	f8ad 3006 	strh.w	r3, [sp, #6]
  40282c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402830:	b29b      	uxth	r3, r3
  402832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402836:	d216      	bcs.n	402866 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402838:	f241 0878 	movw	r8, #4216	; 0x1078
  40283c:	4f40      	ldr	r7, [pc, #256]	; (402940 <hif_send+0x1bc>)
  40283e:	a902      	add	r1, sp, #8
  402840:	4640      	mov	r0, r8
  402842:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  402844:	b978      	cbnz	r0, 402866 <hif_send+0xe2>
			if (!(reg & 0x2))
  402846:	9b02      	ldr	r3, [sp, #8]
  402848:	f013 0f02 	tst.w	r3, #2
  40284c:	d059      	beq.n	402902 <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  40284e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  402852:	3301      	adds	r3, #1
  402854:	b29b      	uxth	r3, r3
  402856:	f8ad 3006 	strh.w	r3, [sp, #6]
  40285a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40285e:	b29b      	uxth	r3, r3
  402860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402864:	d3eb      	bcc.n	40283e <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  402866:	9b03      	ldr	r3, [sp, #12]
  402868:	2b00      	cmp	r3, #0
  40286a:	d061      	beq.n	402930 <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  40286c:	9b03      	ldr	r3, [sp, #12]
  40286e:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  402870:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402874:	b29b      	uxth	r3, r3
  402876:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  40287a:	9804      	ldr	r0, [sp, #16]
  40287c:	2208      	movs	r2, #8
  40287e:	a905      	add	r1, sp, #20
  402880:	4b30      	ldr	r3, [pc, #192]	; (402944 <hif_send+0x1c0>)
  402882:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  402884:	4683      	mov	fp, r0
  402886:	2800      	cmp	r0, #0
  402888:	d14e      	bne.n	402928 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  40288a:	9b04      	ldr	r3, [sp, #16]
  40288c:	3308      	adds	r3, #8
  40288e:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  402890:	f1ba 0f00 	cmp.w	sl, #0
  402894:	d00a      	beq.n	4028ac <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  402896:	9804      	ldr	r0, [sp, #16]
  402898:	464a      	mov	r2, r9
  40289a:	4651      	mov	r1, sl
  40289c:	4b29      	ldr	r3, [pc, #164]	; (402944 <hif_send+0x1c0>)
  40289e:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4028a0:	4683      	mov	fp, r0
  4028a2:	2800      	cmp	r0, #0
  4028a4:	d140      	bne.n	402928 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  4028a6:	9b04      	ldr	r3, [sp, #16]
  4028a8:	444b      	add	r3, r9
  4028aa:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  4028ac:	b17c      	cbz	r4, 4028ce <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  4028ae:	9b04      	ldr	r3, [sp, #16]
  4028b0:	eba5 0509 	sub.w	r5, r5, r9
  4028b4:	441d      	add	r5, r3
  4028b6:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4028b8:	9804      	ldr	r0, [sp, #16]
  4028ba:	4632      	mov	r2, r6
  4028bc:	4621      	mov	r1, r4
  4028be:	4b21      	ldr	r3, [pc, #132]	; (402944 <hif_send+0x1c0>)
  4028c0:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4028c2:	4683      	mov	fp, r0
  4028c4:	2800      	cmp	r0, #0
  4028c6:	d12f      	bne.n	402928 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4028c8:	9b04      	ldr	r3, [sp, #16]
  4028ca:	441e      	add	r6, r3
  4028cc:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4028ce:	9b03      	ldr	r3, [sp, #12]
  4028d0:	009b      	lsls	r3, r3, #2
  4028d2:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4028d4:	9b02      	ldr	r3, [sp, #8]
  4028d6:	f043 0302 	orr.w	r3, r3, #2
  4028da:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4028dc:	9902      	ldr	r1, [sp, #8]
  4028de:	f241 006c 	movw	r0, #4204	; 0x106c
  4028e2:	4b16      	ldr	r3, [pc, #88]	; (40293c <hif_send+0x1b8>)
  4028e4:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4028e6:	4683      	mov	fp, r0
  4028e8:	b9f0      	cbnz	r0, 402928 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  4028ea:	4b17      	ldr	r3, [pc, #92]	; (402948 <hif_send+0x1c4>)
  4028ec:	4798      	blx	r3
  4028ee:	4683      	mov	fp, r0
  4028f0:	e01a      	b.n	402928 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  4028f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4028f6:	fa19 f383 	uxtah	r3, r9, r3
  4028fa:	b29b      	uxth	r3, r3
  4028fc:	f8ad 3016 	strh.w	r3, [sp, #22]
  402900:	e760      	b.n	4027c4 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  402902:	a903      	add	r1, sp, #12
  402904:	4811      	ldr	r0, [pc, #68]	; (40294c <hif_send+0x1c8>)
  402906:	4b0e      	ldr	r3, [pc, #56]	; (402940 <hif_send+0x1bc>)
  402908:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40290a:	2800      	cmp	r0, #0
  40290c:	d0ab      	beq.n	402866 <hif_send+0xe2>
					dma_addr = 0;
  40290e:	2300      	movs	r3, #0
  402910:	9303      	str	r3, [sp, #12]
  402912:	e7a8      	b.n	402866 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402914:	f240 129f 	movw	r2, #415	; 0x19f
  402918:	490d      	ldr	r1, [pc, #52]	; (402950 <hif_send+0x1cc>)
  40291a:	480e      	ldr	r0, [pc, #56]	; (402954 <hif_send+0x1d0>)
  40291c:	4c0e      	ldr	r4, [pc, #56]	; (402958 <hif_send+0x1d4>)
  40291e:	47a0      	blx	r4
  402920:	480e      	ldr	r0, [pc, #56]	; (40295c <hif_send+0x1d8>)
  402922:	47a0      	blx	r4
  402924:	480e      	ldr	r0, [pc, #56]	; (402960 <hif_send+0x1dc>)
  402926:	47a0      	blx	r4

ERR1:
	return ret;
}
  402928:	4658      	mov	r0, fp
  40292a:	b007      	add	sp, #28
  40292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  402930:	f06f 0b02 	mvn.w	fp, #2
  402934:	e7f8      	b.n	402928 <hif_send+0x1a4>
  402936:	bf00      	nop
  402938:	0040269d 	.word	0x0040269d
  40293c:	00403955 	.word	0x00403955
  402940:	00403949 	.word	0x00403949
  402944:	004039bd 	.word	0x004039bd
  402948:	004026f9 	.word	0x004026f9
  40294c:	00150400 	.word	0x00150400
  402950:	0040cf54 	.word	0x0040cf54
  402954:	0040cf24 	.word	0x0040cf24
  402958:	00406239 	.word	0x00406239
  40295c:	0040d1a8 	.word	0x0040d1a8
  402960:	0040cf50 	.word	0x0040cf50

00402964 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  402964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402968:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  40296a:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 402c64 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  40296e:	4fa2      	ldr	r7, [pc, #648]	; (402bf8 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402970:	4ea2      	ldr	r6, [pc, #648]	; (402bfc <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402972:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402c68 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  402976:	e0d5      	b.n	402b24 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  402978:	2204      	movs	r2, #4
  40297a:	a904      	add	r1, sp, #16
  40297c:	9805      	ldr	r0, [sp, #20]
  40297e:	4ba0      	ldr	r3, [pc, #640]	; (402c00 <hif_handle_isr+0x29c>)
  402980:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  402982:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402986:	b29b      	uxth	r3, r3
  402988:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  40298c:	4604      	mov	r4, r0
  40298e:	2800      	cmp	r0, #0
  402990:	d130      	bne.n	4029f4 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  402992:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402996:	b29b      	uxth	r3, r3
  402998:	429d      	cmp	r5, r3
  40299a:	d005      	beq.n	4029a8 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  40299c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4029a0:	b29b      	uxth	r3, r3
  4029a2:	1aeb      	subs	r3, r5, r3
  4029a4:	2b04      	cmp	r3, #4
  4029a6:	dc33      	bgt.n	402a10 <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  4029a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029ac:	b2db      	uxtb	r3, r3
  4029ae:	2b01      	cmp	r3, #1
  4029b0:	d047      	beq.n	402a42 <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  4029b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029b6:	b2db      	uxtb	r3, r3
  4029b8:	2b02      	cmp	r3, #2
  4029ba:	d05f      	beq.n	402a7c <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4029bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029c0:	b2db      	uxtb	r3, r3
  4029c2:	2b04      	cmp	r3, #4
  4029c4:	d068      	beq.n	402a98 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4029c6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029ca:	b2db      	uxtb	r3, r3
  4029cc:	2b06      	cmp	r3, #6
  4029ce:	d071      	beq.n	402ab4 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4029d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4029d4:	b2db      	uxtb	r3, r3
  4029d6:	2b07      	cmp	r3, #7
  4029d8:	d07a      	beq.n	402ad0 <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  4029da:	f240 2202 	movw	r2, #514	; 0x202
  4029de:	4641      	mov	r1, r8
  4029e0:	4630      	mov	r0, r6
  4029e2:	4c88      	ldr	r4, [pc, #544]	; (402c04 <hif_handle_isr+0x2a0>)
  4029e4:	47a0      	blx	r4
  4029e6:	4888      	ldr	r0, [pc, #544]	; (402c08 <hif_handle_isr+0x2a4>)
  4029e8:	47a0      	blx	r4
  4029ea:	4888      	ldr	r0, [pc, #544]	; (402c0c <hif_handle_isr+0x2a8>)
  4029ec:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  4029ee:	f06f 0405 	mvn.w	r4, #5
  4029f2:	e096      	b.n	402b22 <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  4029f4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4029f8:	4641      	mov	r1, r8
  4029fa:	4630      	mov	r0, r6
  4029fc:	4d81      	ldr	r5, [pc, #516]	; (402c04 <hif_handle_isr+0x2a0>)
  4029fe:	47a8      	blx	r5
  402a00:	4883      	ldr	r0, [pc, #524]	; (402c10 <hif_handle_isr+0x2ac>)
  402a02:	47a8      	blx	r5
  402a04:	4881      	ldr	r0, [pc, #516]	; (402c0c <hif_handle_isr+0x2a8>)
  402a06:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402a08:	2001      	movs	r0, #1
  402a0a:	4b82      	ldr	r3, [pc, #520]	; (402c14 <hif_handle_isr+0x2b0>)
  402a0c:	4798      	blx	r3
  402a0e:	e088      	b.n	402b22 <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  402a10:	f240 12df 	movw	r2, #479	; 0x1df
  402a14:	4641      	mov	r1, r8
  402a16:	4630      	mov	r0, r6
  402a18:	4c7a      	ldr	r4, [pc, #488]	; (402c04 <hif_handle_isr+0x2a0>)
  402a1a:	47a0      	blx	r4
  402a1c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  402a20:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402a24:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402a28:	9100      	str	r1, [sp, #0]
  402a2a:	b292      	uxth	r2, r2
  402a2c:	4629      	mov	r1, r5
  402a2e:	487a      	ldr	r0, [pc, #488]	; (402c18 <hif_handle_isr+0x2b4>)
  402a30:	47a0      	blx	r4
  402a32:	4876      	ldr	r0, [pc, #472]	; (402c0c <hif_handle_isr+0x2a8>)
  402a34:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402a36:	2001      	movs	r0, #1
  402a38:	4b76      	ldr	r3, [pc, #472]	; (402c14 <hif_handle_isr+0x2b0>)
  402a3a:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402a3c:	f06f 0405 	mvn.w	r4, #5
  402a40:	e06f      	b.n	402b22 <hif_handle_isr+0x1be>
						if(pfWifiCb)
  402a42:	4b76      	ldr	r3, [pc, #472]	; (402c1c <hif_handle_isr+0x2b8>)
  402a44:	681b      	ldr	r3, [r3, #0]
  402a46:	b143      	cbz	r3, 402a5a <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a48:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a4c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a50:	3908      	subs	r1, #8
  402a52:	9a05      	ldr	r2, [sp, #20]
  402a54:	3208      	adds	r2, #8
  402a56:	b289      	uxth	r1, r1
  402a58:	4798      	blx	r3
					if(!gu8HifSizeDone)
  402a5a:	4b71      	ldr	r3, [pc, #452]	; (402c20 <hif_handle_isr+0x2bc>)
  402a5c:	781b      	ldrb	r3, [r3, #0]
  402a5e:	2b00      	cmp	r3, #0
  402a60:	d15c      	bne.n	402b1c <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  402a62:	f240 2209 	movw	r2, #521	; 0x209
  402a66:	4641      	mov	r1, r8
  402a68:	4630      	mov	r0, r6
  402a6a:	4c66      	ldr	r4, [pc, #408]	; (402c04 <hif_handle_isr+0x2a0>)
  402a6c:	47a0      	blx	r4
  402a6e:	486d      	ldr	r0, [pc, #436]	; (402c24 <hif_handle_isr+0x2c0>)
  402a70:	47a0      	blx	r4
  402a72:	4866      	ldr	r0, [pc, #408]	; (402c0c <hif_handle_isr+0x2a8>)
  402a74:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402a76:	4b6c      	ldr	r3, [pc, #432]	; (402c28 <hif_handle_isr+0x2c4>)
  402a78:	4798      	blx	r3
  402a7a:	e04f      	b.n	402b1c <hif_handle_isr+0x1b8>
						if(pfIpCb)
  402a7c:	4b6b      	ldr	r3, [pc, #428]	; (402c2c <hif_handle_isr+0x2c8>)
  402a7e:	681b      	ldr	r3, [r3, #0]
  402a80:	2b00      	cmp	r3, #0
  402a82:	d0ea      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402a84:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402a88:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402a8c:	3908      	subs	r1, #8
  402a8e:	9a05      	ldr	r2, [sp, #20]
  402a90:	3208      	adds	r2, #8
  402a92:	b289      	uxth	r1, r1
  402a94:	4798      	blx	r3
  402a96:	e7e0      	b.n	402a5a <hif_handle_isr+0xf6>
						if(pfOtaCb)
  402a98:	4b65      	ldr	r3, [pc, #404]	; (402c30 <hif_handle_isr+0x2cc>)
  402a9a:	681b      	ldr	r3, [r3, #0]
  402a9c:	2b00      	cmp	r3, #0
  402a9e:	d0dc      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402aa0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402aa4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402aa8:	3908      	subs	r1, #8
  402aaa:	9a05      	ldr	r2, [sp, #20]
  402aac:	3208      	adds	r2, #8
  402aae:	b289      	uxth	r1, r1
  402ab0:	4798      	blx	r3
  402ab2:	e7d2      	b.n	402a5a <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  402ab4:	4b5f      	ldr	r3, [pc, #380]	; (402c34 <hif_handle_isr+0x2d0>)
  402ab6:	681b      	ldr	r3, [r3, #0]
  402ab8:	2b00      	cmp	r3, #0
  402aba:	d0ce      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402abc:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402ac0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402ac4:	3908      	subs	r1, #8
  402ac6:	9a05      	ldr	r2, [sp, #20]
  402ac8:	3208      	adds	r2, #8
  402aca:	b289      	uxth	r1, r1
  402acc:	4798      	blx	r3
  402ace:	e7c4      	b.n	402a5a <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  402ad0:	4b59      	ldr	r3, [pc, #356]	; (402c38 <hif_handle_isr+0x2d4>)
  402ad2:	681b      	ldr	r3, [r3, #0]
  402ad4:	2b00      	cmp	r3, #0
  402ad6:	d0c0      	beq.n	402a5a <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402ad8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402adc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402ae0:	3908      	subs	r1, #8
  402ae2:	9a05      	ldr	r2, [sp, #20]
  402ae4:	3208      	adds	r2, #8
  402ae6:	b289      	uxth	r1, r1
  402ae8:	4798      	blx	r3
  402aea:	e7b6      	b.n	402a5a <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402aec:	f240 2211 	movw	r2, #529	; 0x211
  402af0:	4641      	mov	r1, r8
  402af2:	4630      	mov	r0, r6
  402af4:	4c43      	ldr	r4, [pc, #268]	; (402c04 <hif_handle_isr+0x2a0>)
  402af6:	47a0      	blx	r4
  402af8:	4850      	ldr	r0, [pc, #320]	; (402c3c <hif_handle_isr+0x2d8>)
  402afa:	47a0      	blx	r4
  402afc:	4843      	ldr	r0, [pc, #268]	; (402c0c <hif_handle_isr+0x2a8>)
  402afe:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  402b00:	f06f 0401 	mvn.w	r4, #1
  402b04:	e02f      	b.n	402b66 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402b06:	f44f 7206 	mov.w	r2, #536	; 0x218
  402b0a:	4641      	mov	r1, r8
  402b0c:	4630      	mov	r0, r6
  402b0e:	4c3d      	ldr	r4, [pc, #244]	; (402c04 <hif_handle_isr+0x2a0>)
  402b10:	47a0      	blx	r4
  402b12:	9903      	ldr	r1, [sp, #12]
  402b14:	484a      	ldr	r0, [pc, #296]	; (402c40 <hif_handle_isr+0x2dc>)
  402b16:	47a0      	blx	r4
  402b18:	483c      	ldr	r0, [pc, #240]	; (402c0c <hif_handle_isr+0x2a8>)
  402b1a:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402b1c:	4b49      	ldr	r3, [pc, #292]	; (402c44 <hif_handle_isr+0x2e0>)
  402b1e:	4798      	blx	r3
  402b20:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  402b22:	bb04      	cbnz	r4, 402b66 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402b24:	f899 3000 	ldrb.w	r3, [r9]
  402b28:	2b00      	cmp	r3, #0
  402b2a:	f000 809f 	beq.w	402c6c <hif_handle_isr+0x308>
		gu8Interrupt--;
  402b2e:	f899 3000 	ldrb.w	r3, [r9]
  402b32:	3b01      	subs	r3, #1
  402b34:	b2db      	uxtb	r3, r3
  402b36:	f889 3000 	strb.w	r3, [r9]
  402b3a:	e01f      	b.n	402b7c <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402b3c:	f240 221e 	movw	r2, #542	; 0x21e
  402b40:	4641      	mov	r1, r8
  402b42:	4630      	mov	r0, r6
  402b44:	4d2f      	ldr	r5, [pc, #188]	; (402c04 <hif_handle_isr+0x2a0>)
  402b46:	47a8      	blx	r5
  402b48:	483f      	ldr	r0, [pc, #252]	; (402c48 <hif_handle_isr+0x2e4>)
  402b4a:	47a8      	blx	r5
  402b4c:	482f      	ldr	r0, [pc, #188]	; (402c0c <hif_handle_isr+0x2a8>)
  402b4e:	47a8      	blx	r5
  402b50:	e009      	b.n	402b66 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  402b52:	f44f 7209 	mov.w	r2, #548	; 0x224
  402b56:	4641      	mov	r1, r8
  402b58:	4630      	mov	r0, r6
  402b5a:	4d2a      	ldr	r5, [pc, #168]	; (402c04 <hif_handle_isr+0x2a0>)
  402b5c:	47a8      	blx	r5
  402b5e:	483b      	ldr	r0, [pc, #236]	; (402c4c <hif_handle_isr+0x2e8>)
  402b60:	47a8      	blx	r5
  402b62:	482a      	ldr	r0, [pc, #168]	; (402c0c <hif_handle_isr+0x2a8>)
  402b64:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402b66:	f240 2243 	movw	r2, #579	; 0x243
  402b6a:	4939      	ldr	r1, [pc, #228]	; (402c50 <hif_handle_isr+0x2ec>)
  402b6c:	4630      	mov	r0, r6
  402b6e:	4d25      	ldr	r5, [pc, #148]	; (402c04 <hif_handle_isr+0x2a0>)
  402b70:	47a8      	blx	r5
  402b72:	4621      	mov	r1, r4
  402b74:	4837      	ldr	r0, [pc, #220]	; (402c54 <hif_handle_isr+0x2f0>)
  402b76:	47a8      	blx	r5
  402b78:	4824      	ldr	r0, [pc, #144]	; (402c0c <hif_handle_isr+0x2a8>)
  402b7a:	47a8      	blx	r5
	ret = hif_chip_wake();
  402b7c:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  402b7e:	4604      	mov	r4, r0
  402b80:	2800      	cmp	r0, #0
  402b82:	d1e6      	bne.n	402b52 <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  402b84:	a903      	add	r1, sp, #12
  402b86:	f241 0070 	movw	r0, #4208	; 0x1070
  402b8a:	4b33      	ldr	r3, [pc, #204]	; (402c58 <hif_handle_isr+0x2f4>)
  402b8c:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  402b8e:	4604      	mov	r4, r0
  402b90:	2800      	cmp	r0, #0
  402b92:	d1d3      	bne.n	402b3c <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  402b94:	9b03      	ldr	r3, [sp, #12]
  402b96:	f013 0f01 	tst.w	r3, #1
  402b9a:	d0b4      	beq.n	402b06 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  402b9c:	4b1d      	ldr	r3, [pc, #116]	; (402c14 <hif_handle_isr+0x2b0>)
  402b9e:	4798      	blx	r3
				reg &= ~(1<<0);
  402ba0:	9903      	ldr	r1, [sp, #12]
  402ba2:	f021 0101 	bic.w	r1, r1, #1
  402ba6:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402ba8:	f241 0070 	movw	r0, #4208	; 0x1070
  402bac:	4b2b      	ldr	r3, [pc, #172]	; (402c5c <hif_handle_isr+0x2f8>)
  402bae:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  402bb0:	4604      	mov	r4, r0
  402bb2:	2800      	cmp	r0, #0
  402bb4:	d1d7      	bne.n	402b66 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  402bb6:	2200      	movs	r2, #0
  402bb8:	4b19      	ldr	r3, [pc, #100]	; (402c20 <hif_handle_isr+0x2bc>)
  402bba:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402bbc:	9d03      	ldr	r5, [sp, #12]
  402bbe:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  402bc2:	2d00      	cmp	r5, #0
  402bc4:	d092      	beq.n	402aec <hif_handle_isr+0x188>
					uint32 address = 0;
  402bc6:	a906      	add	r1, sp, #24
  402bc8:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402bcc:	f241 0084 	movw	r0, #4228	; 0x1084
  402bd0:	4b21      	ldr	r3, [pc, #132]	; (402c58 <hif_handle_isr+0x2f4>)
  402bd2:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402bd4:	4604      	mov	r4, r0
  402bd6:	2800      	cmp	r0, #0
  402bd8:	f43f aece 	beq.w	402978 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402bdc:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  402be0:	4641      	mov	r1, r8
  402be2:	4630      	mov	r0, r6
  402be4:	4d07      	ldr	r5, [pc, #28]	; (402c04 <hif_handle_isr+0x2a0>)
  402be6:	47a8      	blx	r5
  402be8:	481d      	ldr	r0, [pc, #116]	; (402c60 <hif_handle_isr+0x2fc>)
  402bea:	47a8      	blx	r5
  402bec:	4807      	ldr	r0, [pc, #28]	; (402c0c <hif_handle_isr+0x2a8>)
  402bee:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402bf0:	2001      	movs	r0, #1
  402bf2:	4b08      	ldr	r3, [pc, #32]	; (402c14 <hif_handle_isr+0x2b0>)
  402bf4:	4798      	blx	r3
  402bf6:	e794      	b.n	402b22 <hif_handle_isr+0x1be>
  402bf8:	0040269d 	.word	0x0040269d
  402bfc:	0040cf24 	.word	0x0040cf24
  402c00:	00403961 	.word	0x00403961
  402c04:	00406239 	.word	0x00406239
  402c08:	0040d014 	.word	0x0040d014
  402c0c:	0040cf50 	.word	0x0040cf50
  402c10:	0040cfbc 	.word	0x0040cfbc
  402c14:	004023b5 	.word	0x004023b5
  402c18:	0040cfd4 	.word	0x0040cfd4
  402c1c:	2040c358 	.word	0x2040c358
  402c20:	2040c342 	.word	0x2040c342
  402c24:	0040d02c 	.word	0x0040d02c
  402c28:	0040265d 	.word	0x0040265d
  402c2c:	2040c34c 	.word	0x2040c34c
  402c30:	2040c350 	.word	0x2040c350
  402c34:	2040c344 	.word	0x2040c344
  402c38:	2040c354 	.word	0x2040c354
  402c3c:	0040d050 	.word	0x0040d050
  402c40:	0040d064 	.word	0x0040d064
  402c44:	004026f9 	.word	0x004026f9
  402c48:	0040d080 	.word	0x0040d080
  402c4c:	0040d0a4 	.word	0x0040d0a4
  402c50:	0040cf68 	.word	0x0040cf68
  402c54:	0040d0c4 	.word	0x0040d0c4
  402c58:	00403949 	.word	0x00403949
  402c5c:	00403955 	.word	0x00403955
  402c60:	0040cf94 	.word	0x0040cf94
  402c64:	2040c343 	.word	0x2040c343
  402c68:	0040cf60 	.word	0x0040cf60
			}
		}
	}

	return ret;
}
  402c6c:	2000      	movs	r0, #0
  402c6e:	b007      	add	sp, #28
  402c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00402c74 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  402c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c78:	b083      	sub	sp, #12
  402c7a:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  402c7c:	2a00      	cmp	r2, #0
  402c7e:	bf18      	it	ne
  402c80:	2900      	cmpne	r1, #0
  402c82:	d003      	beq.n	402c8c <hif_receive+0x18>
  402c84:	4605      	mov	r5, r0
  402c86:	460f      	mov	r7, r1
  402c88:	4616      	mov	r6, r2
  402c8a:	b9b8      	cbnz	r0, 402cbc <hif_receive+0x48>
	{
		if(isDone)
  402c8c:	b14c      	cbz	r4, 402ca2 <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  402c8e:	2201      	movs	r2, #1
  402c90:	4b32      	ldr	r3, [pc, #200]	; (402d5c <hif_receive+0xe8>)
  402c92:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402c94:	4b32      	ldr	r3, [pc, #200]	; (402d60 <hif_receive+0xec>)
  402c96:	4798      	blx	r3
  402c98:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402c9a:	4618      	mov	r0, r3
  402c9c:	b003      	add	sp, #12
  402c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  402ca2:	f240 2269 	movw	r2, #617	; 0x269
  402ca6:	492f      	ldr	r1, [pc, #188]	; (402d64 <hif_receive+0xf0>)
  402ca8:	482f      	ldr	r0, [pc, #188]	; (402d68 <hif_receive+0xf4>)
  402caa:	4c30      	ldr	r4, [pc, #192]	; (402d6c <hif_receive+0xf8>)
  402cac:	47a0      	blx	r4
  402cae:	4830      	ldr	r0, [pc, #192]	; (402d70 <hif_receive+0xfc>)
  402cb0:	47a0      	blx	r4
  402cb2:	4830      	ldr	r0, [pc, #192]	; (402d74 <hif_receive+0x100>)
  402cb4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402cb6:	f06f 030b 	mvn.w	r3, #11
  402cba:	e7ee      	b.n	402c9a <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402cbc:	4669      	mov	r1, sp
  402cbe:	f241 0070 	movw	r0, #4208	; 0x1070
  402cc2:	4b2d      	ldr	r3, [pc, #180]	; (402d78 <hif_receive+0x104>)
  402cc4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402cc6:	4603      	mov	r3, r0
  402cc8:	2800      	cmp	r0, #0
  402cca:	d1e6      	bne.n	402c9a <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402ccc:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  402cd0:	a901      	add	r1, sp, #4
  402cd2:	f241 0084 	movw	r0, #4228	; 0x1084
  402cd6:	4b28      	ldr	r3, [pc, #160]	; (402d78 <hif_receive+0x104>)
  402cd8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402cda:	4603      	mov	r3, r0
  402cdc:	2800      	cmp	r0, #0
  402cde:	d1dc      	bne.n	402c9a <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402ce0:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402ce4:	4546      	cmp	r6, r8
  402ce6:	d81c      	bhi.n	402d22 <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402ce8:	9b01      	ldr	r3, [sp, #4]
  402cea:	429d      	cmp	r5, r3
  402cec:	d328      	bcc.n	402d40 <hif_receive+0xcc>
  402cee:	eb05 0906 	add.w	r9, r5, r6
  402cf2:	4443      	add	r3, r8
  402cf4:	4599      	cmp	r9, r3
  402cf6:	d823      	bhi.n	402d40 <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402cf8:	4632      	mov	r2, r6
  402cfa:	4639      	mov	r1, r7
  402cfc:	4628      	mov	r0, r5
  402cfe:	4b1f      	ldr	r3, [pc, #124]	; (402d7c <hif_receive+0x108>)
  402d00:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402d02:	4603      	mov	r3, r0
  402d04:	2800      	cmp	r0, #0
  402d06:	d1c8      	bne.n	402c9a <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402d08:	9a01      	ldr	r2, [sp, #4]
  402d0a:	4490      	add	r8, r2
  402d0c:	45c8      	cmp	r8, r9
  402d0e:	d001      	beq.n	402d14 <hif_receive+0xa0>
  402d10:	2c00      	cmp	r4, #0
  402d12:	d0c2      	beq.n	402c9a <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402d14:	2201      	movs	r2, #1
  402d16:	4b11      	ldr	r3, [pc, #68]	; (402d5c <hif_receive+0xe8>)
  402d18:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402d1a:	4b11      	ldr	r3, [pc, #68]	; (402d60 <hif_receive+0xec>)
  402d1c:	4798      	blx	r3
  402d1e:	4603      	mov	r3, r0
  402d20:	e7bb      	b.n	402c9a <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  402d22:	f240 227a 	movw	r2, #634	; 0x27a
  402d26:	490f      	ldr	r1, [pc, #60]	; (402d64 <hif_receive+0xf0>)
  402d28:	480f      	ldr	r0, [pc, #60]	; (402d68 <hif_receive+0xf4>)
  402d2a:	4c10      	ldr	r4, [pc, #64]	; (402d6c <hif_receive+0xf8>)
  402d2c:	47a0      	blx	r4
  402d2e:	4642      	mov	r2, r8
  402d30:	4631      	mov	r1, r6
  402d32:	4813      	ldr	r0, [pc, #76]	; (402d80 <hif_receive+0x10c>)
  402d34:	47a0      	blx	r4
  402d36:	480f      	ldr	r0, [pc, #60]	; (402d74 <hif_receive+0x100>)
  402d38:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402d3a:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402d3e:	e7ac      	b.n	402c9a <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  402d40:	f44f 7220 	mov.w	r2, #640	; 0x280
  402d44:	4907      	ldr	r1, [pc, #28]	; (402d64 <hif_receive+0xf0>)
  402d46:	4808      	ldr	r0, [pc, #32]	; (402d68 <hif_receive+0xf4>)
  402d48:	4c08      	ldr	r4, [pc, #32]	; (402d6c <hif_receive+0xf8>)
  402d4a:	47a0      	blx	r4
  402d4c:	480d      	ldr	r0, [pc, #52]	; (402d84 <hif_receive+0x110>)
  402d4e:	47a0      	blx	r4
  402d50:	4808      	ldr	r0, [pc, #32]	; (402d74 <hif_receive+0x100>)
  402d52:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402d54:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402d58:	e79f      	b.n	402c9a <hif_receive+0x26>
  402d5a:	bf00      	nop
  402d5c:	2040c342 	.word	0x2040c342
  402d60:	0040265d 	.word	0x0040265d
  402d64:	0040cf78 	.word	0x0040cf78
  402d68:	0040cf24 	.word	0x0040cf24
  402d6c:	00406239 	.word	0x00406239
  402d70:	0040d0f4 	.word	0x0040d0f4
  402d74:	0040cf50 	.word	0x0040cf50
  402d78:	00403949 	.word	0x00403949
  402d7c:	00403961 	.word	0x00403961
  402d80:	0040d114 	.word	0x0040d114
  402d84:	0040d158 	.word	0x0040d158

00402d88 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  402d88:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  402d8a:	1e43      	subs	r3, r0, #1
  402d8c:	2b06      	cmp	r3, #6
  402d8e:	d81d      	bhi.n	402dcc <hif_register_cb+0x44>
  402d90:	e8df f003 	tbb	[pc, r3]
  402d94:	0c100408 	.word	0x0c100408
  402d98:	141c      	.short	0x141c
  402d9a:	18          	.byte	0x18
  402d9b:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402d9c:	4b13      	ldr	r3, [pc, #76]	; (402dec <hif_register_cb+0x64>)
  402d9e:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402da0:	2000      	movs	r0, #0
			break;
  402da2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402da4:	4b12      	ldr	r3, [pc, #72]	; (402df0 <hif_register_cb+0x68>)
  402da6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402da8:	2000      	movs	r0, #0
			break;
  402daa:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402dac:	4b11      	ldr	r3, [pc, #68]	; (402df4 <hif_register_cb+0x6c>)
  402dae:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402db0:	2000      	movs	r0, #0
			break;
  402db2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402db4:	4b10      	ldr	r3, [pc, #64]	; (402df8 <hif_register_cb+0x70>)
  402db6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402db8:	2000      	movs	r0, #0
			break;
  402dba:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402dbc:	4b0f      	ldr	r3, [pc, #60]	; (402dfc <hif_register_cb+0x74>)
  402dbe:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402dc0:	2000      	movs	r0, #0
			break;
  402dc2:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402dc4:	4b0e      	ldr	r3, [pc, #56]	; (402e00 <hif_register_cb+0x78>)
  402dc6:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402dc8:	2000      	movs	r0, #0
			break;
  402dca:	bd38      	pop	{r3, r4, r5, pc}
  402dcc:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  402dce:	f240 22b9 	movw	r2, #697	; 0x2b9
  402dd2:	490c      	ldr	r1, [pc, #48]	; (402e04 <hif_register_cb+0x7c>)
  402dd4:	480c      	ldr	r0, [pc, #48]	; (402e08 <hif_register_cb+0x80>)
  402dd6:	4d0d      	ldr	r5, [pc, #52]	; (402e0c <hif_register_cb+0x84>)
  402dd8:	47a8      	blx	r5
  402dda:	4621      	mov	r1, r4
  402ddc:	480c      	ldr	r0, [pc, #48]	; (402e10 <hif_register_cb+0x88>)
  402dde:	47a8      	blx	r5
  402de0:	480c      	ldr	r0, [pc, #48]	; (402e14 <hif_register_cb+0x8c>)
  402de2:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402de4:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402de8:	bd38      	pop	{r3, r4, r5, pc}
  402dea:	bf00      	nop
  402dec:	2040c34c 	.word	0x2040c34c
  402df0:	2040c358 	.word	0x2040c358
  402df4:	2040c350 	.word	0x2040c350
  402df8:	2040c348 	.word	0x2040c348
  402dfc:	2040c344 	.word	0x2040c344
  402e00:	2040c354 	.word	0x2040c354
  402e04:	0040cf84 	.word	0x0040cf84
  402e08:	0040cf24 	.word	0x0040cf24
  402e0c:	00406239 	.word	0x00406239
  402e10:	0040d19c 	.word	0x0040d19c
  402e14:	0040cf50 	.word	0x0040cf50

00402e18 <hif_init>:
{
  402e18:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402e1a:	2400      	movs	r4, #0
  402e1c:	4b09      	ldr	r3, [pc, #36]	; (402e44 <hif_init+0x2c>)
  402e1e:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402e20:	4b09      	ldr	r3, [pc, #36]	; (402e48 <hif_init+0x30>)
  402e22:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402e24:	4b09      	ldr	r3, [pc, #36]	; (402e4c <hif_init+0x34>)
  402e26:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402e28:	4b09      	ldr	r3, [pc, #36]	; (402e50 <hif_init+0x38>)
  402e2a:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402e2c:	4b09      	ldr	r3, [pc, #36]	; (402e54 <hif_init+0x3c>)
  402e2e:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402e30:	4809      	ldr	r0, [pc, #36]	; (402e58 <hif_init+0x40>)
  402e32:	4b0a      	ldr	r3, [pc, #40]	; (402e5c <hif_init+0x44>)
  402e34:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402e36:	490a      	ldr	r1, [pc, #40]	; (402e60 <hif_init+0x48>)
  402e38:	2003      	movs	r0, #3
  402e3a:	4b0a      	ldr	r3, [pc, #40]	; (402e64 <hif_init+0x4c>)
  402e3c:	4798      	blx	r3
}
  402e3e:	4620      	mov	r0, r4
  402e40:	bd10      	pop	{r4, pc}
  402e42:	bf00      	nop
  402e44:	2040c358 	.word	0x2040c358
  402e48:	2040c34c 	.word	0x2040c34c
  402e4c:	2040c341 	.word	0x2040c341
  402e50:	2040c340 	.word	0x2040c340
  402e54:	2040c343 	.word	0x2040c343
  402e58:	00402649 	.word	0x00402649
  402e5c:	00402325 	.word	0x00402325
  402e60:	00402659 	.word	0x00402659
  402e64:	00402d89 	.word	0x00402d89

00402e68 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402e68:	b530      	push	{r4, r5, lr}
  402e6a:	b09f      	sub	sp, #124	; 0x7c
  402e6c:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402e6e:	282c      	cmp	r0, #44	; 0x2c
  402e70:	d02e      	beq.n	402ed0 <m2m_wifi_cb+0x68>
  402e72:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402e74:	281b      	cmp	r0, #27
  402e76:	d03b      	beq.n	402ef0 <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402e78:	2806      	cmp	r0, #6
  402e7a:	d049      	beq.n	402f10 <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402e7c:	280e      	cmp	r0, #14
  402e7e:	d025      	beq.n	402ecc <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402e80:	2832      	cmp	r0, #50	; 0x32
  402e82:	d055      	beq.n	402f30 <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402e84:	282f      	cmp	r0, #47	; 0x2f
  402e86:	d063      	beq.n	402f50 <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402e88:	2834      	cmp	r0, #52	; 0x34
  402e8a:	d076      	beq.n	402f7a <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402e8c:	2811      	cmp	r0, #17
  402e8e:	f000 8093 	beq.w	402fb8 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402e92:	2813      	cmp	r0, #19
  402e94:	f000 80a8 	beq.w	402fe8 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402e98:	2804      	cmp	r0, #4
  402e9a:	f000 80b7 	beq.w	40300c <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402e9e:	2865      	cmp	r0, #101	; 0x65
  402ea0:	f000 80c6 	beq.w	403030 <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402ea4:	2809      	cmp	r0, #9
  402ea6:	f000 80d5 	beq.w	403054 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402eaa:	282a      	cmp	r0, #42	; 0x2a
  402eac:	f000 80e4 	beq.w	403078 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402eb0:	2820      	cmp	r0, #32
  402eb2:	f000 80f3 	beq.w	40309c <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402eb6:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402eba:	4986      	ldr	r1, [pc, #536]	; (4030d4 <m2m_wifi_cb+0x26c>)
  402ebc:	4886      	ldr	r0, [pc, #536]	; (4030d8 <m2m_wifi_cb+0x270>)
  402ebe:	4d87      	ldr	r5, [pc, #540]	; (4030dc <m2m_wifi_cb+0x274>)
  402ec0:	47a8      	blx	r5
  402ec2:	4621      	mov	r1, r4
  402ec4:	4886      	ldr	r0, [pc, #536]	; (4030e0 <m2m_wifi_cb+0x278>)
  402ec6:	47a8      	blx	r5
  402ec8:	4886      	ldr	r0, [pc, #536]	; (4030e4 <m2m_wifi_cb+0x27c>)
  402eca:	47a8      	blx	r5
	}
}
  402ecc:	b01f      	add	sp, #124	; 0x7c
  402ece:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402ed0:	2300      	movs	r3, #0
  402ed2:	2204      	movs	r2, #4
  402ed4:	a903      	add	r1, sp, #12
  402ed6:	4628      	mov	r0, r5
  402ed8:	4c83      	ldr	r4, [pc, #524]	; (4030e8 <m2m_wifi_cb+0x280>)
  402eda:	47a0      	blx	r4
  402edc:	2800      	cmp	r0, #0
  402ede:	d1f5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402ee0:	4b82      	ldr	r3, [pc, #520]	; (4030ec <m2m_wifi_cb+0x284>)
  402ee2:	681b      	ldr	r3, [r3, #0]
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	d0f1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402ee8:	a903      	add	r1, sp, #12
  402eea:	202c      	movs	r0, #44	; 0x2c
  402eec:	4798      	blx	r3
  402eee:	e7ed      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402ef0:	2300      	movs	r3, #0
  402ef2:	2208      	movs	r2, #8
  402ef4:	a903      	add	r1, sp, #12
  402ef6:	4628      	mov	r0, r5
  402ef8:	4c7b      	ldr	r4, [pc, #492]	; (4030e8 <m2m_wifi_cb+0x280>)
  402efa:	47a0      	blx	r4
  402efc:	2800      	cmp	r0, #0
  402efe:	d1e5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f00:	4b7a      	ldr	r3, [pc, #488]	; (4030ec <m2m_wifi_cb+0x284>)
  402f02:	681b      	ldr	r3, [r3, #0]
  402f04:	2b00      	cmp	r3, #0
  402f06:	d0e1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402f08:	a903      	add	r1, sp, #12
  402f0a:	201b      	movs	r0, #27
  402f0c:	4798      	blx	r3
  402f0e:	e7dd      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402f10:	2301      	movs	r3, #1
  402f12:	2230      	movs	r2, #48	; 0x30
  402f14:	a903      	add	r1, sp, #12
  402f16:	4628      	mov	r0, r5
  402f18:	4c73      	ldr	r4, [pc, #460]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f1a:	47a0      	blx	r4
  402f1c:	2800      	cmp	r0, #0
  402f1e:	d1d5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402f20:	4b72      	ldr	r3, [pc, #456]	; (4030ec <m2m_wifi_cb+0x284>)
  402f22:	681b      	ldr	r3, [r3, #0]
  402f24:	2b00      	cmp	r3, #0
  402f26:	d0d1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402f28:	a903      	add	r1, sp, #12
  402f2a:	2006      	movs	r0, #6
  402f2c:	4798      	blx	r3
  402f2e:	e7cd      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402f30:	2300      	movs	r3, #0
  402f32:	2210      	movs	r2, #16
  402f34:	a903      	add	r1, sp, #12
  402f36:	4628      	mov	r0, r5
  402f38:	4c6b      	ldr	r4, [pc, #428]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f3a:	47a0      	blx	r4
  402f3c:	2800      	cmp	r0, #0
  402f3e:	d1c5      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f40:	4b6a      	ldr	r3, [pc, #424]	; (4030ec <m2m_wifi_cb+0x284>)
  402f42:	681b      	ldr	r3, [r3, #0]
  402f44:	2b00      	cmp	r3, #0
  402f46:	d0c1      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402f48:	a903      	add	r1, sp, #12
  402f4a:	2032      	movs	r0, #50	; 0x32
  402f4c:	4798      	blx	r3
  402f4e:	e7bd      	b.n	402ecc <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402f50:	2264      	movs	r2, #100	; 0x64
  402f52:	2100      	movs	r1, #0
  402f54:	a803      	add	r0, sp, #12
  402f56:	4b66      	ldr	r3, [pc, #408]	; (4030f0 <m2m_wifi_cb+0x288>)
  402f58:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402f5a:	2300      	movs	r3, #0
  402f5c:	2264      	movs	r2, #100	; 0x64
  402f5e:	a903      	add	r1, sp, #12
  402f60:	4628      	mov	r0, r5
  402f62:	4c61      	ldr	r4, [pc, #388]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f64:	47a0      	blx	r4
  402f66:	2800      	cmp	r0, #0
  402f68:	d1b0      	bne.n	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402f6a:	4b60      	ldr	r3, [pc, #384]	; (4030ec <m2m_wifi_cb+0x284>)
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	2b00      	cmp	r3, #0
  402f70:	d0ac      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402f72:	a903      	add	r1, sp, #12
  402f74:	202f      	movs	r0, #47	; 0x2f
  402f76:	4798      	blx	r3
  402f78:	e7a8      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402f7a:	2300      	movs	r3, #0
  402f7c:	2204      	movs	r2, #4
  402f7e:	a903      	add	r1, sp, #12
  402f80:	4628      	mov	r0, r5
  402f82:	4c59      	ldr	r4, [pc, #356]	; (4030e8 <m2m_wifi_cb+0x280>)
  402f84:	47a0      	blx	r4
  402f86:	2800      	cmp	r0, #0
  402f88:	d1a0      	bne.n	402ecc <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402f8a:	485a      	ldr	r0, [pc, #360]	; (4030f4 <m2m_wifi_cb+0x28c>)
  402f8c:	4c53      	ldr	r4, [pc, #332]	; (4030dc <m2m_wifi_cb+0x274>)
  402f8e:	47a0      	blx	r4
  402f90:	9903      	ldr	r1, [sp, #12]
  402f92:	b2cb      	uxtb	r3, r1
  402f94:	9300      	str	r3, [sp, #0]
  402f96:	f3c1 2307 	ubfx	r3, r1, #8, #8
  402f9a:	f3c1 4207 	ubfx	r2, r1, #16, #8
  402f9e:	0e09      	lsrs	r1, r1, #24
  402fa0:	4855      	ldr	r0, [pc, #340]	; (4030f8 <m2m_wifi_cb+0x290>)
  402fa2:	47a0      	blx	r4
  402fa4:	484f      	ldr	r0, [pc, #316]	; (4030e4 <m2m_wifi_cb+0x27c>)
  402fa6:	47a0      	blx	r4
			if (gpfAppWifiCb)
  402fa8:	4b50      	ldr	r3, [pc, #320]	; (4030ec <m2m_wifi_cb+0x284>)
  402faa:	681b      	ldr	r3, [r3, #0]
  402fac:	2b00      	cmp	r3, #0
  402fae:	d08d      	beq.n	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402fb0:	2100      	movs	r1, #0
  402fb2:	2034      	movs	r0, #52	; 0x34
  402fb4:	4798      	blx	r3
  402fb6:	e789      	b.n	402ecc <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  402fb8:	2300      	movs	r3, #0
  402fba:	4a50      	ldr	r2, [pc, #320]	; (4030fc <m2m_wifi_cb+0x294>)
  402fbc:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402fbe:	2204      	movs	r2, #4
  402fc0:	a903      	add	r1, sp, #12
  402fc2:	4628      	mov	r0, r5
  402fc4:	4c48      	ldr	r4, [pc, #288]	; (4030e8 <m2m_wifi_cb+0x280>)
  402fc6:	47a0      	blx	r4
  402fc8:	2800      	cmp	r0, #0
  402fca:	f47f af7f 	bne.w	402ecc <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402fce:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402fd2:	4b4b      	ldr	r3, [pc, #300]	; (403100 <m2m_wifi_cb+0x298>)
  402fd4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402fd6:	4b45      	ldr	r3, [pc, #276]	; (4030ec <m2m_wifi_cb+0x284>)
  402fd8:	681b      	ldr	r3, [r3, #0]
  402fda:	2b00      	cmp	r3, #0
  402fdc:	f43f af76 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402fe0:	a903      	add	r1, sp, #12
  402fe2:	2011      	movs	r0, #17
  402fe4:	4798      	blx	r3
  402fe6:	e771      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402fe8:	2300      	movs	r3, #0
  402fea:	222c      	movs	r2, #44	; 0x2c
  402fec:	a903      	add	r1, sp, #12
  402fee:	4628      	mov	r0, r5
  402ff0:	4c3d      	ldr	r4, [pc, #244]	; (4030e8 <m2m_wifi_cb+0x280>)
  402ff2:	47a0      	blx	r4
  402ff4:	2800      	cmp	r0, #0
  402ff6:	f47f af69 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402ffa:	4b3c      	ldr	r3, [pc, #240]	; (4030ec <m2m_wifi_cb+0x284>)
  402ffc:	681b      	ldr	r3, [r3, #0]
  402ffe:	2b00      	cmp	r3, #0
  403000:	f43f af64 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  403004:	a903      	add	r1, sp, #12
  403006:	2013      	movs	r0, #19
  403008:	4798      	blx	r3
  40300a:	e75f      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  40300c:	2300      	movs	r3, #0
  40300e:	2204      	movs	r2, #4
  403010:	a91c      	add	r1, sp, #112	; 0x70
  403012:	4628      	mov	r0, r5
  403014:	4c34      	ldr	r4, [pc, #208]	; (4030e8 <m2m_wifi_cb+0x280>)
  403016:	47a0      	blx	r4
  403018:	2800      	cmp	r0, #0
  40301a:	f47f af57 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  40301e:	4b33      	ldr	r3, [pc, #204]	; (4030ec <m2m_wifi_cb+0x284>)
  403020:	681b      	ldr	r3, [r3, #0]
  403022:	2b00      	cmp	r3, #0
  403024:	f43f af52 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  403028:	a91c      	add	r1, sp, #112	; 0x70
  40302a:	2004      	movs	r0, #4
  40302c:	4798      	blx	r3
  40302e:	e74d      	b.n	402ecc <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  403030:	2300      	movs	r3, #0
  403032:	2204      	movs	r2, #4
  403034:	a91c      	add	r1, sp, #112	; 0x70
  403036:	4628      	mov	r0, r5
  403038:	4c2b      	ldr	r4, [pc, #172]	; (4030e8 <m2m_wifi_cb+0x280>)
  40303a:	47a0      	blx	r4
  40303c:	2800      	cmp	r0, #0
  40303e:	f47f af45 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  403042:	4b2a      	ldr	r3, [pc, #168]	; (4030ec <m2m_wifi_cb+0x284>)
  403044:	681b      	ldr	r3, [r3, #0]
  403046:	2b00      	cmp	r3, #0
  403048:	f43f af40 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  40304c:	a91c      	add	r1, sp, #112	; 0x70
  40304e:	2065      	movs	r0, #101	; 0x65
  403050:	4798      	blx	r3
  403052:	e73b      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  403054:	2301      	movs	r3, #1
  403056:	2264      	movs	r2, #100	; 0x64
  403058:	a903      	add	r1, sp, #12
  40305a:	4628      	mov	r0, r5
  40305c:	4c22      	ldr	r4, [pc, #136]	; (4030e8 <m2m_wifi_cb+0x280>)
  40305e:	47a0      	blx	r4
  403060:	2800      	cmp	r0, #0
  403062:	f47f af33 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  403066:	4b21      	ldr	r3, [pc, #132]	; (4030ec <m2m_wifi_cb+0x284>)
  403068:	681b      	ldr	r3, [r3, #0]
  40306a:	2b00      	cmp	r3, #0
  40306c:	f43f af2e 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  403070:	a903      	add	r1, sp, #12
  403072:	2009      	movs	r0, #9
  403074:	4798      	blx	r3
  403076:	e729      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  403078:	2301      	movs	r3, #1
  40307a:	2204      	movs	r2, #4
  40307c:	a903      	add	r1, sp, #12
  40307e:	4628      	mov	r0, r5
  403080:	4c19      	ldr	r4, [pc, #100]	; (4030e8 <m2m_wifi_cb+0x280>)
  403082:	47a0      	blx	r4
  403084:	2800      	cmp	r0, #0
  403086:	f47f af21 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  40308a:	4b18      	ldr	r3, [pc, #96]	; (4030ec <m2m_wifi_cb+0x284>)
  40308c:	681b      	ldr	r3, [r3, #0]
  40308e:	2b00      	cmp	r3, #0
  403090:	f43f af1c 	beq.w	402ecc <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  403094:	a903      	add	r1, sp, #12
  403096:	202a      	movs	r0, #42	; 0x2a
  403098:	4798      	blx	r3
  40309a:	e717      	b.n	402ecc <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  40309c:	2300      	movs	r3, #0
  40309e:	2208      	movs	r2, #8
  4030a0:	a903      	add	r1, sp, #12
  4030a2:	4628      	mov	r0, r5
  4030a4:	4c10      	ldr	r4, [pc, #64]	; (4030e8 <m2m_wifi_cb+0x280>)
  4030a6:	47a0      	blx	r4
  4030a8:	2800      	cmp	r0, #0
  4030aa:	f47f af0f 	bne.w	402ecc <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  4030ae:	2301      	movs	r3, #1
  4030b0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  4030b4:	9903      	ldr	r1, [sp, #12]
  4030b6:	f105 0008 	add.w	r0, r5, #8
  4030ba:	47a0      	blx	r4
  4030bc:	2800      	cmp	r0, #0
  4030be:	f47f af05 	bne.w	402ecc <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  4030c2:	4b0a      	ldr	r3, [pc, #40]	; (4030ec <m2m_wifi_cb+0x284>)
  4030c4:	681b      	ldr	r3, [r3, #0]
  4030c6:	2b00      	cmp	r3, #0
  4030c8:	f43f af00 	beq.w	402ecc <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  4030cc:	a903      	add	r1, sp, #12
  4030ce:	2020      	movs	r0, #32
  4030d0:	4798      	blx	r3
  4030d2:	e6fb      	b.n	402ecc <m2m_wifi_cb+0x64>
  4030d4:	0040d1c8 	.word	0x0040d1c8
  4030d8:	0040cf24 	.word	0x0040cf24
  4030dc:	00406239 	.word	0x00406239
  4030e0:	0040d224 	.word	0x0040d224
  4030e4:	0040cf50 	.word	0x0040cf50
  4030e8:	00402c75 	.word	0x00402c75
  4030ec:	2040c35c 	.word	0x2040c35c
  4030f0:	00402621 	.word	0x00402621
  4030f4:	0040d1f8 	.word	0x0040d1f8
  4030f8:	0040d204 	.word	0x0040d204
  4030fc:	2040c361 	.word	0x2040c361
  403100:	2040c360 	.word	0x2040c360

00403104 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  403104:	b5f0      	push	{r4, r5, r6, r7, lr}
  403106:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  403108:	2301      	movs	r3, #1
  40310a:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  40310e:	2800      	cmp	r0, #0
  403110:	d050      	beq.n	4031b4 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  403112:	6802      	ldr	r2, [r0, #0]
  403114:	4b29      	ldr	r3, [pc, #164]	; (4031bc <m2m_wifi_init+0xb8>)
  403116:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  403118:	2200      	movs	r2, #0
  40311a:	4b29      	ldr	r3, [pc, #164]	; (4031c0 <m2m_wifi_init+0xbc>)
  40311c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  40311e:	f10d 0007 	add.w	r0, sp, #7
  403122:	4b28      	ldr	r3, [pc, #160]	; (4031c4 <m2m_wifi_init+0xc0>)
  403124:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  403126:	4604      	mov	r4, r0
  403128:	b110      	cbz	r0, 403130 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  40312a:	4620      	mov	r0, r4
  40312c:	b00b      	add	sp, #44	; 0x2c
  40312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  403130:	4b25      	ldr	r3, [pc, #148]	; (4031c8 <m2m_wifi_init+0xc4>)
  403132:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  403134:	4604      	mov	r4, r0
  403136:	2800      	cmp	r0, #0
  403138:	d138      	bne.n	4031ac <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  40313a:	4924      	ldr	r1, [pc, #144]	; (4031cc <m2m_wifi_init+0xc8>)
  40313c:	2001      	movs	r0, #1
  40313e:	4b24      	ldr	r3, [pc, #144]	; (4031d0 <m2m_wifi_init+0xcc>)
  403140:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  403142:	a802      	add	r0, sp, #8
  403144:	4b23      	ldr	r3, [pc, #140]	; (4031d4 <m2m_wifi_init+0xd0>)
  403146:	4798      	blx	r3
  403148:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  40314a:	4f23      	ldr	r7, [pc, #140]	; (4031d8 <m2m_wifi_init+0xd4>)
  40314c:	4638      	mov	r0, r7
  40314e:	4d23      	ldr	r5, [pc, #140]	; (4031dc <m2m_wifi_init+0xd8>)
  403150:	47a8      	blx	r5
  403152:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403156:	f89d 200d 	ldrb.w	r2, [sp, #13]
  40315a:	f89d 100c 	ldrb.w	r1, [sp, #12]
  40315e:	4820      	ldr	r0, [pc, #128]	; (4031e0 <m2m_wifi_init+0xdc>)
  403160:	47a8      	blx	r5
  403162:	4e20      	ldr	r6, [pc, #128]	; (4031e4 <m2m_wifi_init+0xe0>)
  403164:	4630      	mov	r0, r6
  403166:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  403168:	4638      	mov	r0, r7
  40316a:	47a8      	blx	r5
  40316c:	f89d 3011 	ldrb.w	r3, [sp, #17]
  403170:	f89d 2010 	ldrb.w	r2, [sp, #16]
  403174:	f89d 100f 	ldrb.w	r1, [sp, #15]
  403178:	481b      	ldr	r0, [pc, #108]	; (4031e8 <m2m_wifi_init+0xe4>)
  40317a:	47a8      	blx	r5
  40317c:	4630      	mov	r0, r6
  40317e:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  403180:	4638      	mov	r0, r7
  403182:	47a8      	blx	r5
  403184:	2300      	movs	r3, #0
  403186:	2203      	movs	r2, #3
  403188:	2113      	movs	r1, #19
  40318a:	4818      	ldr	r0, [pc, #96]	; (4031ec <m2m_wifi_init+0xe8>)
  40318c:	47a8      	blx	r5
  40318e:	4630      	mov	r0, r6
  403190:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  403192:	f114 0f0d 	cmn.w	r4, #13
  403196:	d1c8      	bne.n	40312a <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  403198:	f240 12d5 	movw	r2, #469	; 0x1d5
  40319c:	4914      	ldr	r1, [pc, #80]	; (4031f0 <m2m_wifi_init+0xec>)
  40319e:	4815      	ldr	r0, [pc, #84]	; (4031f4 <m2m_wifi_init+0xf0>)
  4031a0:	47a8      	blx	r5
  4031a2:	4815      	ldr	r0, [pc, #84]	; (4031f8 <m2m_wifi_init+0xf4>)
  4031a4:	47a8      	blx	r5
  4031a6:	4630      	mov	r0, r6
  4031a8:	47a8      	blx	r5
  4031aa:	e7be      	b.n	40312a <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  4031ac:	2000      	movs	r0, #0
  4031ae:	4b13      	ldr	r3, [pc, #76]	; (4031fc <m2m_wifi_init+0xf8>)
  4031b0:	4798      	blx	r3
  4031b2:	e7ba      	b.n	40312a <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  4031b4:	f06f 040b 	mvn.w	r4, #11
  4031b8:	e7b7      	b.n	40312a <m2m_wifi_init+0x26>
  4031ba:	bf00      	nop
  4031bc:	2040c35c 	.word	0x2040c35c
  4031c0:	2040c361 	.word	0x2040c361
  4031c4:	00403ac9 	.word	0x00403ac9
  4031c8:	00402e19 	.word	0x00402e19
  4031cc:	00402e69 	.word	0x00402e69
  4031d0:	00402d89 	.word	0x00402d89
  4031d4:	00403a19 	.word	0x00403a19
  4031d8:	0040d1f8 	.word	0x0040d1f8
  4031dc:	00406239 	.word	0x00406239
  4031e0:	0040d2e4 	.word	0x0040d2e4
  4031e4:	0040cf50 	.word	0x0040cf50
  4031e8:	0040d300 	.word	0x0040d300
  4031ec:	0040d31c 	.word	0x0040d31c
  4031f0:	0040d1d4 	.word	0x0040d1d4
  4031f4:	0040cf24 	.word	0x0040cf24
  4031f8:	0040d338 	.word	0x0040d338
  4031fc:	00403b95 	.word	0x00403b95

00403200 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  403200:	b508      	push	{r3, lr}
	return hif_handle_isr();
  403202:	4b01      	ldr	r3, [pc, #4]	; (403208 <m2m_wifi_handle_events+0x8>)
  403204:	4798      	blx	r3
}
  403206:	bd08      	pop	{r3, pc}
  403208:	00402965 	.word	0x00402965

0040320c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  40320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403210:	b0a0      	sub	sp, #128	; 0x80
  403212:	4680      	mov	r8, r0
  403214:	460d      	mov	r5, r1
  403216:	4614      	mov	r4, r2
  403218:	461e      	mov	r6, r3
  40321a:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  40321e:	2a01      	cmp	r2, #1
  403220:	d003      	beq.n	40322a <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  403222:	2b00      	cmp	r3, #0
  403224:	d037      	beq.n	403296 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  403226:	2a02      	cmp	r2, #2
  403228:	d042      	beq.n	4032b0 <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  40322a:	1e6b      	subs	r3, r5, #1
  40322c:	b2db      	uxtb	r3, r3
  40322e:	2b1f      	cmp	r3, #31
  403230:	d875      	bhi.n	40331e <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  403232:	2fff      	cmp	r7, #255	; 0xff
  403234:	d001      	beq.n	40323a <m2m_wifi_connect_sc+0x2e>
  403236:	2f0d      	cmp	r7, #13
  403238:	d87e      	bhi.n	403338 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  40323a:	462a      	mov	r2, r5
  40323c:	4641      	mov	r1, r8
  40323e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  403242:	4b77      	ldr	r3, [pc, #476]	; (403420 <m2m_wifi_connect_sc+0x214>)
  403244:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  403246:	ab20      	add	r3, sp, #128	; 0x80
  403248:	441d      	add	r5, r3
  40324a:	2300      	movs	r3, #0
  40324c:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  403250:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  403254:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  403258:	3300      	adds	r3, #0
  40325a:	bf18      	it	ne
  40325c:	2301      	movne	r3, #1
  40325e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  403262:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  403266:	2c03      	cmp	r4, #3
  403268:	d073      	beq.n	403352 <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  40326a:	2c02      	cmp	r4, #2
  40326c:	f000 80aa 	beq.w	4033c4 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  403270:	2c04      	cmp	r4, #4
  403272:	f000 80c1 	beq.w	4033f8 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  403276:	2c01      	cmp	r4, #1
  403278:	f040 80c4 	bne.w	403404 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  40327c:	2300      	movs	r3, #0
  40327e:	9302      	str	r3, [sp, #8]
  403280:	9301      	str	r3, [sp, #4]
  403282:	9300      	str	r3, [sp, #0]
  403284:	236c      	movs	r3, #108	; 0x6c
  403286:	aa05      	add	r2, sp, #20
  403288:	2128      	movs	r1, #40	; 0x28
  40328a:	2001      	movs	r0, #1
  40328c:	4c65      	ldr	r4, [pc, #404]	; (403424 <m2m_wifi_connect_sc+0x218>)
  40328e:	47a0      	blx	r4

ERR1:
	return ret;
}
  403290:	b020      	add	sp, #128	; 0x80
  403292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  403296:	f240 2203 	movw	r2, #515	; 0x203
  40329a:	4963      	ldr	r1, [pc, #396]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40329c:	4863      	ldr	r0, [pc, #396]	; (40342c <m2m_wifi_connect_sc+0x220>)
  40329e:	4c64      	ldr	r4, [pc, #400]	; (403430 <m2m_wifi_connect_sc+0x224>)
  4032a0:	47a0      	blx	r4
  4032a2:	4864      	ldr	r0, [pc, #400]	; (403434 <m2m_wifi_connect_sc+0x228>)
  4032a4:	47a0      	blx	r4
  4032a6:	4864      	ldr	r0, [pc, #400]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  4032a8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4032aa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4032ae:	e7ef      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  4032b0:	4618      	mov	r0, r3
  4032b2:	4b62      	ldr	r3, [pc, #392]	; (40343c <m2m_wifi_connect_sc+0x230>)
  4032b4:	4798      	blx	r3
  4032b6:	2840      	cmp	r0, #64	; 0x40
  4032b8:	d1b7      	bne.n	40322a <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  4032ba:	7833      	ldrb	r3, [r6, #0]
  4032bc:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4032c0:	b2d2      	uxtb	r2, r2
  4032c2:	2a06      	cmp	r2, #6
  4032c4:	d91e      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4032ca:	b2d2      	uxtb	r2, r2
  4032cc:	2a36      	cmp	r2, #54	; 0x36
  4032ce:	d819      	bhi.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032d0:	3b47      	subs	r3, #71	; 0x47
  4032d2:	b2db      	uxtb	r3, r3
  4032d4:	2b19      	cmp	r3, #25
  4032d6:	d915      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032d8:	4631      	mov	r1, r6
  4032da:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  4032de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4032e2:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  4032e6:	b2d2      	uxtb	r2, r2
  4032e8:	2a06      	cmp	r2, #6
  4032ea:	d90b      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4032f0:	b2d2      	uxtb	r2, r2
  4032f2:	2a36      	cmp	r2, #54	; 0x36
  4032f4:	d806      	bhi.n	403304 <m2m_wifi_connect_sc+0xf8>
  4032f6:	3b47      	subs	r3, #71	; 0x47
  4032f8:	b2db      	uxtb	r3, r3
  4032fa:	2b19      	cmp	r3, #25
  4032fc:	d902      	bls.n	403304 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  4032fe:	4288      	cmp	r0, r1
  403300:	d1ed      	bne.n	4032de <m2m_wifi_connect_sc+0xd2>
  403302:	e792      	b.n	40322a <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  403304:	f240 220f 	movw	r2, #527	; 0x20f
  403308:	4947      	ldr	r1, [pc, #284]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40330a:	4848      	ldr	r0, [pc, #288]	; (40342c <m2m_wifi_connect_sc+0x220>)
  40330c:	4c48      	ldr	r4, [pc, #288]	; (403430 <m2m_wifi_connect_sc+0x224>)
  40330e:	47a0      	blx	r4
  403310:	484b      	ldr	r0, [pc, #300]	; (403440 <m2m_wifi_connect_sc+0x234>)
  403312:	47a0      	blx	r4
  403314:	4848      	ldr	r0, [pc, #288]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  403316:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  403318:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  40331c:	e7b8      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  40331e:	f240 2219 	movw	r2, #537	; 0x219
  403322:	4941      	ldr	r1, [pc, #260]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  403324:	4841      	ldr	r0, [pc, #260]	; (40342c <m2m_wifi_connect_sc+0x220>)
  403326:	4c42      	ldr	r4, [pc, #264]	; (403430 <m2m_wifi_connect_sc+0x224>)
  403328:	47a0      	blx	r4
  40332a:	4846      	ldr	r0, [pc, #280]	; (403444 <m2m_wifi_connect_sc+0x238>)
  40332c:	47a0      	blx	r4
  40332e:	4842      	ldr	r0, [pc, #264]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  403330:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403332:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  403336:	e7ab      	b.n	403290 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  403338:	f240 2222 	movw	r2, #546	; 0x222
  40333c:	493a      	ldr	r1, [pc, #232]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40333e:	483b      	ldr	r0, [pc, #236]	; (40342c <m2m_wifi_connect_sc+0x220>)
  403340:	4c3b      	ldr	r4, [pc, #236]	; (403430 <m2m_wifi_connect_sc+0x224>)
  403342:	47a0      	blx	r4
  403344:	4840      	ldr	r0, [pc, #256]	; (403448 <m2m_wifi_connect_sc+0x23c>)
  403346:	47a0      	blx	r4
  403348:	483b      	ldr	r0, [pc, #236]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  40334a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40334c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403350:	e79e      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  403352:	7833      	ldrb	r3, [r6, #0]
  403354:	3b01      	subs	r3, #1
  403356:	b2db      	uxtb	r3, r3
  403358:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  40335c:	2b03      	cmp	r3, #3
  40335e:	d813      	bhi.n	403388 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  403360:	7872      	ldrb	r2, [r6, #1]
  403362:	1e53      	subs	r3, r2, #1
  403364:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  403368:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  40336c:	2b0b      	cmp	r3, #11
  40336e:	d11a      	bne.n	4033a6 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  403370:	1cb1      	adds	r1, r6, #2
  403372:	f10d 0016 	add.w	r0, sp, #22
  403376:	4b2a      	ldr	r3, [pc, #168]	; (403420 <m2m_wifi_connect_sc+0x214>)
  403378:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  40337a:	7873      	ldrb	r3, [r6, #1]
  40337c:	aa20      	add	r2, sp, #128	; 0x80
  40337e:	4413      	add	r3, r2
  403380:	2200      	movs	r2, #0
  403382:	f803 2c6a 	strb.w	r2, [r3, #-106]
  403386:	e779      	b.n	40327c <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  403388:	f240 2239 	movw	r2, #569	; 0x239
  40338c:	4926      	ldr	r1, [pc, #152]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40338e:	4827      	ldr	r0, [pc, #156]	; (40342c <m2m_wifi_connect_sc+0x220>)
  403390:	4c27      	ldr	r4, [pc, #156]	; (403430 <m2m_wifi_connect_sc+0x224>)
  403392:	47a0      	blx	r4
  403394:	f89d 1014 	ldrb.w	r1, [sp, #20]
  403398:	482c      	ldr	r0, [pc, #176]	; (40344c <m2m_wifi_connect_sc+0x240>)
  40339a:	47a0      	blx	r4
  40339c:	4826      	ldr	r0, [pc, #152]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  40339e:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4033a0:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4033a4:	e774      	b.n	403290 <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  4033a6:	f44f 7210 	mov.w	r2, #576	; 0x240
  4033aa:	491f      	ldr	r1, [pc, #124]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  4033ac:	481f      	ldr	r0, [pc, #124]	; (40342c <m2m_wifi_connect_sc+0x220>)
  4033ae:	4c20      	ldr	r4, [pc, #128]	; (403430 <m2m_wifi_connect_sc+0x224>)
  4033b0:	47a0      	blx	r4
  4033b2:	f89d 1015 	ldrb.w	r1, [sp, #21]
  4033b6:	4826      	ldr	r0, [pc, #152]	; (403450 <m2m_wifi_connect_sc+0x244>)
  4033b8:	47a0      	blx	r4
  4033ba:	481f      	ldr	r0, [pc, #124]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  4033bc:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4033be:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4033c2:	e765      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  4033c4:	4630      	mov	r0, r6
  4033c6:	4b1d      	ldr	r3, [pc, #116]	; (40343c <m2m_wifi_connect_sc+0x230>)
  4033c8:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  4033ca:	1e43      	subs	r3, r0, #1
  4033cc:	b29b      	uxth	r3, r3
  4033ce:	2b3f      	cmp	r3, #63	; 0x3f
  4033d0:	d805      	bhi.n	4033de <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  4033d2:	1c42      	adds	r2, r0, #1
  4033d4:	4631      	mov	r1, r6
  4033d6:	a805      	add	r0, sp, #20
  4033d8:	4b11      	ldr	r3, [pc, #68]	; (403420 <m2m_wifi_connect_sc+0x214>)
  4033da:	4798      	blx	r3
  4033dc:	e74e      	b.n	40327c <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  4033de:	f240 224f 	movw	r2, #591	; 0x24f
  4033e2:	4911      	ldr	r1, [pc, #68]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  4033e4:	4811      	ldr	r0, [pc, #68]	; (40342c <m2m_wifi_connect_sc+0x220>)
  4033e6:	4c12      	ldr	r4, [pc, #72]	; (403430 <m2m_wifi_connect_sc+0x224>)
  4033e8:	47a0      	blx	r4
  4033ea:	481a      	ldr	r0, [pc, #104]	; (403454 <m2m_wifi_connect_sc+0x248>)
  4033ec:	47a0      	blx	r4
  4033ee:	4812      	ldr	r0, [pc, #72]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  4033f0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4033f2:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  4033f6:	e74b      	b.n	403290 <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  4033f8:	223e      	movs	r2, #62	; 0x3e
  4033fa:	4631      	mov	r1, r6
  4033fc:	a805      	add	r0, sp, #20
  4033fe:	4b08      	ldr	r3, [pc, #32]	; (403420 <m2m_wifi_connect_sc+0x214>)
  403400:	4798      	blx	r3
  403402:	e73b      	b.n	40327c <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  403404:	f240 225f 	movw	r2, #607	; 0x25f
  403408:	4907      	ldr	r1, [pc, #28]	; (403428 <m2m_wifi_connect_sc+0x21c>)
  40340a:	4808      	ldr	r0, [pc, #32]	; (40342c <m2m_wifi_connect_sc+0x220>)
  40340c:	4c08      	ldr	r4, [pc, #32]	; (403430 <m2m_wifi_connect_sc+0x224>)
  40340e:	47a0      	blx	r4
  403410:	4811      	ldr	r0, [pc, #68]	; (403458 <m2m_wifi_connect_sc+0x24c>)
  403412:	47a0      	blx	r4
  403414:	4808      	ldr	r0, [pc, #32]	; (403438 <m2m_wifi_connect_sc+0x22c>)
  403416:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403418:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  40341c:	e738      	b.n	403290 <m2m_wifi_connect_sc+0x84>
  40341e:	bf00      	nop
  403420:	0040260d 	.word	0x0040260d
  403424:	00402785 	.word	0x00402785
  403428:	0040d1e4 	.word	0x0040d1e4
  40342c:	0040cf24 	.word	0x0040cf24
  403430:	00406239 	.word	0x00406239
  403434:	0040d238 	.word	0x0040d238
  403438:	0040cf50 	.word	0x0040cf50
  40343c:	0040262f 	.word	0x0040262f
  403440:	0040d24c 	.word	0x0040d24c
  403444:	0040d25c 	.word	0x0040d25c
  403448:	0040d270 	.word	0x0040d270
  40344c:	0040d27c 	.word	0x0040d27c
  403450:	0040d298 	.word	0x0040d298
  403454:	0040d2b4 	.word	0x0040d2b4
  403458:	0040d2d0 	.word	0x0040d2d0

0040345c <m2m_wifi_connect>:
{
  40345c:	b510      	push	{r4, lr}
  40345e:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  403460:	2400      	movs	r4, #0
  403462:	9401      	str	r4, [sp, #4]
  403464:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  403468:	9400      	str	r4, [sp, #0]
  40346a:	4c02      	ldr	r4, [pc, #8]	; (403474 <m2m_wifi_connect+0x18>)
  40346c:	47a0      	blx	r4
}
  40346e:	b002      	add	sp, #8
  403470:	bd10      	pop	{r4, pc}
  403472:	bf00      	nop
  403474:	0040320d 	.word	0x0040320d

00403478 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  403478:	2000      	movs	r0, #0
  40347a:	4770      	bx	lr

0040347c <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  40347c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40347e:	b083      	sub	sp, #12
  403480:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  403482:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  403486:	4e0a      	ldr	r6, [pc, #40]	; (4034b0 <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  403488:	4f0a      	ldr	r7, [pc, #40]	; (4034b4 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  40348a:	4621      	mov	r1, r4
  40348c:	4628      	mov	r0, r5
  40348e:	47b0      	blx	r6
		if(val32 != 0) {		
  403490:	b154      	cbz	r4, 4034a8 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  403492:	a902      	add	r1, sp, #8
  403494:	2300      	movs	r3, #0
  403496:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  40349a:	4628      	mov	r0, r5
  40349c:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  40349e:	2800      	cmp	r0, #0
  4034a0:	d1f3      	bne.n	40348a <chip_apply_conf+0xe>
				if(reg == val32)
  4034a2:	9b01      	ldr	r3, [sp, #4]
  4034a4:	429c      	cmp	r4, r3
  4034a6:	d1f0      	bne.n	40348a <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4034a8:	2000      	movs	r0, #0
  4034aa:	b003      	add	sp, #12
  4034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034ae:	bf00      	nop
  4034b0:	00403955 	.word	0x00403955
  4034b4:	00403949 	.word	0x00403949

004034b8 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034bc:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4034be:	2001      	movs	r0, #1
  4034c0:	4b3c      	ldr	r3, [pc, #240]	; (4035b4 <nm_clkless_wake+0xfc>)
  4034c2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4034c4:	a901      	add	r1, sp, #4
  4034c6:	2001      	movs	r0, #1
  4034c8:	4b3b      	ldr	r3, [pc, #236]	; (4035b8 <nm_clkless_wake+0x100>)
  4034ca:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4034cc:	4682      	mov	sl, r0
  4034ce:	b938      	cbnz	r0, 4034e0 <nm_clkless_wake+0x28>
  4034d0:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4034d2:	f04f 0801 	mov.w	r8, #1
  4034d6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4035e0 <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4034da:	4d36      	ldr	r5, [pc, #216]	; (4035b4 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4034dc:	4f37      	ldr	r7, [pc, #220]	; (4035bc <nm_clkless_wake+0x104>)
  4034de:	e020      	b.n	403522 <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4034e0:	2272      	movs	r2, #114	; 0x72
  4034e2:	4937      	ldr	r1, [pc, #220]	; (4035c0 <nm_clkless_wake+0x108>)
  4034e4:	4837      	ldr	r0, [pc, #220]	; (4035c4 <nm_clkless_wake+0x10c>)
  4034e6:	4c38      	ldr	r4, [pc, #224]	; (4035c8 <nm_clkless_wake+0x110>)
  4034e8:	47a0      	blx	r4
  4034ea:	4838      	ldr	r0, [pc, #224]	; (4035cc <nm_clkless_wake+0x114>)
  4034ec:	47a0      	blx	r4
  4034ee:	4838      	ldr	r0, [pc, #224]	; (4035d0 <nm_clkless_wake+0x118>)
  4034f0:	47a0      	blx	r4
		goto _WAKE_EXIT;
  4034f2:	e009      	b.n	403508 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  4034f4:	2296      	movs	r2, #150	; 0x96
  4034f6:	4932      	ldr	r1, [pc, #200]	; (4035c0 <nm_clkless_wake+0x108>)
  4034f8:	4832      	ldr	r0, [pc, #200]	; (4035c4 <nm_clkless_wake+0x10c>)
  4034fa:	4c33      	ldr	r4, [pc, #204]	; (4035c8 <nm_clkless_wake+0x110>)
  4034fc:	47a0      	blx	r4
  4034fe:	4835      	ldr	r0, [pc, #212]	; (4035d4 <nm_clkless_wake+0x11c>)
  403500:	47a0      	blx	r4
  403502:	4833      	ldr	r0, [pc, #204]	; (4035d0 <nm_clkless_wake+0x118>)
  403504:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403506:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  403508:	4650      	mov	r0, sl
  40350a:	b003      	add	sp, #12
  40350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  403510:	9901      	ldr	r1, [sp, #4]
  403512:	f041 0102 	orr.w	r1, r1, #2
  403516:	4640      	mov	r0, r8
  403518:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  40351a:	9b00      	ldr	r3, [sp, #0]
  40351c:	f013 0f04 	tst.w	r3, #4
  403520:	d1f2      	bne.n	403508 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  403522:	9901      	ldr	r1, [sp, #4]
  403524:	f041 0102 	orr.w	r1, r1, #2
  403528:	4640      	mov	r0, r8
  40352a:	47c8      	blx	r9
		nm_bsp_sleep(1);
  40352c:	4640      	mov	r0, r8
  40352e:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403530:	4669      	mov	r1, sp
  403532:	4b29      	ldr	r3, [pc, #164]	; (4035d8 <nm_clkless_wake+0x120>)
  403534:	6818      	ldr	r0, [r3, #0]
  403536:	4b20      	ldr	r3, [pc, #128]	; (4035b8 <nm_clkless_wake+0x100>)
  403538:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40353a:	b908      	cbnz	r0, 403540 <nm_clkless_wake+0x88>
  40353c:	9b00      	ldr	r3, [sp, #0]
  40353e:	b9bb      	cbnz	r3, 403570 <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  403540:	4e25      	ldr	r6, [pc, #148]	; (4035d8 <nm_clkless_wake+0x120>)
  403542:	230e      	movs	r3, #14
  403544:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  403546:	4640      	mov	r0, r8
  403548:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40354a:	4669      	mov	r1, sp
  40354c:	6830      	ldr	r0, [r6, #0]
  40354e:	4b1a      	ldr	r3, [pc, #104]	; (4035b8 <nm_clkless_wake+0x100>)
  403550:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  403552:	b908      	cbnz	r0, 403558 <nm_clkless_wake+0xa0>
  403554:	9b00      	ldr	r3, [sp, #0]
  403556:	b95b      	cbnz	r3, 403570 <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  403558:	4e1f      	ldr	r6, [pc, #124]	; (4035d8 <nm_clkless_wake+0x120>)
  40355a:	2313      	movs	r3, #19
  40355c:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  40355e:	4640      	mov	r0, r8
  403560:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403562:	4669      	mov	r1, sp
  403564:	6830      	ldr	r0, [r6, #0]
  403566:	4b14      	ldr	r3, [pc, #80]	; (4035b8 <nm_clkless_wake+0x100>)
  403568:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  40356a:	4606      	mov	r6, r0
  40356c:	2800      	cmp	r0, #0
  40356e:	d1c1      	bne.n	4034f4 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403570:	4e19      	ldr	r6, [pc, #100]	; (4035d8 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403572:	9b00      	ldr	r3, [sp, #0]
  403574:	f013 0f04 	tst.w	r3, #4
  403578:	d1c6      	bne.n	403508 <nm_clkless_wake+0x50>
  40357a:	3401      	adds	r4, #1
  40357c:	fba7 2304 	umull	r2, r3, r7, r4
  403580:	085b      	lsrs	r3, r3, #1
  403582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  403586:	429c      	cmp	r4, r3
  403588:	d1c2      	bne.n	403510 <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  40358a:	2002      	movs	r0, #2
  40358c:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40358e:	4669      	mov	r1, sp
  403590:	6830      	ldr	r0, [r6, #0]
  403592:	4b09      	ldr	r3, [pc, #36]	; (4035b8 <nm_clkless_wake+0x100>)
  403594:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  403596:	9b00      	ldr	r3, [sp, #0]
  403598:	f013 0f04 	tst.w	r3, #4
  40359c:	d1e9      	bne.n	403572 <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  40359e:	22aa      	movs	r2, #170	; 0xaa
  4035a0:	4907      	ldr	r1, [pc, #28]	; (4035c0 <nm_clkless_wake+0x108>)
  4035a2:	4808      	ldr	r0, [pc, #32]	; (4035c4 <nm_clkless_wake+0x10c>)
  4035a4:	f8df b020 	ldr.w	fp, [pc, #32]	; 4035c8 <nm_clkless_wake+0x110>
  4035a8:	47d8      	blx	fp
  4035aa:	480c      	ldr	r0, [pc, #48]	; (4035dc <nm_clkless_wake+0x124>)
  4035ac:	47d8      	blx	fp
  4035ae:	4808      	ldr	r0, [pc, #32]	; (4035d0 <nm_clkless_wake+0x118>)
  4035b0:	47d8      	blx	fp
  4035b2:	e7de      	b.n	403572 <nm_clkless_wake+0xba>
  4035b4:	00402259 	.word	0x00402259
  4035b8:	00403949 	.word	0x00403949
  4035bc:	aaaaaaab 	.word	0xaaaaaaab
  4035c0:	0040d354 	.word	0x0040d354
  4035c4:	0040cf24 	.word	0x0040cf24
  4035c8:	00406239 	.word	0x00406239
  4035cc:	0040d3c4 	.word	0x0040d3c4
  4035d0:	0040cf50 	.word	0x0040cf50
  4035d4:	0040d3e4 	.word	0x0040d3e4
  4035d8:	20400014 	.word	0x20400014
  4035dc:	0040d404 	.word	0x0040d404
  4035e0:	00403955 	.word	0x00403955

004035e4 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  4035e4:	b500      	push	{lr}
  4035e6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  4035e8:	a901      	add	r1, sp, #4
  4035ea:	f241 4008 	movw	r0, #5128	; 0x1408
  4035ee:	4b15      	ldr	r3, [pc, #84]	; (403644 <enable_interrupts+0x60>)
  4035f0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4035f2:	b9e8      	cbnz	r0, 403630 <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  4035f4:	9901      	ldr	r1, [sp, #4]
  4035f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4035fa:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  4035fc:	f241 4008 	movw	r0, #5128	; 0x1408
  403600:	4b11      	ldr	r3, [pc, #68]	; (403648 <enable_interrupts+0x64>)
  403602:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403604:	b9b8      	cbnz	r0, 403636 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403606:	a901      	add	r1, sp, #4
  403608:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40360c:	4b0d      	ldr	r3, [pc, #52]	; (403644 <enable_interrupts+0x60>)
  40360e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403610:	b9a0      	cbnz	r0, 40363c <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  403612:	9901      	ldr	r1, [sp, #4]
  403614:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403618:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  40361a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40361e:	4b0a      	ldr	r3, [pc, #40]	; (403648 <enable_interrupts+0x64>)
  403620:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403622:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403624:	bf18      	it	ne
  403626:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  40362a:	b003      	add	sp, #12
  40362c:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  403630:	f06f 0005 	mvn.w	r0, #5
  403634:	e7f9      	b.n	40362a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403636:	f06f 0005 	mvn.w	r0, #5
  40363a:	e7f6      	b.n	40362a <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  40363c:	f06f 0005 	mvn.w	r0, #5
  403640:	e7f3      	b.n	40362a <enable_interrupts+0x46>
  403642:	bf00      	nop
  403644:	00403949 	.word	0x00403949
  403648:	00403955 	.word	0x00403955

0040364c <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  40364c:	b510      	push	{r4, lr}
  40364e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  403650:	4b25      	ldr	r3, [pc, #148]	; (4036e8 <nmi_get_chipid+0x9c>)
  403652:	681c      	ldr	r4, [r3, #0]
  403654:	b124      	cbz	r4, 403660 <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  403656:	4b24      	ldr	r3, [pc, #144]	; (4036e8 <nmi_get_chipid+0x9c>)
  403658:	681c      	ldr	r4, [r3, #0]
}
  40365a:	4620      	mov	r0, r4
  40365c:	b002      	add	sp, #8
  40365e:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  403660:	4619      	mov	r1, r3
  403662:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403666:	4b21      	ldr	r3, [pc, #132]	; (4036ec <nmi_get_chipid+0xa0>)
  403668:	4798      	blx	r3
  40366a:	b118      	cbz	r0, 403674 <nmi_get_chipid+0x28>
			chipid = 0;
  40366c:	2200      	movs	r2, #0
  40366e:	4b1e      	ldr	r3, [pc, #120]	; (4036e8 <nmi_get_chipid+0x9c>)
  403670:	601a      	str	r2, [r3, #0]
			return 0;
  403672:	e7f2      	b.n	40365a <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  403674:	a901      	add	r1, sp, #4
  403676:	f241 30f4 	movw	r0, #5108	; 0x13f4
  40367a:	4b1c      	ldr	r3, [pc, #112]	; (4036ec <nmi_get_chipid+0xa0>)
  40367c:	4798      	blx	r3
  40367e:	b118      	cbz	r0, 403688 <nmi_get_chipid+0x3c>
			chipid = 0;
  403680:	2200      	movs	r2, #0
  403682:	4b19      	ldr	r3, [pc, #100]	; (4036e8 <nmi_get_chipid+0x9c>)
  403684:	601a      	str	r2, [r3, #0]
			return 0;
  403686:	e7e8      	b.n	40365a <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  403688:	4b17      	ldr	r3, [pc, #92]	; (4036e8 <nmi_get_chipid+0x9c>)
  40368a:	681b      	ldr	r3, [r3, #0]
  40368c:	4a18      	ldr	r2, [pc, #96]	; (4036f0 <nmi_get_chipid+0xa4>)
  40368e:	4293      	cmp	r3, r2
  403690:	d00d      	beq.n	4036ae <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  403692:	4a18      	ldr	r2, [pc, #96]	; (4036f4 <nmi_get_chipid+0xa8>)
  403694:	4293      	cmp	r3, r2
  403696:	d011      	beq.n	4036bc <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  403698:	4a17      	ldr	r2, [pc, #92]	; (4036f8 <nmi_get_chipid+0xac>)
  40369a:	4293      	cmp	r3, r2
  40369c:	d018      	beq.n	4036d0 <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  40369e:	4a12      	ldr	r2, [pc, #72]	; (4036e8 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4036a0:	6813      	ldr	r3, [r2, #0]
  4036a2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4036a6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4036aa:	6013      	str	r3, [r2, #0]
  4036ac:	e7d3      	b.n	403656 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4036ae:	9b01      	ldr	r3, [sp, #4]
  4036b0:	2b01      	cmp	r3, #1
  4036b2:	d0f4      	beq.n	40369e <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4036b4:	3201      	adds	r2, #1
  4036b6:	4b0c      	ldr	r3, [pc, #48]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036b8:	601a      	str	r2, [r3, #0]
  4036ba:	e7f0      	b.n	40369e <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4036bc:	9b01      	ldr	r3, [sp, #4]
  4036be:	2b03      	cmp	r3, #3
  4036c0:	d0ed      	beq.n	40369e <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4036c2:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4036c4:	bf0c      	ite	eq
  4036c6:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  4036c8:	4a0c      	ldrne	r2, [pc, #48]	; (4036fc <nmi_get_chipid+0xb0>)
  4036ca:	4b07      	ldr	r3, [pc, #28]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036cc:	601a      	str	r2, [r3, #0]
  4036ce:	e7e6      	b.n	40369e <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4036d0:	4905      	ldr	r1, [pc, #20]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036d2:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4036d6:	4b05      	ldr	r3, [pc, #20]	; (4036ec <nmi_get_chipid+0xa0>)
  4036d8:	4798      	blx	r3
  4036da:	2800      	cmp	r0, #0
  4036dc:	d0df      	beq.n	40369e <nmi_get_chipid+0x52>
			chipid = 0;
  4036de:	2200      	movs	r2, #0
  4036e0:	4b01      	ldr	r3, [pc, #4]	; (4036e8 <nmi_get_chipid+0x9c>)
  4036e2:	601a      	str	r2, [r3, #0]
			return 0;
  4036e4:	e7b9      	b.n	40365a <nmi_get_chipid+0xe>
  4036e6:	bf00      	nop
  4036e8:	2040c364 	.word	0x2040c364
  4036ec:	00403949 	.word	0x00403949
  4036f0:	001002a0 	.word	0x001002a0
  4036f4:	001002b0 	.word	0x001002b0
  4036f8:	001000f0 	.word	0x001000f0
  4036fc:	001002b2 	.word	0x001002b2

00403700 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  403700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403704:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403706:	f241 0514 	movw	r5, #4116	; 0x1014
  40370a:	4c28      	ldr	r4, [pc, #160]	; (4037ac <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  40370c:	4e28      	ldr	r6, [pc, #160]	; (4037b0 <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40370e:	4628      	mov	r0, r5
  403710:	47a0      	blx	r4
		if (reg & 0x80000000) {
  403712:	2800      	cmp	r0, #0
  403714:	db02      	blt.n	40371c <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403716:	2001      	movs	r0, #1
  403718:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40371a:	e7f8      	b.n	40370e <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  40371c:	4825      	ldr	r0, [pc, #148]	; (4037b4 <wait_for_bootrom+0xb4>)
  40371e:	4b23      	ldr	r3, [pc, #140]	; (4037ac <wait_for_bootrom+0xac>)
  403720:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  403722:	f010 0f01 	tst.w	r0, #1
  403726:	d110      	bne.n	40374a <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403728:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4037b0 <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  40372c:	4e1f      	ldr	r6, [pc, #124]	; (4037ac <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40372e:	4d22      	ldr	r5, [pc, #136]	; (4037b8 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  403730:	2001      	movs	r0, #1
  403732:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  403734:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403738:	47b0      	blx	r6
  40373a:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40373c:	462a      	mov	r2, r5
  40373e:	4601      	mov	r1, r0
  403740:	481e      	ldr	r0, [pc, #120]	; (4037bc <wait_for_bootrom+0xbc>)
  403742:	4b1f      	ldr	r3, [pc, #124]	; (4037c0 <wait_for_bootrom+0xc0>)
  403744:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  403746:	42ac      	cmp	r4, r5
  403748:	d1f2      	bne.n	403730 <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  40374a:	2f02      	cmp	r7, #2
  40374c:	d019      	beq.n	403782 <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40374e:	2f03      	cmp	r7, #3
  403750:	d022      	beq.n	403798 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  403752:	2f04      	cmp	r7, #4
  403754:	bf14      	ite	ne
  403756:	2400      	movne	r4, #0
  403758:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  40375a:	4b1a      	ldr	r3, [pc, #104]	; (4037c4 <wait_for_bootrom+0xc4>)
  40375c:	4798      	blx	r3
  40375e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  403762:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  403766:	bf0c      	ite	eq
  403768:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  40376c:	4620      	movne	r0, r4
  40376e:	4b16      	ldr	r3, [pc, #88]	; (4037c8 <wait_for_bootrom+0xc8>)
  403770:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  403772:	4916      	ldr	r1, [pc, #88]	; (4037cc <wait_for_bootrom+0xcc>)
  403774:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403778:	4b15      	ldr	r3, [pc, #84]	; (4037d0 <wait_for_bootrom+0xd0>)
  40377a:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  40377c:	2000      	movs	r0, #0
  40377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403782:	4914      	ldr	r1, [pc, #80]	; (4037d4 <wait_for_bootrom+0xd4>)
  403784:	4814      	ldr	r0, [pc, #80]	; (4037d8 <wait_for_bootrom+0xd8>)
  403786:	4c12      	ldr	r4, [pc, #72]	; (4037d0 <wait_for_bootrom+0xd0>)
  403788:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  40378a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40378e:	f241 008c 	movw	r0, #4236	; 0x108c
  403792:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403794:	2400      	movs	r4, #0
  403796:	e7e0      	b.n	40375a <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403798:	490e      	ldr	r1, [pc, #56]	; (4037d4 <wait_for_bootrom+0xd4>)
  40379a:	480f      	ldr	r0, [pc, #60]	; (4037d8 <wait_for_bootrom+0xd8>)
  40379c:	4c0c      	ldr	r4, [pc, #48]	; (4037d0 <wait_for_bootrom+0xd0>)
  40379e:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4037a0:	2100      	movs	r1, #0
  4037a2:	f241 008c 	movw	r0, #4236	; 0x108c
  4037a6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4037a8:	2400      	movs	r4, #0
  4037aa:	e7d6      	b.n	40375a <wait_for_bootrom+0x5a>
  4037ac:	0040393d 	.word	0x0040393d
  4037b0:	00402259 	.word	0x00402259
  4037b4:	000207bc 	.word	0x000207bc
  4037b8:	10add09e 	.word	0x10add09e
  4037bc:	0040d428 	.word	0x0040d428
  4037c0:	00406239 	.word	0x00406239
  4037c4:	0040364d 	.word	0x0040364d
  4037c8:	0040347d 	.word	0x0040347d
  4037cc:	ef522f61 	.word	0xef522f61
  4037d0:	00403955 	.word	0x00403955
  4037d4:	3c1cd57d 	.word	0x3c1cd57d
  4037d8:	000207ac 	.word	0x000207ac

004037dc <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037de:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4037e0:	f241 038c 	movw	r3, #4236	; 0x108c
  4037e4:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  4037e6:	4b18      	ldr	r3, [pc, #96]	; (403848 <wait_for_firmware_start+0x6c>)
  4037e8:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  4037ea:	3802      	subs	r0, #2
  4037ec:	b2c0      	uxtb	r0, r0
  4037ee:	2801      	cmp	r0, #1
  4037f0:	d911      	bls.n	403816 <wait_for_firmware_start+0x3a>
{
  4037f2:	f04f 34ff 	mov.w	r4, #4294967295
  4037f6:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  4037f8:	2702      	movs	r7, #2
  4037fa:	4e14      	ldr	r6, [pc, #80]	; (40384c <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  4037fc:	4d14      	ldr	r5, [pc, #80]	; (403850 <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  4037fe:	9b00      	ldr	r3, [sp, #0]
  403800:	4298      	cmp	r0, r3
  403802:	d012      	beq.n	40382a <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403804:	4638      	mov	r0, r7
  403806:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403808:	9801      	ldr	r0, [sp, #4]
  40380a:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  40380c:	3c01      	subs	r4, #1
  40380e:	d1f6      	bne.n	4037fe <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  403810:	f06f 0004 	mvn.w	r0, #4
  403814:	e00e      	b.n	403834 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403816:	4b0f      	ldr	r3, [pc, #60]	; (403854 <wait_for_firmware_start+0x78>)
  403818:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  40381a:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40381e:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  403822:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403826:	9300      	str	r3, [sp, #0]
  403828:	e7e3      	b.n	4037f2 <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  40382a:	9a00      	ldr	r2, [sp, #0]
  40382c:	4b06      	ldr	r3, [pc, #24]	; (403848 <wait_for_firmware_start+0x6c>)
  40382e:	429a      	cmp	r2, r3
  403830:	d002      	beq.n	403838 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  403832:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403834:	b003      	add	sp, #12
  403836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403838:	2100      	movs	r1, #0
  40383a:	f241 008c 	movw	r0, #4236	; 0x108c
  40383e:	4b06      	ldr	r3, [pc, #24]	; (403858 <wait_for_firmware_start+0x7c>)
  403840:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  403842:	2000      	movs	r0, #0
  403844:	e7f6      	b.n	403834 <wait_for_firmware_start+0x58>
  403846:	bf00      	nop
  403848:	02532636 	.word	0x02532636
  40384c:	00402259 	.word	0x00402259
  403850:	0040393d 	.word	0x0040393d
  403854:	000207ac 	.word	0x000207ac
  403858:	00403955 	.word	0x00403955

0040385c <chip_deinit>:

sint8 chip_deinit(void)
{
  40385c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40385e:	b083      	sub	sp, #12
	uint32 reg = 0;
  403860:	a902      	add	r1, sp, #8
  403862:	2300      	movs	r3, #0
  403864:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403868:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40386c:	4b24      	ldr	r3, [pc, #144]	; (403900 <chip_deinit+0xa4>)
  40386e:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  403870:	bb20      	cbnz	r0, 4038bc <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  403872:	9901      	ldr	r1, [sp, #4]
  403874:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403878:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40387a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40387e:	4b21      	ldr	r3, [pc, #132]	; (403904 <chip_deinit+0xa8>)
  403880:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  403882:	4605      	mov	r5, r0
  403884:	bb28      	cbnz	r0, 4038d2 <chip_deinit+0x76>
  403886:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403888:	4e1d      	ldr	r6, [pc, #116]	; (403900 <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  40388a:	4f1e      	ldr	r7, [pc, #120]	; (403904 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  40388c:	a901      	add	r1, sp, #4
  40388e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403892:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  403894:	4605      	mov	r5, r0
  403896:	bb38      	cbnz	r0, 4038e8 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  403898:	9901      	ldr	r1, [sp, #4]
  40389a:	f411 6f80 	tst.w	r1, #1024	; 0x400
  40389e:	d00a      	beq.n	4038b6 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4038a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4038a4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4038a6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4038aa:	47b8      	blx	r7
  4038ac:	4605      	mov	r5, r0
  4038ae:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4038b0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4038b4:	d1ea      	bne.n	40388c <chip_deinit+0x30>

	return ret;
}
  4038b6:	4628      	mov	r0, r5
  4038b8:	b003      	add	sp, #12
  4038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4038bc:	f240 2231 	movw	r2, #561	; 0x231
  4038c0:	4911      	ldr	r1, [pc, #68]	; (403908 <chip_deinit+0xac>)
  4038c2:	4812      	ldr	r0, [pc, #72]	; (40390c <chip_deinit+0xb0>)
  4038c4:	4c12      	ldr	r4, [pc, #72]	; (403910 <chip_deinit+0xb4>)
  4038c6:	47a0      	blx	r4
  4038c8:	4812      	ldr	r0, [pc, #72]	; (403914 <chip_deinit+0xb8>)
  4038ca:	47a0      	blx	r4
  4038cc:	4812      	ldr	r0, [pc, #72]	; (403918 <chip_deinit+0xbc>)
  4038ce:	47a0      	blx	r4
  4038d0:	e7cf      	b.n	403872 <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  4038d2:	f240 2237 	movw	r2, #567	; 0x237
  4038d6:	490c      	ldr	r1, [pc, #48]	; (403908 <chip_deinit+0xac>)
  4038d8:	480c      	ldr	r0, [pc, #48]	; (40390c <chip_deinit+0xb0>)
  4038da:	4c0d      	ldr	r4, [pc, #52]	; (403910 <chip_deinit+0xb4>)
  4038dc:	47a0      	blx	r4
  4038de:	480f      	ldr	r0, [pc, #60]	; (40391c <chip_deinit+0xc0>)
  4038e0:	47a0      	blx	r4
  4038e2:	480d      	ldr	r0, [pc, #52]	; (403918 <chip_deinit+0xbc>)
  4038e4:	47a0      	blx	r4
		return ret;
  4038e6:	e7e6      	b.n	4038b6 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  4038e8:	f240 223e 	movw	r2, #574	; 0x23e
  4038ec:	4906      	ldr	r1, [pc, #24]	; (403908 <chip_deinit+0xac>)
  4038ee:	4807      	ldr	r0, [pc, #28]	; (40390c <chip_deinit+0xb0>)
  4038f0:	4c07      	ldr	r4, [pc, #28]	; (403910 <chip_deinit+0xb4>)
  4038f2:	47a0      	blx	r4
  4038f4:	480a      	ldr	r0, [pc, #40]	; (403920 <chip_deinit+0xc4>)
  4038f6:	47a0      	blx	r4
  4038f8:	4807      	ldr	r0, [pc, #28]	; (403918 <chip_deinit+0xbc>)
  4038fa:	47a0      	blx	r4
			return ret;
  4038fc:	e7db      	b.n	4038b6 <chip_deinit+0x5a>
  4038fe:	bf00      	nop
  403900:	00403949 	.word	0x00403949
  403904:	00403955 	.word	0x00403955
  403908:	0040d364 	.word	0x0040d364
  40390c:	0040cf24 	.word	0x0040cf24
  403910:	00406239 	.word	0x00406239
  403914:	0040d370 	.word	0x0040d370
  403918:	0040cf50 	.word	0x0040cf50
  40391c:	0040d38c 	.word	0x0040d38c
  403920:	0040d3a8 	.word	0x0040d3a8

00403924 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403924:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403926:	4b01      	ldr	r3, [pc, #4]	; (40392c <nm_bus_iface_init+0x8>)
  403928:	4798      	blx	r3

	return ret;
}
  40392a:	bd08      	pop	{r3, pc}
  40392c:	004023dd 	.word	0x004023dd

00403930 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  403930:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  403932:	4b01      	ldr	r3, [pc, #4]	; (403938 <nm_bus_iface_deinit+0x8>)
  403934:	4798      	blx	r3

	return ret;
}
  403936:	bd08      	pop	{r3, pc}
  403938:	004025cd 	.word	0x004025cd

0040393c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  40393c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40393e:	4b01      	ldr	r3, [pc, #4]	; (403944 <nm_read_reg+0x8>)
  403940:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  403942:	bd08      	pop	{r3, pc}
  403944:	00404191 	.word	0x00404191

00403948 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403948:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  40394a:	4b01      	ldr	r3, [pc, #4]	; (403950 <nm_read_reg_with_ret+0x8>)
  40394c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40394e:	bd08      	pop	{r3, pc}
  403950:	004041a9 	.word	0x004041a9

00403954 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403954:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  403956:	4b01      	ldr	r3, [pc, #4]	; (40395c <nm_write_reg+0x8>)
  403958:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  40395a:	bd08      	pop	{r3, pc}
  40395c:	004041c1 	.word	0x004041c1

00403960 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403964:	4607      	mov	r7, r0
  403966:	4689      	mov	r9, r1
  403968:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  40396a:	4b12      	ldr	r3, [pc, #72]	; (4039b4 <nm_read_block+0x54>)
  40396c:	f8b3 8000 	ldrh.w	r8, [r3]
  403970:	f1a8 0808 	sub.w	r8, r8, #8
  403974:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403978:	4542      	cmp	r2, r8
  40397a:	d919      	bls.n	4039b0 <nm_read_block+0x50>
  40397c:	4644      	mov	r4, r8
  40397e:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403980:	f8df a034 	ldr.w	sl, [pc, #52]	; 4039b8 <nm_read_block+0x58>
  403984:	4642      	mov	r2, r8
  403986:	eb09 0106 	add.w	r1, r9, r6
  40398a:	4638      	mov	r0, r7
  40398c:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  40398e:	4603      	mov	r3, r0
  403990:	b958      	cbnz	r0, 4039aa <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  403992:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403994:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403996:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403998:	42a5      	cmp	r5, r4
  40399a:	d8f3      	bhi.n	403984 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40399c:	b2aa      	uxth	r2, r5
  40399e:	eb09 0106 	add.w	r1, r9, r6
  4039a2:	4638      	mov	r0, r7
  4039a4:	4b04      	ldr	r3, [pc, #16]	; (4039b8 <nm_read_block+0x58>)
  4039a6:	4798      	blx	r3
  4039a8:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4039aa:	4618      	mov	r0, r3
  4039ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4039b0:	2600      	movs	r6, #0
  4039b2:	e7f3      	b.n	40399c <nm_read_block+0x3c>
  4039b4:	20400010 	.word	0x20400010
  4039b8:	004042ed 	.word	0x004042ed

004039bc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4039bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4039c0:	4607      	mov	r7, r0
  4039c2:	4689      	mov	r9, r1
  4039c4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4039c6:	4b12      	ldr	r3, [pc, #72]	; (403a10 <nm_write_block+0x54>)
  4039c8:	f8b3 8000 	ldrh.w	r8, [r3]
  4039cc:	f1a8 0808 	sub.w	r8, r8, #8
  4039d0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4039d4:	4542      	cmp	r2, r8
  4039d6:	d919      	bls.n	403a0c <nm_write_block+0x50>
  4039d8:	4644      	mov	r4, r8
  4039da:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4039dc:	f8df a034 	ldr.w	sl, [pc, #52]	; 403a14 <nm_write_block+0x58>
  4039e0:	4642      	mov	r2, r8
  4039e2:	eb09 0106 	add.w	r1, r9, r6
  4039e6:	4638      	mov	r0, r7
  4039e8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4039ea:	4603      	mov	r3, r0
  4039ec:	b958      	cbnz	r0, 403a06 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4039ee:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4039f0:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4039f2:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4039f4:	42a5      	cmp	r5, r4
  4039f6:	d8f3      	bhi.n	4039e0 <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4039f8:	b2aa      	uxth	r2, r5
  4039fa:	eb09 0106 	add.w	r1, r9, r6
  4039fe:	4638      	mov	r0, r7
  403a00:	4b04      	ldr	r3, [pc, #16]	; (403a14 <nm_write_block+0x58>)
  403a02:	4798      	blx	r3
  403a04:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403a06:	4618      	mov	r0, r3
  403a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403a0c:	2600      	movs	r6, #0
  403a0e:	e7f3      	b.n	4039f8 <nm_write_block+0x3c>
  403a10:	20400010 	.word	0x20400010
  403a14:	004043b5 	.word	0x004043b5

00403a18 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403a18:	b530      	push	{r4, r5, lr}
  403a1a:	b083      	sub	sp, #12
  403a1c:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  403a1e:	a902      	add	r1, sp, #8
  403a20:	2300      	movs	r3, #0
  403a22:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403a26:	4824      	ldr	r0, [pc, #144]	; (403ab8 <nm_get_firmware_info+0xa0>)
  403a28:	4b24      	ldr	r3, [pc, #144]	; (403abc <nm_get_firmware_info+0xa4>)
  403a2a:	4798      	blx	r3
  403a2c:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  403a2e:	9a01      	ldr	r2, [sp, #4]
  403a30:	4b23      	ldr	r3, [pc, #140]	; (403ac0 <nm_get_firmware_info+0xa8>)
  403a32:	429a      	cmp	r2, r3
  403a34:	d039      	beq.n	403aaa <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403a36:	9b01      	ldr	r3, [sp, #4]
  403a38:	0c1a      	lsrs	r2, r3, #16
  403a3a:	b291      	uxth	r1, r2
  403a3c:	0a08      	lsrs	r0, r1, #8
  403a3e:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  403a40:	f3c1 1103 	ubfx	r1, r1, #4, #4
  403a44:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  403a46:	f002 020f 	and.w	r2, r2, #15
  403a4a:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  403a4c:	b29a      	uxth	r2, r3
  403a4e:	0a11      	lsrs	r1, r2, #8
  403a50:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  403a52:	f3c2 1203 	ubfx	r2, r2, #4, #4
  403a56:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  403a58:	f003 030f 	and.w	r3, r3, #15
  403a5c:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  403a5e:	4b19      	ldr	r3, [pc, #100]	; (403ac4 <nm_get_firmware_info+0xac>)
  403a60:	4798      	blx	r3
  403a62:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  403a64:	7922      	ldrb	r2, [r4, #4]
  403a66:	79a3      	ldrb	r3, [r4, #6]
  403a68:	f003 030f 	and.w	r3, r3, #15
  403a6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403a70:	7962      	ldrb	r2, [r4, #5]
  403a72:	0112      	lsls	r2, r2, #4
  403a74:	b2d2      	uxtb	r2, r2
  403a76:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  403a78:	79e1      	ldrb	r1, [r4, #7]
  403a7a:	7a62      	ldrb	r2, [r4, #9]
  403a7c:	f002 020f 	and.w	r2, r2, #15
  403a80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  403a84:	7a21      	ldrb	r1, [r4, #8]
  403a86:	0109      	lsls	r1, r1, #4
  403a88:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  403a8a:	430a      	orrs	r2, r1
  403a8c:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  403a90:	428a      	cmp	r2, r1
  403a92:	bf88      	it	hi
  403a94:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  403a98:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  403a9c:	4293      	cmp	r3, r2
	}
	return ret;
}
  403a9e:	bf8c      	ite	hi
  403aa0:	4628      	movhi	r0, r5
  403aa2:	f06f 000c 	mvnls.w	r0, #12
  403aa6:	b003      	add	sp, #12
  403aa8:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  403aaa:	a901      	add	r1, sp, #4
  403aac:	f241 0048 	movw	r0, #4168	; 0x1048
  403ab0:	4b02      	ldr	r3, [pc, #8]	; (403abc <nm_get_firmware_info+0xa4>)
  403ab2:	4798      	blx	r3
  403ab4:	4605      	mov	r5, r0
  403ab6:	e7be      	b.n	403a36 <nm_get_firmware_info+0x1e>
  403ab8:	000207ac 	.word	0x000207ac
  403abc:	00403949 	.word	0x00403949
  403ac0:	d75dc1c3 	.word	0xd75dc1c3
  403ac4:	0040364d 	.word	0x0040364d

00403ac8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403ac8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403aca:	2800      	cmp	r0, #0
  403acc:	d037      	beq.n	403b3e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  403ace:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  403ad0:	1e63      	subs	r3, r4, #1
  403ad2:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403ad4:	2b04      	cmp	r3, #4
  403ad6:	bf28      	it	cs
  403ad8:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403ada:	2000      	movs	r0, #0
  403adc:	4b1e      	ldr	r3, [pc, #120]	; (403b58 <nm_drv_init+0x90>)
  403ade:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ae0:	4605      	mov	r5, r0
  403ae2:	2800      	cmp	r0, #0
  403ae4:	d12d      	bne.n	403b42 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403ae6:	481d      	ldr	r0, [pc, #116]	; (403b5c <nm_drv_init+0x94>)
  403ae8:	4d1d      	ldr	r5, [pc, #116]	; (403b60 <nm_drv_init+0x98>)
  403aea:	47a8      	blx	r5
  403aec:	4b1d      	ldr	r3, [pc, #116]	; (403b64 <nm_drv_init+0x9c>)
  403aee:	4798      	blx	r3
  403af0:	4601      	mov	r1, r0
  403af2:	481d      	ldr	r0, [pc, #116]	; (403b68 <nm_drv_init+0xa0>)
  403af4:	47a8      	blx	r5
  403af6:	481d      	ldr	r0, [pc, #116]	; (403b6c <nm_drv_init+0xa4>)
  403af8:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403afa:	4b1d      	ldr	r3, [pc, #116]	; (403b70 <nm_drv_init+0xa8>)
  403afc:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  403afe:	4620      	mov	r0, r4
  403b00:	4b1c      	ldr	r3, [pc, #112]	; (403b74 <nm_drv_init+0xac>)
  403b02:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b04:	4605      	mov	r5, r0
  403b06:	b9b0      	cbnz	r0, 403b36 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403b08:	4620      	mov	r0, r4
  403b0a:	4b1b      	ldr	r3, [pc, #108]	; (403b78 <nm_drv_init+0xb0>)
  403b0c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b0e:	4605      	mov	r5, r0
  403b10:	b988      	cbnz	r0, 403b36 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  403b12:	3c02      	subs	r4, #2
  403b14:	b2e4      	uxtb	r4, r4
  403b16:	2c01      	cmp	r4, #1
  403b18:	d90f      	bls.n	403b3a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403b1a:	4b18      	ldr	r3, [pc, #96]	; (403b7c <nm_drv_init+0xb4>)
  403b1c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b1e:	4605      	mov	r5, r0
  403b20:	b158      	cbz	r0, 403b3a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  403b22:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403b26:	4916      	ldr	r1, [pc, #88]	; (403b80 <nm_drv_init+0xb8>)
  403b28:	4816      	ldr	r0, [pc, #88]	; (403b84 <nm_drv_init+0xbc>)
  403b2a:	4c0d      	ldr	r4, [pc, #52]	; (403b60 <nm_drv_init+0x98>)
  403b2c:	47a0      	blx	r4
  403b2e:	4816      	ldr	r0, [pc, #88]	; (403b88 <nm_drv_init+0xc0>)
  403b30:	47a0      	blx	r4
  403b32:	480e      	ldr	r0, [pc, #56]	; (403b6c <nm_drv_init+0xa4>)
  403b34:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403b36:	4b15      	ldr	r3, [pc, #84]	; (403b8c <nm_drv_init+0xc4>)
  403b38:	4798      	blx	r3
ERR1:
	return ret;
}
  403b3a:	4628      	mov	r0, r5
  403b3c:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  403b3e:	2401      	movs	r4, #1
  403b40:	e7cb      	b.n	403ada <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  403b42:	f44f 7292 	mov.w	r2, #292	; 0x124
  403b46:	490e      	ldr	r1, [pc, #56]	; (403b80 <nm_drv_init+0xb8>)
  403b48:	480e      	ldr	r0, [pc, #56]	; (403b84 <nm_drv_init+0xbc>)
  403b4a:	4c05      	ldr	r4, [pc, #20]	; (403b60 <nm_drv_init+0x98>)
  403b4c:	47a0      	blx	r4
  403b4e:	4810      	ldr	r0, [pc, #64]	; (403b90 <nm_drv_init+0xc8>)
  403b50:	47a0      	blx	r4
  403b52:	4806      	ldr	r0, [pc, #24]	; (403b6c <nm_drv_init+0xa4>)
  403b54:	47a0      	blx	r4
		goto ERR1;
  403b56:	e7f0      	b.n	403b3a <nm_drv_init+0x72>
  403b58:	00403925 	.word	0x00403925
  403b5c:	0040d1f8 	.word	0x0040d1f8
  403b60:	00406239 	.word	0x00406239
  403b64:	0040364d 	.word	0x0040364d
  403b68:	0040d4f0 	.word	0x0040d4f0
  403b6c:	0040cf50 	.word	0x0040cf50
  403b70:	004041d9 	.word	0x004041d9
  403b74:	00403701 	.word	0x00403701
  403b78:	004037dd 	.word	0x004037dd
  403b7c:	004035e5 	.word	0x004035e5
  403b80:	0040d438 	.word	0x0040d438
  403b84:	0040cf24 	.word	0x0040cf24
  403b88:	0040d4b4 	.word	0x0040d4b4
  403b8c:	00403931 	.word	0x00403931
  403b90:	0040d4d4 	.word	0x0040d4d4

00403b94 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  403b94:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  403b96:	4b19      	ldr	r3, [pc, #100]	; (403bfc <nm_drv_deinit+0x68>)
  403b98:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403b9a:	b958      	cbnz	r0, 403bb4 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  403b9c:	2000      	movs	r0, #0
  403b9e:	4b18      	ldr	r3, [pc, #96]	; (403c00 <nm_drv_deinit+0x6c>)
  403ba0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403ba2:	4604      	mov	r4, r0
  403ba4:	b998      	cbnz	r0, 403bce <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  403ba6:	4b17      	ldr	r3, [pc, #92]	; (403c04 <nm_drv_deinit+0x70>)
  403ba8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403baa:	4604      	mov	r4, r0
  403bac:	b9d0      	cbnz	r0, 403be4 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  403bae:	4b16      	ldr	r3, [pc, #88]	; (403c08 <nm_drv_deinit+0x74>)
  403bb0:	4798      	blx	r3
  403bb2:	e00a      	b.n	403bca <nm_drv_deinit+0x36>
  403bb4:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403bb6:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403bba:	4914      	ldr	r1, [pc, #80]	; (403c0c <nm_drv_deinit+0x78>)
  403bbc:	4814      	ldr	r0, [pc, #80]	; (403c10 <nm_drv_deinit+0x7c>)
  403bbe:	4d15      	ldr	r5, [pc, #84]	; (403c14 <nm_drv_deinit+0x80>)
  403bc0:	47a8      	blx	r5
  403bc2:	4815      	ldr	r0, [pc, #84]	; (403c18 <nm_drv_deinit+0x84>)
  403bc4:	47a8      	blx	r5
  403bc6:	4815      	ldr	r0, [pc, #84]	; (403c1c <nm_drv_deinit+0x88>)
  403bc8:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403bca:	4620      	mov	r0, r4
  403bcc:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  403bce:	f240 127b 	movw	r2, #379	; 0x17b
  403bd2:	490e      	ldr	r1, [pc, #56]	; (403c0c <nm_drv_deinit+0x78>)
  403bd4:	480e      	ldr	r0, [pc, #56]	; (403c10 <nm_drv_deinit+0x7c>)
  403bd6:	4d0f      	ldr	r5, [pc, #60]	; (403c14 <nm_drv_deinit+0x80>)
  403bd8:	47a8      	blx	r5
  403bda:	4811      	ldr	r0, [pc, #68]	; (403c20 <nm_drv_deinit+0x8c>)
  403bdc:	47a8      	blx	r5
  403bde:	480f      	ldr	r0, [pc, #60]	; (403c1c <nm_drv_deinit+0x88>)
  403be0:	47a8      	blx	r5
		goto ERR1;
  403be2:	e7f2      	b.n	403bca <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403be4:	f240 1281 	movw	r2, #385	; 0x181
  403be8:	4908      	ldr	r1, [pc, #32]	; (403c0c <nm_drv_deinit+0x78>)
  403bea:	4809      	ldr	r0, [pc, #36]	; (403c10 <nm_drv_deinit+0x7c>)
  403bec:	4d09      	ldr	r5, [pc, #36]	; (403c14 <nm_drv_deinit+0x80>)
  403bee:	47a8      	blx	r5
  403bf0:	480c      	ldr	r0, [pc, #48]	; (403c24 <nm_drv_deinit+0x90>)
  403bf2:	47a8      	blx	r5
  403bf4:	4809      	ldr	r0, [pc, #36]	; (403c1c <nm_drv_deinit+0x88>)
  403bf6:	47a8      	blx	r5
		goto ERR1;
  403bf8:	e7e7      	b.n	403bca <nm_drv_deinit+0x36>
  403bfa:	bf00      	nop
  403bfc:	0040385d 	.word	0x0040385d
  403c00:	00404c39 	.word	0x00404c39
  403c04:	00403931 	.word	0x00403931
  403c08:	00404185 	.word	0x00404185
  403c0c:	0040d444 	.word	0x0040d444
  403c10:	0040cf24 	.word	0x0040cf24
  403c14:	00406239 	.word	0x00406239
  403c18:	0040d454 	.word	0x0040d454
  403c1c:	0040cf50 	.word	0x0040cf50
  403c20:	0040d474 	.word	0x0040d474
  403c24:	0040d498 	.word	0x0040d498

00403c28 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403c28:	b500      	push	{lr}
  403c2a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403c2c:	2300      	movs	r3, #0
  403c2e:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  403c30:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  403c32:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403c36:	a901      	add	r1, sp, #4
  403c38:	2003      	movs	r0, #3
  403c3a:	4b02      	ldr	r3, [pc, #8]	; (403c44 <nmi_spi_read+0x1c>)
  403c3c:	4798      	blx	r3
}
  403c3e:	b005      	add	sp, #20
  403c40:	f85d fb04 	ldr.w	pc, [sp], #4
  403c44:	004024f9 	.word	0x004024f9

00403c48 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403c4c:	b082      	sub	sp, #8
  403c4e:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  403c50:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403c54:	b2db      	uxtb	r3, r3
  403c56:	2b01      	cmp	r3, #1
  403c58:	d927      	bls.n	403caa <spi_cmd_rsp+0x62>
  403c5a:	28cf      	cmp	r0, #207	; 0xcf
  403c5c:	d025      	beq.n	403caa <spi_cmd_rsp+0x62>
{
  403c5e:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c60:	f04f 0801 	mov.w	r8, #1
  403c64:	4f23      	ldr	r7, [pc, #140]	; (403cf4 <spi_cmd_rsp+0xac>)
  403c66:	4641      	mov	r1, r8
  403c68:	f10d 0007 	add.w	r0, sp, #7
  403c6c:	47b8      	blx	r7
  403c6e:	4606      	mov	r6, r0
  403c70:	bb20      	cbnz	r0, 403cbc <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  403c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403c76:	42ab      	cmp	r3, r5
  403c78:	d02c      	beq.n	403cd4 <spi_cmd_rsp+0x8c>
  403c7a:	1e63      	subs	r3, r4, #1
  403c7c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403c80:	d1f1      	bne.n	403c66 <spi_cmd_rsp+0x1e>
  403c82:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403c84:	2701      	movs	r7, #1
  403c86:	4d1b      	ldr	r5, [pc, #108]	; (403cf4 <spi_cmd_rsp+0xac>)
  403c88:	4639      	mov	r1, r7
  403c8a:	f10d 0007 	add.w	r0, sp, #7
  403c8e:	47a8      	blx	r5
  403c90:	bb10      	cbnz	r0, 403cd8 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  403c92:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403c96:	b353      	cbz	r3, 403cee <spi_cmd_rsp+0xa6>
  403c98:	1e63      	subs	r3, r4, #1
  403c9a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403c9e:	d1f3      	bne.n	403c88 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  403ca0:	2601      	movs	r6, #1

_fail_:

	return result;
}
  403ca2:	4630      	mov	r0, r6
  403ca4:	b002      	add	sp, #8
  403ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403caa:	2101      	movs	r1, #1
  403cac:	f10d 0007 	add.w	r0, sp, #7
  403cb0:	4b10      	ldr	r3, [pc, #64]	; (403cf4 <spi_cmd_rsp+0xac>)
  403cb2:	4798      	blx	r3
  403cb4:	2800      	cmp	r0, #0
  403cb6:	d0d2      	beq.n	403c5e <spi_cmd_rsp+0x16>
			result = N_FAIL;
  403cb8:	2600      	movs	r6, #0
  403cba:	e7f2      	b.n	403ca2 <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403cbc:	f240 1227 	movw	r2, #295	; 0x127
  403cc0:	490d      	ldr	r1, [pc, #52]	; (403cf8 <spi_cmd_rsp+0xb0>)
  403cc2:	480e      	ldr	r0, [pc, #56]	; (403cfc <spi_cmd_rsp+0xb4>)
  403cc4:	4c0e      	ldr	r4, [pc, #56]	; (403d00 <spi_cmd_rsp+0xb8>)
  403cc6:	47a0      	blx	r4
  403cc8:	480e      	ldr	r0, [pc, #56]	; (403d04 <spi_cmd_rsp+0xbc>)
  403cca:	47a0      	blx	r4
  403ccc:	480e      	ldr	r0, [pc, #56]	; (403d08 <spi_cmd_rsp+0xc0>)
  403cce:	47a0      	blx	r4
			result = N_FAIL;
  403cd0:	2600      	movs	r6, #0
			goto _fail_;
  403cd2:	e7e6      	b.n	403ca2 <spi_cmd_rsp+0x5a>
  403cd4:	240b      	movs	r4, #11
  403cd6:	e7d5      	b.n	403c84 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403cd8:	f240 1235 	movw	r2, #309	; 0x135
  403cdc:	4906      	ldr	r1, [pc, #24]	; (403cf8 <spi_cmd_rsp+0xb0>)
  403cde:	4807      	ldr	r0, [pc, #28]	; (403cfc <spi_cmd_rsp+0xb4>)
  403ce0:	4c07      	ldr	r4, [pc, #28]	; (403d00 <spi_cmd_rsp+0xb8>)
  403ce2:	47a0      	blx	r4
  403ce4:	4807      	ldr	r0, [pc, #28]	; (403d04 <spi_cmd_rsp+0xbc>)
  403ce6:	47a0      	blx	r4
  403ce8:	4807      	ldr	r0, [pc, #28]	; (403d08 <spi_cmd_rsp+0xc0>)
  403cea:	47a0      	blx	r4
			goto _fail_;
  403cec:	e7d9      	b.n	403ca2 <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  403cee:	2601      	movs	r6, #1
  403cf0:	e7d7      	b.n	403ca2 <spi_cmd_rsp+0x5a>
  403cf2:	bf00      	nop
  403cf4:	00403c29 	.word	0x00403c29
  403cf8:	0040d508 	.word	0x0040d508
  403cfc:	0040cf24 	.word	0x0040cf24
  403d00:	00406239 	.word	0x00406239
  403d04:	0040d948 	.word	0x0040d948
  403d08:	0040cf50 	.word	0x0040cf50

00403d0c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d10:	b085      	sub	sp, #20
  403d12:	4683      	mov	fp, r0
  403d14:	468a      	mov	sl, r1
  403d16:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403d18:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403d1c:	4d37      	ldr	r5, [pc, #220]	; (403dfc <spi_data_read+0xf0>)
  403d1e:	e027      	b.n	403d70 <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  403d20:	f240 1257 	movw	r2, #343	; 0x157
  403d24:	4936      	ldr	r1, [pc, #216]	; (403e00 <spi_data_read+0xf4>)
  403d26:	4837      	ldr	r0, [pc, #220]	; (403e04 <spi_data_read+0xf8>)
  403d28:	4c37      	ldr	r4, [pc, #220]	; (403e08 <spi_data_read+0xfc>)
  403d2a:	47a0      	blx	r4
  403d2c:	4837      	ldr	r0, [pc, #220]	; (403e0c <spi_data_read+0x100>)
  403d2e:	47a0      	blx	r4
  403d30:	4837      	ldr	r0, [pc, #220]	; (403e10 <spi_data_read+0x104>)
  403d32:	47a0      	blx	r4
  403d34:	2300      	movs	r3, #0
  403d36:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403d38:	9801      	ldr	r0, [sp, #4]
  403d3a:	b005      	add	sp, #20
  403d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  403d40:	2c00      	cmp	r4, #0
  403d42:	dd2e      	ble.n	403da2 <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403d44:	4641      	mov	r1, r8
  403d46:	eb0b 0009 	add.w	r0, fp, r9
  403d4a:	47a8      	blx	r5
  403d4c:	4604      	mov	r4, r0
  403d4e:	2800      	cmp	r0, #0
  403d50:	d134      	bne.n	403dbc <spi_data_read+0xb0>
		if(!clockless)
  403d52:	b91f      	cbnz	r7, 403d5c <spi_data_read+0x50>
			if (!gu8Crc_off) {
  403d54:	4b2f      	ldr	r3, [pc, #188]	; (403e14 <spi_data_read+0x108>)
  403d56:	781b      	ldrb	r3, [r3, #0]
  403d58:	2b00      	cmp	r3, #0
  403d5a:	d03a      	beq.n	403dd2 <spi_data_read+0xc6>
		ix += nbytes;
  403d5c:	44c1      	add	r9, r8
  403d5e:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  403d62:	ebaa 0a08 	sub.w	sl, sl, r8
  403d66:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  403d6a:	f1ba 0f00 	cmp.w	sl, #0
  403d6e:	d041      	beq.n	403df4 <spi_data_read+0xe8>
  403d70:	46d0      	mov	r8, sl
  403d72:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  403d76:	bf28      	it	cs
  403d78:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  403d7c:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403d7e:	2601      	movs	r6, #1
  403d80:	4631      	mov	r1, r6
  403d82:	f10d 000b 	add.w	r0, sp, #11
  403d86:	47a8      	blx	r5
  403d88:	9001      	str	r0, [sp, #4]
  403d8a:	2800      	cmp	r0, #0
  403d8c:	d1c8      	bne.n	403d20 <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  403d8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  403d92:	091b      	lsrs	r3, r3, #4
  403d94:	2b0f      	cmp	r3, #15
  403d96:	d0d3      	beq.n	403d40 <spi_data_read+0x34>
  403d98:	3c01      	subs	r4, #1
  403d9a:	b224      	sxth	r4, r4
		} while (retry--);
  403d9c:	f1b4 3fff 	cmp.w	r4, #4294967295
  403da0:	d1ee      	bne.n	403d80 <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403da2:	f240 1263 	movw	r2, #355	; 0x163
  403da6:	4916      	ldr	r1, [pc, #88]	; (403e00 <spi_data_read+0xf4>)
  403da8:	4816      	ldr	r0, [pc, #88]	; (403e04 <spi_data_read+0xf8>)
  403daa:	4c17      	ldr	r4, [pc, #92]	; (403e08 <spi_data_read+0xfc>)
  403dac:	47a0      	blx	r4
  403dae:	f89d 100b 	ldrb.w	r1, [sp, #11]
  403db2:	4819      	ldr	r0, [pc, #100]	; (403e18 <spi_data_read+0x10c>)
  403db4:	47a0      	blx	r4
  403db6:	4816      	ldr	r0, [pc, #88]	; (403e10 <spi_data_read+0x104>)
  403db8:	47a0      	blx	r4
			break;
  403dba:	e7bd      	b.n	403d38 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403dbc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403dc0:	490f      	ldr	r1, [pc, #60]	; (403e00 <spi_data_read+0xf4>)
  403dc2:	4810      	ldr	r0, [pc, #64]	; (403e04 <spi_data_read+0xf8>)
  403dc4:	4c10      	ldr	r4, [pc, #64]	; (403e08 <spi_data_read+0xfc>)
  403dc6:	47a0      	blx	r4
  403dc8:	4814      	ldr	r0, [pc, #80]	; (403e1c <spi_data_read+0x110>)
  403dca:	47a0      	blx	r4
  403dcc:	4810      	ldr	r0, [pc, #64]	; (403e10 <spi_data_read+0x104>)
  403dce:	47a0      	blx	r4
			break;
  403dd0:	e7b2      	b.n	403d38 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403dd2:	2102      	movs	r1, #2
  403dd4:	a803      	add	r0, sp, #12
  403dd6:	47a8      	blx	r5
  403dd8:	2800      	cmp	r0, #0
  403dda:	d0bf      	beq.n	403d5c <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403ddc:	f240 1277 	movw	r2, #375	; 0x177
  403de0:	4907      	ldr	r1, [pc, #28]	; (403e00 <spi_data_read+0xf4>)
  403de2:	4808      	ldr	r0, [pc, #32]	; (403e04 <spi_data_read+0xf8>)
  403de4:	4d08      	ldr	r5, [pc, #32]	; (403e08 <spi_data_read+0xfc>)
  403de6:	47a8      	blx	r5
  403de8:	480d      	ldr	r0, [pc, #52]	; (403e20 <spi_data_read+0x114>)
  403dea:	47a8      	blx	r5
  403dec:	4808      	ldr	r0, [pc, #32]	; (403e10 <spi_data_read+0x104>)
  403dee:	47a8      	blx	r5
					result = N_FAIL;
  403df0:	9401      	str	r4, [sp, #4]
					break;
  403df2:	e7a1      	b.n	403d38 <spi_data_read+0x2c>
  403df4:	2301      	movs	r3, #1
  403df6:	9301      	str	r3, [sp, #4]
  403df8:	e79e      	b.n	403d38 <spi_data_read+0x2c>
  403dfa:	bf00      	nop
  403dfc:	00403c29 	.word	0x00403c29
  403e00:	0040d514 	.word	0x0040d514
  403e04:	0040cf24 	.word	0x0040cf24
  403e08:	00406239 	.word	0x00406239
  403e0c:	0040d97c 	.word	0x0040d97c
  403e10:	0040cf50 	.word	0x0040cf50
  403e14:	2040c368 	.word	0x2040c368
  403e18:	0040d9b0 	.word	0x0040d9b0
  403e1c:	0040d9e0 	.word	0x0040d9e0
  403e20:	0040da14 	.word	0x0040da14

00403e24 <nmi_spi_write>:
{
  403e24:	b500      	push	{lr}
  403e26:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403e28:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403e2a:	2300      	movs	r3, #0
  403e2c:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403e2e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403e32:	a901      	add	r1, sp, #4
  403e34:	2003      	movs	r0, #3
  403e36:	4b02      	ldr	r3, [pc, #8]	; (403e40 <nmi_spi_write+0x1c>)
  403e38:	4798      	blx	r3
}
  403e3a:	b005      	add	sp, #20
  403e3c:	f85d fb04 	ldr.w	pc, [sp], #4
  403e40:	004024f9 	.word	0x004024f9

00403e44 <spi_cmd>:
{
  403e44:	b570      	push	{r4, r5, r6, lr}
  403e46:	b084      	sub	sp, #16
  403e48:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403e4c:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403e50:	38c1      	subs	r0, #193	; 0xc1
  403e52:	280e      	cmp	r0, #14
  403e54:	f200 80a2 	bhi.w	403f9c <spi_cmd+0x158>
  403e58:	e8df f000 	tbb	[pc, r0]
  403e5c:	19664545 	.word	0x19664545
  403e60:	5454332a 	.word	0x5454332a
  403e64:	a0a0087f 	.word	0xa0a0087f
  403e68:	a0a0      	.short	0xa0a0
  403e6a:	3c          	.byte	0x3c
  403e6b:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  403e6c:	0c0b      	lsrs	r3, r1, #16
  403e6e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403e72:	0a0b      	lsrs	r3, r1, #8
  403e74:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403e78:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403e7c:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  403e7e:	4b55      	ldr	r3, [pc, #340]	; (403fd4 <spi_cmd+0x190>)
  403e80:	781b      	ldrb	r3, [r3, #0]
  403e82:	2b00      	cmp	r3, #0
  403e84:	f000 808c 	beq.w	403fa0 <spi_cmd+0x15c>
			len-=1;
  403e88:	3901      	subs	r1, #1
  403e8a:	b2c9      	uxtb	r1, r1
  403e8c:	e09a      	b.n	403fc4 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  403e8e:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403e92:	b944      	cbnz	r4, 403ea6 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  403e94:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403e98:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403e9c:	2300      	movs	r3, #0
  403e9e:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ea2:	2105      	movs	r1, #5
		break;
  403ea4:	e7eb      	b.n	403e7e <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403eaa:	f88d 3005 	strb.w	r3, [sp, #5]
  403eae:	e7f3      	b.n	403e98 <spi_cmd+0x54>
		bc[1] = 0x00;
  403eb0:	2300      	movs	r3, #0
  403eb2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403eb6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403eba:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ebe:	2105      	movs	r1, #5
		break;
  403ec0:	e7dd      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = 0x00;
  403ec2:	2300      	movs	r3, #0
  403ec4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403ec8:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403ecc:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ed0:	2105      	movs	r1, #5
		break;
  403ed2:	e7d4      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = 0xff;
  403ed4:	23ff      	movs	r3, #255	; 0xff
  403ed6:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403eda:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403ede:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ee2:	2105      	movs	r1, #5
		break;
  403ee4:	e7cb      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403ee6:	0c0a      	lsrs	r2, r1, #16
  403ee8:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403eec:	0a0a      	lsrs	r2, r1, #8
  403eee:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403ef2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403ef6:	0a1a      	lsrs	r2, r3, #8
  403ef8:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403efc:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403f00:	2107      	movs	r1, #7
		break;
  403f02:	e7bc      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403f04:	0c0a      	lsrs	r2, r1, #16
  403f06:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403f0a:	0a0a      	lsrs	r2, r1, #8
  403f0c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403f10:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403f14:	0c1a      	lsrs	r2, r3, #16
  403f16:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403f1a:	0a1a      	lsrs	r2, r3, #8
  403f1c:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403f20:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403f24:	2108      	movs	r1, #8
		break;
  403f26:	e7aa      	b.n	403e7e <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403f28:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403f2c:	b984      	cbnz	r4, 403f50 <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  403f2e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403f32:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403f36:	0e13      	lsrs	r3, r2, #24
  403f38:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403f3c:	0c13      	lsrs	r3, r2, #16
  403f3e:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403f42:	0a13      	lsrs	r3, r2, #8
  403f44:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403f48:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403f4c:	2108      	movs	r1, #8
		break;
  403f4e:	e796      	b.n	403e7e <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403f54:	f88d 3005 	strb.w	r3, [sp, #5]
  403f58:	e7eb      	b.n	403f32 <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403f5a:	0c0b      	lsrs	r3, r1, #16
  403f5c:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403f60:	0a0b      	lsrs	r3, r1, #8
  403f62:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403f66:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403f6a:	0e13      	lsrs	r3, r2, #24
  403f6c:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403f70:	0c13      	lsrs	r3, r2, #16
  403f72:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403f76:	0a13      	lsrs	r3, r2, #8
  403f78:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403f7c:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403f80:	2109      	movs	r1, #9
		break;
  403f82:	e77c      	b.n	403e7e <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403f84:	f44f 7284 	mov.w	r2, #264	; 0x108
  403f88:	4913      	ldr	r1, [pc, #76]	; (403fd8 <spi_cmd+0x194>)
  403f8a:	4814      	ldr	r0, [pc, #80]	; (403fdc <spi_cmd+0x198>)
  403f8c:	4c14      	ldr	r4, [pc, #80]	; (403fe0 <spi_cmd+0x19c>)
  403f8e:	47a0      	blx	r4
  403f90:	4814      	ldr	r0, [pc, #80]	; (403fe4 <spi_cmd+0x1a0>)
  403f92:	47a0      	blx	r4
  403f94:	4814      	ldr	r0, [pc, #80]	; (403fe8 <spi_cmd+0x1a4>)
  403f96:	47a0      	blx	r4
			result = N_FAIL;
  403f98:	2000      	movs	r0, #0
  403f9a:	e019      	b.n	403fd0 <spi_cmd+0x18c>
	switch (cmd) {
  403f9c:	2000      	movs	r0, #0
  403f9e:	e017      	b.n	403fd0 <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403fa0:	1e4e      	subs	r6, r1, #1
  403fa2:	ab01      	add	r3, sp, #4
  403fa4:	199d      	adds	r5, r3, r6
  403fa6:	207f      	movs	r0, #127	; 0x7f
  403fa8:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  403faa:	4c10      	ldr	r4, [pc, #64]	; (403fec <spi_cmd+0x1a8>)
  403fac:	f812 3b01 	ldrb.w	r3, [r2], #1
  403fb0:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403fb4:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  403fb6:	4295      	cmp	r5, r2
  403fb8:	d1f8      	bne.n	403fac <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403fba:	ab04      	add	r3, sp, #16
  403fbc:	441e      	add	r6, r3
  403fbe:	0043      	lsls	r3, r0, #1
  403fc0:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403fc4:	a801      	add	r0, sp, #4
  403fc6:	4b0a      	ldr	r3, [pc, #40]	; (403ff0 <spi_cmd+0x1ac>)
  403fc8:	4798      	blx	r3
  403fca:	2800      	cmp	r0, #0
  403fcc:	d1da      	bne.n	403f84 <spi_cmd+0x140>
  403fce:	2001      	movs	r0, #1
}
  403fd0:	b004      	add	sp, #16
  403fd2:	bd70      	pop	{r4, r5, r6, pc}
  403fd4:	2040c368 	.word	0x2040c368
  403fd8:	0040d500 	.word	0x0040d500
  403fdc:	0040cf24 	.word	0x0040cf24
  403fe0:	00406239 	.word	0x00406239
  403fe4:	0040d91c 	.word	0x0040d91c
  403fe8:	0040cf50 	.word	0x0040cf50
  403fec:	0040d57c 	.word	0x0040d57c
  403ff0:	00403e25 	.word	0x00403e25

00403ff4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403ff4:	b570      	push	{r4, r5, r6, lr}
  403ff6:	b082      	sub	sp, #8
  403ff8:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403ffa:	2831      	cmp	r0, #49	; 0x31
  403ffc:	bf35      	itete	cc
  403ffe:	2301      	movcc	r3, #1
  404000:	2300      	movcs	r3, #0
  404002:	25c3      	movcc	r5, #195	; 0xc3
  404004:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  404006:	9300      	str	r3, [sp, #0]
  404008:	2304      	movs	r3, #4
  40400a:	460a      	mov	r2, r1
  40400c:	4601      	mov	r1, r0
  40400e:	4628      	mov	r0, r5
  404010:	4e15      	ldr	r6, [pc, #84]	; (404068 <spi_write_reg+0x74>)
  404012:	47b0      	blx	r6
	if (result != N_OK) {
  404014:	2801      	cmp	r0, #1
  404016:	d00d      	beq.n	404034 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  404018:	f240 12eb 	movw	r2, #491	; 0x1eb
  40401c:	4913      	ldr	r1, [pc, #76]	; (40406c <spi_write_reg+0x78>)
  40401e:	4814      	ldr	r0, [pc, #80]	; (404070 <spi_write_reg+0x7c>)
  404020:	4d14      	ldr	r5, [pc, #80]	; (404074 <spi_write_reg+0x80>)
  404022:	47a8      	blx	r5
  404024:	4621      	mov	r1, r4
  404026:	4814      	ldr	r0, [pc, #80]	; (404078 <spi_write_reg+0x84>)
  404028:	47a8      	blx	r5
  40402a:	4814      	ldr	r0, [pc, #80]	; (40407c <spi_write_reg+0x88>)
  40402c:	47a8      	blx	r5
		return N_FAIL;
  40402e:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  404030:	b002      	add	sp, #8
  404032:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  404034:	4628      	mov	r0, r5
  404036:	4b12      	ldr	r3, [pc, #72]	; (404080 <spi_write_reg+0x8c>)
  404038:	4798      	blx	r3
	if (result != N_OK) {
  40403a:	2801      	cmp	r0, #1
  40403c:	d0f8      	beq.n	404030 <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  40403e:	f240 12f1 	movw	r2, #497	; 0x1f1
  404042:	490a      	ldr	r1, [pc, #40]	; (40406c <spi_write_reg+0x78>)
  404044:	480a      	ldr	r0, [pc, #40]	; (404070 <spi_write_reg+0x7c>)
  404046:	4d0b      	ldr	r5, [pc, #44]	; (404074 <spi_write_reg+0x80>)
  404048:	47a8      	blx	r5
  40404a:	4621      	mov	r1, r4
  40404c:	480d      	ldr	r0, [pc, #52]	; (404084 <spi_write_reg+0x90>)
  40404e:	47a8      	blx	r5
  404050:	480a      	ldr	r0, [pc, #40]	; (40407c <spi_write_reg+0x88>)
  404052:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404054:	2400      	movs	r4, #0
  404056:	9400      	str	r4, [sp, #0]
  404058:	4623      	mov	r3, r4
  40405a:	4622      	mov	r2, r4
  40405c:	4621      	mov	r1, r4
  40405e:	20cf      	movs	r0, #207	; 0xcf
  404060:	4d01      	ldr	r5, [pc, #4]	; (404068 <spi_write_reg+0x74>)
  404062:	47a8      	blx	r5
		return N_FAIL;
  404064:	4620      	mov	r0, r4
  404066:	e7e3      	b.n	404030 <spi_write_reg+0x3c>
  404068:	00403e45 	.word	0x00403e45
  40406c:	0040d534 	.word	0x0040d534
  404070:	0040cf24 	.word	0x0040cf24
  404074:	00406239 	.word	0x00406239
  404078:	0040dacc 	.word	0x0040dacc
  40407c:	0040cf50 	.word	0x0040cf50
  404080:	00403c49 	.word	0x00403c49
  404084:	0040daf8 	.word	0x0040daf8

00404088 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  404088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40408c:	b084      	sub	sp, #16
  40408e:	4604      	mov	r4, r0
  404090:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  404092:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  404096:	bf35      	itete	cc
  404098:	2601      	movcc	r6, #1
  40409a:	2600      	movcs	r6, #0
  40409c:	25c4      	movcc	r5, #196	; 0xc4
  40409e:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  4040a0:	9600      	str	r6, [sp, #0]
  4040a2:	2304      	movs	r3, #4
  4040a4:	2200      	movs	r2, #0
  4040a6:	4601      	mov	r1, r0
  4040a8:	4628      	mov	r0, r5
  4040aa:	4f2c      	ldr	r7, [pc, #176]	; (40415c <spi_read_reg+0xd4>)
  4040ac:	47b8      	blx	r7
	if (result != N_OK) {
  4040ae:	2801      	cmp	r0, #1
  4040b0:	d00e      	beq.n	4040d0 <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  4040b2:	f240 2245 	movw	r2, #581	; 0x245
  4040b6:	492a      	ldr	r1, [pc, #168]	; (404160 <spi_read_reg+0xd8>)
  4040b8:	482a      	ldr	r0, [pc, #168]	; (404164 <spi_read_reg+0xdc>)
  4040ba:	4d2b      	ldr	r5, [pc, #172]	; (404168 <spi_read_reg+0xe0>)
  4040bc:	47a8      	blx	r5
  4040be:	4621      	mov	r1, r4
  4040c0:	482a      	ldr	r0, [pc, #168]	; (40416c <spi_read_reg+0xe4>)
  4040c2:	47a8      	blx	r5
  4040c4:	482a      	ldr	r0, [pc, #168]	; (404170 <spi_read_reg+0xe8>)
  4040c6:	47a8      	blx	r5
		return N_FAIL;
  4040c8:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  4040ca:	b004      	add	sp, #16
  4040cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  4040d0:	4628      	mov	r0, r5
  4040d2:	4b28      	ldr	r3, [pc, #160]	; (404174 <spi_read_reg+0xec>)
  4040d4:	4798      	blx	r3
	if (result != N_OK) {
  4040d6:	2801      	cmp	r0, #1
  4040d8:	d014      	beq.n	404104 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  4040da:	f240 224b 	movw	r2, #587	; 0x24b
  4040de:	4920      	ldr	r1, [pc, #128]	; (404160 <spi_read_reg+0xd8>)
  4040e0:	4820      	ldr	r0, [pc, #128]	; (404164 <spi_read_reg+0xdc>)
  4040e2:	4d21      	ldr	r5, [pc, #132]	; (404168 <spi_read_reg+0xe0>)
  4040e4:	47a8      	blx	r5
  4040e6:	4621      	mov	r1, r4
  4040e8:	4823      	ldr	r0, [pc, #140]	; (404178 <spi_read_reg+0xf0>)
  4040ea:	47a8      	blx	r5
  4040ec:	4820      	ldr	r0, [pc, #128]	; (404170 <spi_read_reg+0xe8>)
  4040ee:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4040f0:	2400      	movs	r4, #0
  4040f2:	9400      	str	r4, [sp, #0]
  4040f4:	4623      	mov	r3, r4
  4040f6:	4622      	mov	r2, r4
  4040f8:	4621      	mov	r1, r4
  4040fa:	20cf      	movs	r0, #207	; 0xcf
  4040fc:	4d17      	ldr	r5, [pc, #92]	; (40415c <spi_read_reg+0xd4>)
  4040fe:	47a8      	blx	r5
		return N_FAIL;
  404100:	4620      	mov	r0, r4
  404102:	e7e2      	b.n	4040ca <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  404104:	4632      	mov	r2, r6
  404106:	2104      	movs	r1, #4
  404108:	a803      	add	r0, sp, #12
  40410a:	4b1c      	ldr	r3, [pc, #112]	; (40417c <spi_read_reg+0xf4>)
  40410c:	4798      	blx	r3
	if (result != N_OK) {
  40410e:	2801      	cmp	r0, #1
  404110:	d110      	bne.n	404134 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  404112:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  404116:	f89d 300e 	ldrb.w	r3, [sp, #14]
  40411a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  40411c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  404120:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  404124:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  404126:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  40412a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  40412e:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  404132:	e7ca      	b.n	4040ca <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  404134:	f240 2253 	movw	r2, #595	; 0x253
  404138:	4909      	ldr	r1, [pc, #36]	; (404160 <spi_read_reg+0xd8>)
  40413a:	480a      	ldr	r0, [pc, #40]	; (404164 <spi_read_reg+0xdc>)
  40413c:	4c0a      	ldr	r4, [pc, #40]	; (404168 <spi_read_reg+0xe0>)
  40413e:	47a0      	blx	r4
  404140:	480f      	ldr	r0, [pc, #60]	; (404180 <spi_read_reg+0xf8>)
  404142:	47a0      	blx	r4
  404144:	480a      	ldr	r0, [pc, #40]	; (404170 <spi_read_reg+0xe8>)
  404146:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404148:	2400      	movs	r4, #0
  40414a:	9400      	str	r4, [sp, #0]
  40414c:	4623      	mov	r3, r4
  40414e:	4622      	mov	r2, r4
  404150:	4621      	mov	r1, r4
  404152:	20cf      	movs	r0, #207	; 0xcf
  404154:	4d01      	ldr	r5, [pc, #4]	; (40415c <spi_read_reg+0xd4>)
  404156:	47a8      	blx	r5
		return N_FAIL;
  404158:	4620      	mov	r0, r4
  40415a:	e7b6      	b.n	4040ca <spi_read_reg+0x42>
  40415c:	00403e45 	.word	0x00403e45
  404160:	0040d554 	.word	0x0040d554
  404164:	0040cf24 	.word	0x0040cf24
  404168:	00406239 	.word	0x00406239
  40416c:	0040da4c 	.word	0x0040da4c
  404170:	0040cf50 	.word	0x0040cf50
  404174:	00403c49 	.word	0x00403c49
  404178:	0040da78 	.word	0x0040da78
  40417c:	00403d0d 	.word	0x00403d0d
  404180:	0040daac 	.word	0x0040daac

00404184 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  404184:	2000      	movs	r0, #0
  404186:	4b01      	ldr	r3, [pc, #4]	; (40418c <nm_spi_deinit+0x8>)
  404188:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  40418a:	4770      	bx	lr
  40418c:	2040c368 	.word	0x2040c368

00404190 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  404190:	b500      	push	{lr}
  404192:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  404194:	a901      	add	r1, sp, #4
  404196:	4b03      	ldr	r3, [pc, #12]	; (4041a4 <nm_spi_read_reg+0x14>)
  404198:	4798      	blx	r3

	return u32Val;
}
  40419a:	9801      	ldr	r0, [sp, #4]
  40419c:	b003      	add	sp, #12
  40419e:	f85d fb04 	ldr.w	pc, [sp], #4
  4041a2:	bf00      	nop
  4041a4:	00404089 	.word	0x00404089

004041a8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4041a8:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  4041aa:	4b04      	ldr	r3, [pc, #16]	; (4041bc <nm_spi_read_reg_with_ret+0x14>)
  4041ac:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4041ae:	2801      	cmp	r0, #1

	return s8Ret;
}
  4041b0:	bf0c      	ite	eq
  4041b2:	2000      	moveq	r0, #0
  4041b4:	f06f 0005 	mvnne.w	r0, #5
  4041b8:	bd08      	pop	{r3, pc}
  4041ba:	bf00      	nop
  4041bc:	00404089 	.word	0x00404089

004041c0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4041c0:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  4041c2:	4b04      	ldr	r3, [pc, #16]	; (4041d4 <nm_spi_write_reg+0x14>)
  4041c4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4041c6:	2801      	cmp	r0, #1

	return s8Ret;
}
  4041c8:	bf0c      	ite	eq
  4041ca:	2000      	moveq	r0, #0
  4041cc:	f06f 0005 	mvnne.w	r0, #5
  4041d0:	bd08      	pop	{r3, pc}
  4041d2:	bf00      	nop
  4041d4:	00403ff5 	.word	0x00403ff5

004041d8 <nm_spi_init>:
{
  4041d8:	b530      	push	{r4, r5, lr}
  4041da:	b083      	sub	sp, #12
	uint32 reg =0;
  4041dc:	2300      	movs	r3, #0
  4041de:	a902      	add	r1, sp, #8
  4041e0:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  4041e4:	4a34      	ldr	r2, [pc, #208]	; (4042b8 <nm_spi_init+0xe0>)
  4041e6:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  4041e8:	f64e 0024 	movw	r0, #59428	; 0xe824
  4041ec:	4b33      	ldr	r3, [pc, #204]	; (4042bc <nm_spi_init+0xe4>)
  4041ee:	4798      	blx	r3
  4041f0:	b348      	cbz	r0, 404246 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  4041f2:	4b31      	ldr	r3, [pc, #196]	; (4042b8 <nm_spi_init+0xe0>)
  4041f4:	781b      	ldrb	r3, [r3, #0]
  4041f6:	b97b      	cbnz	r3, 404218 <nm_spi_init+0x40>
		reg &= ~0x70;
  4041f8:	9900      	ldr	r1, [sp, #0]
  4041fa:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  4041fe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  404202:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  404204:	f64e 0024 	movw	r0, #59428	; 0xe824
  404208:	4b2d      	ldr	r3, [pc, #180]	; (4042c0 <nm_spi_init+0xe8>)
  40420a:	4798      	blx	r3
  40420c:	4604      	mov	r4, r0
  40420e:	2800      	cmp	r0, #0
  404210:	d039      	beq.n	404286 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  404212:	2201      	movs	r2, #1
  404214:	4b28      	ldr	r3, [pc, #160]	; (4042b8 <nm_spi_init+0xe0>)
  404216:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  404218:	a901      	add	r1, sp, #4
  40421a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40421e:	4b27      	ldr	r3, [pc, #156]	; (4042bc <nm_spi_init+0xe4>)
  404220:	4798      	blx	r3
  404222:	2800      	cmp	r0, #0
  404224:	d03a      	beq.n	40429c <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  404226:	f64e 0024 	movw	r0, #59428	; 0xe824
  40422a:	4b26      	ldr	r3, [pc, #152]	; (4042c4 <nm_spi_init+0xec>)
  40422c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  40422e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  404232:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  404236:	f64e 0024 	movw	r0, #59428	; 0xe824
  40423a:	4b23      	ldr	r3, [pc, #140]	; (4042c8 <nm_spi_init+0xf0>)
  40423c:	4798      	blx	r3
	return M2M_SUCCESS;
  40423e:	2400      	movs	r4, #0
}
  404240:	4620      	mov	r0, r4
  404242:	b003      	add	sp, #12
  404244:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  404246:	2201      	movs	r2, #1
  404248:	4b1b      	ldr	r3, [pc, #108]	; (4042b8 <nm_spi_init+0xe0>)
  40424a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  40424c:	f240 22c5 	movw	r2, #709	; 0x2c5
  404250:	491e      	ldr	r1, [pc, #120]	; (4042cc <nm_spi_init+0xf4>)
  404252:	481f      	ldr	r0, [pc, #124]	; (4042d0 <nm_spi_init+0xf8>)
  404254:	4c1f      	ldr	r4, [pc, #124]	; (4042d4 <nm_spi_init+0xfc>)
  404256:	47a0      	blx	r4
  404258:	481f      	ldr	r0, [pc, #124]	; (4042d8 <nm_spi_init+0x100>)
  40425a:	47a0      	blx	r4
  40425c:	481f      	ldr	r0, [pc, #124]	; (4042dc <nm_spi_init+0x104>)
  40425e:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  404260:	4669      	mov	r1, sp
  404262:	f64e 0024 	movw	r0, #59428	; 0xe824
  404266:	4b15      	ldr	r3, [pc, #84]	; (4042bc <nm_spi_init+0xe4>)
  404268:	4798      	blx	r3
  40426a:	4604      	mov	r4, r0
  40426c:	2800      	cmp	r0, #0
  40426e:	d1c0      	bne.n	4041f2 <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  404270:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  404274:	4915      	ldr	r1, [pc, #84]	; (4042cc <nm_spi_init+0xf4>)
  404276:	4816      	ldr	r0, [pc, #88]	; (4042d0 <nm_spi_init+0xf8>)
  404278:	4d16      	ldr	r5, [pc, #88]	; (4042d4 <nm_spi_init+0xfc>)
  40427a:	47a8      	blx	r5
  40427c:	4818      	ldr	r0, [pc, #96]	; (4042e0 <nm_spi_init+0x108>)
  40427e:	47a8      	blx	r5
  404280:	4816      	ldr	r0, [pc, #88]	; (4042dc <nm_spi_init+0x104>)
  404282:	47a8      	blx	r5
			return 0;
  404284:	e7dc      	b.n	404240 <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  404286:	f240 22d2 	movw	r2, #722	; 0x2d2
  40428a:	4910      	ldr	r1, [pc, #64]	; (4042cc <nm_spi_init+0xf4>)
  40428c:	4810      	ldr	r0, [pc, #64]	; (4042d0 <nm_spi_init+0xf8>)
  40428e:	4d11      	ldr	r5, [pc, #68]	; (4042d4 <nm_spi_init+0xfc>)
  404290:	47a8      	blx	r5
  404292:	4814      	ldr	r0, [pc, #80]	; (4042e4 <nm_spi_init+0x10c>)
  404294:	47a8      	blx	r5
  404296:	4811      	ldr	r0, [pc, #68]	; (4042dc <nm_spi_init+0x104>)
  404298:	47a8      	blx	r5
			return 0;
  40429a:	e7d1      	b.n	404240 <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  40429c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  4042a0:	490a      	ldr	r1, [pc, #40]	; (4042cc <nm_spi_init+0xf4>)
  4042a2:	480b      	ldr	r0, [pc, #44]	; (4042d0 <nm_spi_init+0xf8>)
  4042a4:	4c0b      	ldr	r4, [pc, #44]	; (4042d4 <nm_spi_init+0xfc>)
  4042a6:	47a0      	blx	r4
  4042a8:	480f      	ldr	r0, [pc, #60]	; (4042e8 <nm_spi_init+0x110>)
  4042aa:	47a0      	blx	r4
  4042ac:	480b      	ldr	r0, [pc, #44]	; (4042dc <nm_spi_init+0x104>)
  4042ae:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  4042b0:	f06f 0405 	mvn.w	r4, #5
  4042b4:	e7c4      	b.n	404240 <nm_spi_init+0x68>
  4042b6:	bf00      	nop
  4042b8:	2040c368 	.word	0x2040c368
  4042bc:	00404089 	.word	0x00404089
  4042c0:	00403ff5 	.word	0x00403ff5
  4042c4:	00404191 	.word	0x00404191
  4042c8:	004041c1 	.word	0x004041c1
  4042cc:	0040d570 	.word	0x0040d570
  4042d0:	0040cf24 	.word	0x0040cf24
  4042d4:	00406239 	.word	0x00406239
  4042d8:	0040d67c 	.word	0x0040d67c
  4042dc:	0040cf50 	.word	0x0040cf50
  4042e0:	0040d6cc 	.word	0x0040d6cc
  4042e4:	0040d6fc 	.word	0x0040d6fc
  4042e8:	0040d730 	.word	0x0040d730

004042ec <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4042ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4042ee:	b083      	sub	sp, #12
  4042f0:	4604      	mov	r4, r0
  4042f2:	460f      	mov	r7, r1
  4042f4:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4042f6:	2200      	movs	r2, #0
  4042f8:	9200      	str	r2, [sp, #0]
  4042fa:	462b      	mov	r3, r5
  4042fc:	4601      	mov	r1, r0
  4042fe:	20c8      	movs	r0, #200	; 0xc8
  404300:	4e22      	ldr	r6, [pc, #136]	; (40438c <nm_spi_read_block+0xa0>)
  404302:	47b0      	blx	r6
	if (result != N_OK) {
  404304:	2801      	cmp	r0, #1
  404306:	d00e      	beq.n	404326 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  404308:	f44f 721d 	mov.w	r2, #628	; 0x274
  40430c:	4920      	ldr	r1, [pc, #128]	; (404390 <nm_spi_read_block+0xa4>)
  40430e:	4821      	ldr	r0, [pc, #132]	; (404394 <nm_spi_read_block+0xa8>)
  404310:	4d21      	ldr	r5, [pc, #132]	; (404398 <nm_spi_read_block+0xac>)
  404312:	47a8      	blx	r5
  404314:	4621      	mov	r1, r4
  404316:	4821      	ldr	r0, [pc, #132]	; (40439c <nm_spi_read_block+0xb0>)
  404318:	47a8      	blx	r5
  40431a:	4821      	ldr	r0, [pc, #132]	; (4043a0 <nm_spi_read_block+0xb4>)
  40431c:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  40431e:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404322:	b003      	add	sp, #12
  404324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  404326:	20c8      	movs	r0, #200	; 0xc8
  404328:	4b1e      	ldr	r3, [pc, #120]	; (4043a4 <nm_spi_read_block+0xb8>)
  40432a:	4798      	blx	r3
	if (result != N_OK) {
  40432c:	2801      	cmp	r0, #1
  40432e:	d012      	beq.n	404356 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  404330:	f240 227a 	movw	r2, #634	; 0x27a
  404334:	4916      	ldr	r1, [pc, #88]	; (404390 <nm_spi_read_block+0xa4>)
  404336:	4817      	ldr	r0, [pc, #92]	; (404394 <nm_spi_read_block+0xa8>)
  404338:	4d17      	ldr	r5, [pc, #92]	; (404398 <nm_spi_read_block+0xac>)
  40433a:	47a8      	blx	r5
  40433c:	4621      	mov	r1, r4
  40433e:	481a      	ldr	r0, [pc, #104]	; (4043a8 <nm_spi_read_block+0xbc>)
  404340:	47a8      	blx	r5
  404342:	4817      	ldr	r0, [pc, #92]	; (4043a0 <nm_spi_read_block+0xb4>)
  404344:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404346:	2100      	movs	r1, #0
  404348:	9100      	str	r1, [sp, #0]
  40434a:	460b      	mov	r3, r1
  40434c:	460a      	mov	r2, r1
  40434e:	20cf      	movs	r0, #207	; 0xcf
  404350:	4c0e      	ldr	r4, [pc, #56]	; (40438c <nm_spi_read_block+0xa0>)
  404352:	47a0      	blx	r4
  404354:	e7e3      	b.n	40431e <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  404356:	2200      	movs	r2, #0
  404358:	4629      	mov	r1, r5
  40435a:	4638      	mov	r0, r7
  40435c:	4b13      	ldr	r3, [pc, #76]	; (4043ac <nm_spi_read_block+0xc0>)
  40435e:	4798      	blx	r3
	if (result != N_OK) {
  404360:	2801      	cmp	r0, #1
  404362:	d011      	beq.n	404388 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  404364:	f44f 7221 	mov.w	r2, #644	; 0x284
  404368:	4909      	ldr	r1, [pc, #36]	; (404390 <nm_spi_read_block+0xa4>)
  40436a:	480a      	ldr	r0, [pc, #40]	; (404394 <nm_spi_read_block+0xa8>)
  40436c:	4c0a      	ldr	r4, [pc, #40]	; (404398 <nm_spi_read_block+0xac>)
  40436e:	47a0      	blx	r4
  404370:	480f      	ldr	r0, [pc, #60]	; (4043b0 <nm_spi_read_block+0xc4>)
  404372:	47a0      	blx	r4
  404374:	480a      	ldr	r0, [pc, #40]	; (4043a0 <nm_spi_read_block+0xb4>)
  404376:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404378:	2100      	movs	r1, #0
  40437a:	9100      	str	r1, [sp, #0]
  40437c:	460b      	mov	r3, r1
  40437e:	460a      	mov	r2, r1
  404380:	20cf      	movs	r0, #207	; 0xcf
  404382:	4c02      	ldr	r4, [pc, #8]	; (40438c <nm_spi_read_block+0xa0>)
  404384:	47a0      	blx	r4
  404386:	e7ca      	b.n	40431e <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404388:	2000      	movs	r0, #0
  40438a:	e7ca      	b.n	404322 <nm_spi_read_block+0x36>
  40438c:	00403e45 	.word	0x00403e45
  404390:	0040d564 	.word	0x0040d564
  404394:	0040cf24 	.word	0x0040cf24
  404398:	00406239 	.word	0x00406239
  40439c:	0040d758 	.word	0x0040d758
  4043a0:	0040cf50 	.word	0x0040cf50
  4043a4:	00403c49 	.word	0x00403c49
  4043a8:	0040d788 	.word	0x0040d788
  4043ac:	00403d0d 	.word	0x00403d0d
  4043b0:	0040d7c0 	.word	0x0040d7c0

004043b4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  4043b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4043b8:	b085      	sub	sp, #20
  4043ba:	4604      	mov	r4, r0
  4043bc:	4688      	mov	r8, r1
  4043be:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  4043c0:	2200      	movs	r2, #0
  4043c2:	9200      	str	r2, [sp, #0]
  4043c4:	462b      	mov	r3, r5
  4043c6:	4601      	mov	r1, r0
  4043c8:	20c7      	movs	r0, #199	; 0xc7
  4043ca:	4e4d      	ldr	r6, [pc, #308]	; (404500 <nm_spi_write_block+0x14c>)
  4043cc:	47b0      	blx	r6
	if (result != N_OK) {
  4043ce:	2801      	cmp	r0, #1
  4043d0:	d00f      	beq.n	4043f2 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  4043d2:	f240 220f 	movw	r2, #527	; 0x20f
  4043d6:	494b      	ldr	r1, [pc, #300]	; (404504 <nm_spi_write_block+0x150>)
  4043d8:	484b      	ldr	r0, [pc, #300]	; (404508 <nm_spi_write_block+0x154>)
  4043da:	4d4c      	ldr	r5, [pc, #304]	; (40450c <nm_spi_write_block+0x158>)
  4043dc:	47a8      	blx	r5
  4043de:	4621      	mov	r1, r4
  4043e0:	484b      	ldr	r0, [pc, #300]	; (404510 <nm_spi_write_block+0x15c>)
  4043e2:	47a8      	blx	r5
  4043e4:	484b      	ldr	r0, [pc, #300]	; (404514 <nm_spi_write_block+0x160>)
  4043e6:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  4043e8:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  4043ec:	b005      	add	sp, #20
  4043ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  4043f2:	20c7      	movs	r0, #199	; 0xc7
  4043f4:	4b48      	ldr	r3, [pc, #288]	; (404518 <nm_spi_write_block+0x164>)
  4043f6:	4798      	blx	r3
	if (result != N_OK) {
  4043f8:	2801      	cmp	r0, #1
  4043fa:	d012      	beq.n	404422 <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  4043fc:	f240 2215 	movw	r2, #533	; 0x215
  404400:	4940      	ldr	r1, [pc, #256]	; (404504 <nm_spi_write_block+0x150>)
  404402:	4841      	ldr	r0, [pc, #260]	; (404508 <nm_spi_write_block+0x154>)
  404404:	4d41      	ldr	r5, [pc, #260]	; (40450c <nm_spi_write_block+0x158>)
  404406:	47a8      	blx	r5
  404408:	4621      	mov	r1, r4
  40440a:	4844      	ldr	r0, [pc, #272]	; (40451c <nm_spi_write_block+0x168>)
  40440c:	47a8      	blx	r5
  40440e:	4841      	ldr	r0, [pc, #260]	; (404514 <nm_spi_write_block+0x160>)
  404410:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  404412:	2100      	movs	r1, #0
  404414:	9100      	str	r1, [sp, #0]
  404416:	460b      	mov	r3, r1
  404418:	460a      	mov	r2, r1
  40441a:	20cf      	movs	r0, #207	; 0xcf
  40441c:	4c38      	ldr	r4, [pc, #224]	; (404500 <nm_spi_write_block+0x14c>)
  40441e:	47a0      	blx	r4
  404420:	e7e2      	b.n	4043e8 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  404422:	2400      	movs	r4, #0
  404424:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404428:	4f3d      	ldr	r7, [pc, #244]	; (404520 <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  40442a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 404538 <nm_spi_write_block+0x184>
  40442e:	e01d      	b.n	40446c <nm_spi_write_block+0xb8>
				order = 0x2;
  404430:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404434:	bf94      	ite	ls
  404436:	2303      	movls	r3, #3
  404438:	2302      	movhi	r3, #2
		cmd |= order;
  40443a:	f063 030f 	orn	r3, r3, #15
  40443e:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404442:	2101      	movs	r1, #1
  404444:	f10d 000b 	add.w	r0, sp, #11
  404448:	47b8      	blx	r7
  40444a:	b9e8      	cbnz	r0, 404488 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  40444c:	4631      	mov	r1, r6
  40444e:	eb08 0004 	add.w	r0, r8, r4
  404452:	47b8      	blx	r7
  404454:	2800      	cmp	r0, #0
  404456:	d135      	bne.n	4044c4 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  404458:	f899 3000 	ldrb.w	r3, [r9]
  40445c:	2b00      	cmp	r3, #0
  40445e:	d03c      	beq.n	4044da <nm_spi_write_block+0x126>
		ix += nbytes;
  404460:	4434      	add	r4, r6
  404462:	b224      	sxth	r4, r4
		sz -= nbytes;
  404464:	1bad      	subs	r5, r5, r6
  404466:	b2ad      	uxth	r5, r5
	} while (sz);
  404468:	2d00      	cmp	r5, #0
  40446a:	d046      	beq.n	4044fa <nm_spi_write_block+0x146>
  40446c:	462e      	mov	r6, r5
  40446e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404472:	bf28      	it	cs
  404474:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  404478:	2c00      	cmp	r4, #0
  40447a:	d1d9      	bne.n	404430 <nm_spi_write_block+0x7c>
				order = 0x1;
  40447c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404480:	bf94      	ite	ls
  404482:	2303      	movls	r3, #3
  404484:	2301      	movhi	r3, #1
  404486:	e7d8      	b.n	40443a <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  404488:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  40448c:	4925      	ldr	r1, [pc, #148]	; (404524 <nm_spi_write_block+0x170>)
  40448e:	481e      	ldr	r0, [pc, #120]	; (404508 <nm_spi_write_block+0x154>)
  404490:	4c1e      	ldr	r4, [pc, #120]	; (40450c <nm_spi_write_block+0x158>)
  404492:	47a0      	blx	r4
  404494:	4824      	ldr	r0, [pc, #144]	; (404528 <nm_spi_write_block+0x174>)
  404496:	47a0      	blx	r4
  404498:	481e      	ldr	r0, [pc, #120]	; (404514 <nm_spi_write_block+0x160>)
  40449a:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  40449c:	f240 2226 	movw	r2, #550	; 0x226
  4044a0:	4918      	ldr	r1, [pc, #96]	; (404504 <nm_spi_write_block+0x150>)
  4044a2:	4819      	ldr	r0, [pc, #100]	; (404508 <nm_spi_write_block+0x154>)
  4044a4:	4c19      	ldr	r4, [pc, #100]	; (40450c <nm_spi_write_block+0x158>)
  4044a6:	47a0      	blx	r4
  4044a8:	4820      	ldr	r0, [pc, #128]	; (40452c <nm_spi_write_block+0x178>)
  4044aa:	47a0      	blx	r4
  4044ac:	4819      	ldr	r0, [pc, #100]	; (404514 <nm_spi_write_block+0x160>)
  4044ae:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4044b0:	2400      	movs	r4, #0
  4044b2:	9400      	str	r4, [sp, #0]
  4044b4:	4623      	mov	r3, r4
  4044b6:	4622      	mov	r2, r4
  4044b8:	4621      	mov	r1, r4
  4044ba:	20cf      	movs	r0, #207	; 0xcf
  4044bc:	4d10      	ldr	r5, [pc, #64]	; (404500 <nm_spi_write_block+0x14c>)
  4044be:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4044c0:	4620      	mov	r0, r4
  4044c2:	e793      	b.n	4043ec <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4044c4:	f240 12b1 	movw	r2, #433	; 0x1b1
  4044c8:	4916      	ldr	r1, [pc, #88]	; (404524 <nm_spi_write_block+0x170>)
  4044ca:	480f      	ldr	r0, [pc, #60]	; (404508 <nm_spi_write_block+0x154>)
  4044cc:	4c0f      	ldr	r4, [pc, #60]	; (40450c <nm_spi_write_block+0x158>)
  4044ce:	47a0      	blx	r4
  4044d0:	4817      	ldr	r0, [pc, #92]	; (404530 <nm_spi_write_block+0x17c>)
  4044d2:	47a0      	blx	r4
  4044d4:	480f      	ldr	r0, [pc, #60]	; (404514 <nm_spi_write_block+0x160>)
  4044d6:	47a0      	blx	r4
  4044d8:	e7e0      	b.n	40449c <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4044da:	2102      	movs	r1, #2
  4044dc:	a803      	add	r0, sp, #12
  4044de:	47b8      	blx	r7
  4044e0:	2800      	cmp	r0, #0
  4044e2:	d0bd      	beq.n	404460 <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  4044e4:	f240 12bb 	movw	r2, #443	; 0x1bb
  4044e8:	490e      	ldr	r1, [pc, #56]	; (404524 <nm_spi_write_block+0x170>)
  4044ea:	4807      	ldr	r0, [pc, #28]	; (404508 <nm_spi_write_block+0x154>)
  4044ec:	4c07      	ldr	r4, [pc, #28]	; (40450c <nm_spi_write_block+0x158>)
  4044ee:	47a0      	blx	r4
  4044f0:	4810      	ldr	r0, [pc, #64]	; (404534 <nm_spi_write_block+0x180>)
  4044f2:	47a0      	blx	r4
  4044f4:	4807      	ldr	r0, [pc, #28]	; (404514 <nm_spi_write_block+0x160>)
  4044f6:	47a0      	blx	r4
  4044f8:	e7d0      	b.n	40449c <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4044fa:	2000      	movs	r0, #0
  4044fc:	e776      	b.n	4043ec <nm_spi_write_block+0x38>
  4044fe:	bf00      	nop
  404500:	00403e45 	.word	0x00403e45
  404504:	0040d544 	.word	0x0040d544
  404508:	0040cf24 	.word	0x0040cf24
  40450c:	00406239 	.word	0x00406239
  404510:	0040d7e8 	.word	0x0040d7e8
  404514:	0040cf50 	.word	0x0040cf50
  404518:	00403c49 	.word	0x00403c49
  40451c:	0040d818 	.word	0x0040d818
  404520:	00403e25 	.word	0x00403e25
  404524:	0040d524 	.word	0x0040d524
  404528:	0040d850 	.word	0x0040d850
  40452c:	0040d8f4 	.word	0x0040d8f4
  404530:	0040d888 	.word	0x0040d888
  404534:	0040d8bc 	.word	0x0040d8bc
  404538:	2040c368 	.word	0x2040c368

0040453c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  40453c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404540:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  404544:	b194      	cbz	r4, 40456c <Socket_ReadSocketData+0x30>
  404546:	4681      	mov	r9, r0
  404548:	460e      	mov	r6, r1
  40454a:	4692      	mov	sl, r2
  40454c:	4698      	mov	r8, r3
  40454e:	0103      	lsls	r3, r0, #4
  404550:	4922      	ldr	r1, [pc, #136]	; (4045dc <Socket_ReadSocketData+0xa0>)
  404552:	58cb      	ldr	r3, [r1, r3]
  404554:	b153      	cbz	r3, 40456c <Socket_ReadSocketData+0x30>
  404556:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  40455a:	889b      	ldrh	r3, [r3, #4]
  40455c:	b29b      	uxth	r3, r3
  40455e:	b12b      	cbz	r3, 40456c <Socket_ReadSocketData+0x30>
  404560:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404564:	7a9b      	ldrb	r3, [r3, #10]
  404566:	b2db      	uxtb	r3, r3
  404568:	2b01      	cmp	r3, #1
  40456a:	d001      	beq.n	404570 <Socket_ReadSocketData+0x34>
  40456c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  404570:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  404572:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404576:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4045f4 <Socket_ReadSocketData+0xb8>
  40457a:	e006      	b.n	40458a <Socket_ReadSocketData+0x4e>
  40457c:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  40457e:	2301      	movs	r3, #1
  404580:	e00b      	b.n	40459a <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  404582:	1b64      	subs	r4, r4, r5
  404584:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  404586:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  404588:	b1ec      	cbz	r4, 4045c6 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40458a:	88bb      	ldrh	r3, [r7, #4]
  40458c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  40458e:	b21b      	sxth	r3, r3
  404590:	2b00      	cmp	r3, #0
  404592:	ddf3      	ble.n	40457c <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  404594:	88bd      	ldrh	r5, [r7, #4]
  404596:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  404598:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  40459a:	6839      	ldr	r1, [r7, #0]
  40459c:	462a      	mov	r2, r5
  40459e:	4640      	mov	r0, r8
  4045a0:	47d8      	blx	fp
  4045a2:	b990      	cbnz	r0, 4045ca <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4045a4:	683b      	ldr	r3, [r7, #0]
  4045a6:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4045a8:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4045aa:	88f3      	ldrh	r3, [r6, #6]
  4045ac:	1b5b      	subs	r3, r3, r5
  4045ae:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  4045b0:	4b0b      	ldr	r3, [pc, #44]	; (4045e0 <Socket_ReadSocketData+0xa4>)
  4045b2:	681b      	ldr	r3, [r3, #0]
  4045b4:	2b00      	cmp	r3, #0
  4045b6:	d0e4      	beq.n	404582 <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4045b8:	4b09      	ldr	r3, [pc, #36]	; (4045e0 <Socket_ReadSocketData+0xa4>)
  4045ba:	681b      	ldr	r3, [r3, #0]
  4045bc:	4632      	mov	r2, r6
  4045be:	4651      	mov	r1, sl
  4045c0:	4648      	mov	r0, r9
  4045c2:	4798      	blx	r3
  4045c4:	e7dd      	b.n	404582 <Socket_ReadSocketData+0x46>
  4045c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4045ca:	4806      	ldr	r0, [pc, #24]	; (4045e4 <Socket_ReadSocketData+0xa8>)
  4045cc:	4d06      	ldr	r5, [pc, #24]	; (4045e8 <Socket_ReadSocketData+0xac>)
  4045ce:	47a8      	blx	r5
  4045d0:	4621      	mov	r1, r4
  4045d2:	4806      	ldr	r0, [pc, #24]	; (4045ec <Socket_ReadSocketData+0xb0>)
  4045d4:	47a8      	blx	r5
  4045d6:	4806      	ldr	r0, [pc, #24]	; (4045f0 <Socket_ReadSocketData+0xb4>)
  4045d8:	47a8      	blx	r5
	}
}
  4045da:	e7c7      	b.n	40456c <Socket_ReadSocketData+0x30>
  4045dc:	2040cf60 	.word	0x2040cf60
  4045e0:	2040d010 	.word	0x2040d010
  4045e4:	0040d1f8 	.word	0x0040d1f8
  4045e8:	00406239 	.word	0x00406239
  4045ec:	0040db30 	.word	0x0040db30
  4045f0:	0040cf50 	.word	0x0040cf50
  4045f4:	00402c75 	.word	0x00402c75

004045f8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  4045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4045fa:	b099      	sub	sp, #100	; 0x64
  4045fc:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  4045fe:	2841      	cmp	r0, #65	; 0x41
  404600:	d049      	beq.n	404696 <m2m_ip_cb+0x9e>
  404602:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404604:	2842      	cmp	r0, #66	; 0x42
  404606:	d05f      	beq.n	4046c8 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404608:	2843      	cmp	r0, #67	; 0x43
  40460a:	d075      	beq.n	4046f8 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  40460c:	2844      	cmp	r0, #68	; 0x44
  40460e:	f000 80b0 	beq.w	404772 <m2m_ip_cb+0x17a>
  404612:	284b      	cmp	r0, #75	; 0x4b
  404614:	f000 80ad 	beq.w	404772 <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404618:	284a      	cmp	r0, #74	; 0x4a
  40461a:	f000 80cc 	beq.w	4047b6 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40461e:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  404622:	b2db      	uxtb	r3, r3
  404624:	2b07      	cmp	r3, #7
  404626:	f200 80f4 	bhi.w	404812 <m2m_ip_cb+0x21a>
  40462a:	2285      	movs	r2, #133	; 0x85
  40462c:	fa22 f303 	lsr.w	r3, r2, r3
  404630:	f013 0f01 	tst.w	r3, #1
  404634:	f000 80ed 	beq.w	404812 <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404638:	2848      	cmp	r0, #72	; 0x48
  40463a:	bf14      	ite	ne
  40463c:	2706      	movne	r7, #6
  40463e:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  404640:	2300      	movs	r3, #0
  404642:	2210      	movs	r2, #16
  404644:	a903      	add	r1, sp, #12
  404646:	4620      	mov	r0, r4
  404648:	4e93      	ldr	r6, [pc, #588]	; (404898 <m2m_ip_cb+0x2a0>)
  40464a:	47b0      	blx	r6
  40464c:	2800      	cmp	r0, #0
  40464e:	f040 80b0 	bne.w	4047b2 <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  404652:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  404656:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  40465a:	4a90      	ldr	r2, [pc, #576]	; (40489c <m2m_ip_cb+0x2a4>)
  40465c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404660:	2300      	movs	r3, #0
  404662:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  404664:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  404668:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  40466c:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  404670:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  404674:	9e04      	ldr	r6, [sp, #16]
  404676:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404678:	88d2      	ldrh	r2, [r2, #6]
  40467a:	b292      	uxth	r2, r2
  40467c:	4291      	cmp	r1, r2
  40467e:	f000 80ac 	beq.w	4047da <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  404682:	2d10      	cmp	r5, #16
  404684:	f240 8095 	bls.w	4047b2 <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  404688:	2301      	movs	r3, #1
  40468a:	2200      	movs	r2, #0
  40468c:	4611      	mov	r1, r2
  40468e:	4610      	mov	r0, r2
  404690:	4c81      	ldr	r4, [pc, #516]	; (404898 <m2m_ip_cb+0x2a0>)
  404692:	47a0      	blx	r4
	{
  404694:	e08d      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  404696:	2300      	movs	r3, #0
  404698:	2204      	movs	r2, #4
  40469a:	a907      	add	r1, sp, #28
  40469c:	4620      	mov	r0, r4
  40469e:	4c7e      	ldr	r4, [pc, #504]	; (404898 <m2m_ip_cb+0x2a0>)
  4046a0:	47a0      	blx	r4
  4046a2:	2800      	cmp	r0, #0
  4046a4:	f040 8085 	bne.w	4047b2 <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4046a8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4046ac:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4046b0:	4b7b      	ldr	r3, [pc, #492]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046b2:	681b      	ldr	r3, [r3, #0]
  4046b4:	2b00      	cmp	r3, #0
  4046b6:	d07c      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4046b8:	4b79      	ldr	r3, [pc, #484]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046ba:	681b      	ldr	r3, [r3, #0]
  4046bc:	aa03      	add	r2, sp, #12
  4046be:	2101      	movs	r1, #1
  4046c0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4046c4:	4798      	blx	r3
  4046c6:	e074      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4046c8:	2300      	movs	r3, #0
  4046ca:	2204      	movs	r2, #4
  4046cc:	a907      	add	r1, sp, #28
  4046ce:	4620      	mov	r0, r4
  4046d0:	4c71      	ldr	r4, [pc, #452]	; (404898 <m2m_ip_cb+0x2a0>)
  4046d2:	47a0      	blx	r4
  4046d4:	2800      	cmp	r0, #0
  4046d6:	d16c      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  4046d8:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4046dc:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4046e0:	4b6f      	ldr	r3, [pc, #444]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046e2:	681b      	ldr	r3, [r3, #0]
  4046e4:	2b00      	cmp	r3, #0
  4046e6:	d064      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  4046e8:	4b6d      	ldr	r3, [pc, #436]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4046ea:	681b      	ldr	r3, [r3, #0]
  4046ec:	aa03      	add	r2, sp, #12
  4046ee:	2102      	movs	r1, #2
  4046f0:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4046f4:	4798      	blx	r3
  4046f6:	e05c      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  4046f8:	2300      	movs	r3, #0
  4046fa:	220c      	movs	r2, #12
  4046fc:	eb0d 0102 	add.w	r1, sp, r2
  404700:	4620      	mov	r0, r4
  404702:	4c65      	ldr	r4, [pc, #404]	; (404898 <m2m_ip_cb+0x2a0>)
  404704:	47a0      	blx	r4
  404706:	2800      	cmp	r0, #0
  404708:	d153      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  40470a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40470e:	2b00      	cmp	r3, #0
  404710:	db19      	blt.n	404746 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  404712:	4a62      	ldr	r2, [pc, #392]	; (40489c <m2m_ip_cb+0x2a4>)
  404714:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404718:	2100      	movs	r1, #0
  40471a:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  40471c:	2101      	movs	r1, #1
  40471e:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  404720:	4960      	ldr	r1, [pc, #384]	; (4048a4 <m2m_ip_cb+0x2ac>)
  404722:	880a      	ldrh	r2, [r1, #0]
  404724:	3201      	adds	r2, #1
  404726:	b292      	uxth	r2, r2
  404728:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  40472a:	880a      	ldrh	r2, [r1, #0]
  40472c:	b292      	uxth	r2, r2
  40472e:	b91a      	cbnz	r2, 404738 <m2m_ip_cb+0x140>
					++gu16SessionID;
  404730:	880a      	ldrh	r2, [r1, #0]
  404732:	3201      	adds	r2, #1
  404734:	b292      	uxth	r2, r2
  404736:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404738:	4a5a      	ldr	r2, [pc, #360]	; (4048a4 <m2m_ip_cb+0x2ac>)
  40473a:	8811      	ldrh	r1, [r2, #0]
  40473c:	b289      	uxth	r1, r1
  40473e:	4a57      	ldr	r2, [pc, #348]	; (40489c <m2m_ip_cb+0x2a4>)
  404740:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404744:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  404746:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  40474a:	2302      	movs	r3, #2
  40474c:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  404750:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  404754:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404758:	9b04      	ldr	r3, [sp, #16]
  40475a:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  40475c:	4b50      	ldr	r3, [pc, #320]	; (4048a0 <m2m_ip_cb+0x2a8>)
  40475e:	681b      	ldr	r3, [r3, #0]
  404760:	b33b      	cbz	r3, 4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  404762:	4b4f      	ldr	r3, [pc, #316]	; (4048a0 <m2m_ip_cb+0x2a8>)
  404764:	681b      	ldr	r3, [r3, #0]
  404766:	aa07      	add	r2, sp, #28
  404768:	2104      	movs	r1, #4
  40476a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  40476e:	4798      	blx	r3
  404770:	e01f      	b.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  404772:	2300      	movs	r3, #0
  404774:	2204      	movs	r2, #4
  404776:	a907      	add	r1, sp, #28
  404778:	4620      	mov	r0, r4
  40477a:	4c47      	ldr	r4, [pc, #284]	; (404898 <m2m_ip_cb+0x2a0>)
  40477c:	47a0      	blx	r4
  40477e:	b9c0      	cbnz	r0, 4047b2 <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  404780:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404784:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  404788:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  40478c:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  404790:	b93b      	cbnz	r3, 4047a2 <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  404792:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404796:	3b08      	subs	r3, #8
  404798:	b29b      	uxth	r3, r3
  40479a:	4a40      	ldr	r2, [pc, #256]	; (40489c <m2m_ip_cb+0x2a4>)
  40479c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4047a0:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4047a2:	4b3f      	ldr	r3, [pc, #252]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047a4:	681b      	ldr	r3, [r3, #0]
  4047a6:	b123      	cbz	r3, 4047b2 <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4047a8:	4b3d      	ldr	r3, [pc, #244]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047aa:	681b      	ldr	r3, [r3, #0]
  4047ac:	aa03      	add	r2, sp, #12
  4047ae:	2105      	movs	r1, #5
  4047b0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4047b2:	b019      	add	sp, #100	; 0x64
  4047b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4047b6:	2300      	movs	r3, #0
  4047b8:	2244      	movs	r2, #68	; 0x44
  4047ba:	a907      	add	r1, sp, #28
  4047bc:	4620      	mov	r0, r4
  4047be:	4c36      	ldr	r4, [pc, #216]	; (404898 <m2m_ip_cb+0x2a0>)
  4047c0:	47a0      	blx	r4
  4047c2:	2800      	cmp	r0, #0
  4047c4:	d1f5      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  4047c6:	4b38      	ldr	r3, [pc, #224]	; (4048a8 <m2m_ip_cb+0x2b0>)
  4047c8:	681b      	ldr	r3, [r3, #0]
  4047ca:	2b00      	cmp	r3, #0
  4047cc:	d0f1      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  4047ce:	4b36      	ldr	r3, [pc, #216]	; (4048a8 <m2m_ip_cb+0x2b0>)
  4047d0:	681b      	ldr	r3, [r3, #0]
  4047d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4047d4:	a807      	add	r0, sp, #28
  4047d6:	4798      	blx	r3
  4047d8:	e7eb      	b.n	4047b2 <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4047da:	f1be 0f00 	cmp.w	lr, #0
  4047de:	dd01      	ble.n	4047e4 <m2m_ip_cb+0x1ec>
  4047e0:	45ae      	cmp	lr, r5
  4047e2:	db0d      	blt.n	404800 <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  4047e4:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  4047e8:	2300      	movs	r3, #0
  4047ea:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  4047ec:	4b2c      	ldr	r3, [pc, #176]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047ee:	681b      	ldr	r3, [r3, #0]
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	d0de      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  4047f4:	4b2a      	ldr	r3, [pc, #168]	; (4048a0 <m2m_ip_cb+0x2a8>)
  4047f6:	681b      	ldr	r3, [r3, #0]
  4047f8:	aa07      	add	r2, sp, #28
  4047fa:	4639      	mov	r1, r7
  4047fc:	4798      	blx	r3
  4047fe:	e7d8      	b.n	4047b2 <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  404800:	fa1f f28e 	uxth.w	r2, lr
  404804:	9200      	str	r2, [sp, #0]
  404806:	4423      	add	r3, r4
  404808:	463a      	mov	r2, r7
  40480a:	a907      	add	r1, sp, #28
  40480c:	4c27      	ldr	r4, [pc, #156]	; (4048ac <m2m_ip_cb+0x2b4>)
  40480e:	47a0      	blx	r4
  404810:	e7cf      	b.n	4047b2 <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  404812:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404816:	2b45      	cmp	r3, #69	; 0x45
  404818:	d019      	beq.n	40484e <m2m_ip_cb+0x256>
  40481a:	284c      	cmp	r0, #76	; 0x4c
  40481c:	d017      	beq.n	40484e <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40481e:	2852      	cmp	r0, #82	; 0x52
  404820:	d1c7      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  404822:	2301      	movs	r3, #1
  404824:	2214      	movs	r2, #20
  404826:	a907      	add	r1, sp, #28
  404828:	4620      	mov	r0, r4
  40482a:	4c1b      	ldr	r4, [pc, #108]	; (404898 <m2m_ip_cb+0x2a0>)
  40482c:	47a0      	blx	r4
  40482e:	2800      	cmp	r0, #0
  404830:	d1bf      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  404832:	4b1f      	ldr	r3, [pc, #124]	; (4048b0 <m2m_ip_cb+0x2b8>)
  404834:	9a08      	ldr	r2, [sp, #32]
  404836:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404838:	681b      	ldr	r3, [r3, #0]
  40483a:	2b00      	cmp	r3, #0
  40483c:	d0b9      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40483e:	4b1c      	ldr	r3, [pc, #112]	; (4048b0 <m2m_ip_cb+0x2b8>)
  404840:	681b      	ldr	r3, [r3, #0]
  404842:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  404846:	9909      	ldr	r1, [sp, #36]	; 0x24
  404848:	9807      	ldr	r0, [sp, #28]
  40484a:	4798      	blx	r3
}
  40484c:	e7b1      	b.n	4047b2 <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40484e:	2847      	cmp	r0, #71	; 0x47
  404850:	bf14      	ite	ne
  404852:	2507      	movne	r5, #7
  404854:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404856:	2300      	movs	r3, #0
  404858:	2208      	movs	r2, #8
  40485a:	a907      	add	r1, sp, #28
  40485c:	4620      	mov	r0, r4
  40485e:	4c0e      	ldr	r4, [pc, #56]	; (404898 <m2m_ip_cb+0x2a0>)
  404860:	47a0      	blx	r4
  404862:	2800      	cmp	r0, #0
  404864:	d1a5      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  404866:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  40486a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40486e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404872:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404876:	4b09      	ldr	r3, [pc, #36]	; (40489c <m2m_ip_cb+0x2a4>)
  404878:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40487c:	88db      	ldrh	r3, [r3, #6]
  40487e:	b29b      	uxth	r3, r3
  404880:	429a      	cmp	r2, r3
  404882:	d196      	bne.n	4047b2 <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  404884:	4b06      	ldr	r3, [pc, #24]	; (4048a0 <m2m_ip_cb+0x2a8>)
  404886:	681b      	ldr	r3, [r3, #0]
  404888:	2b00      	cmp	r3, #0
  40488a:	d092      	beq.n	4047b2 <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  40488c:	4b04      	ldr	r3, [pc, #16]	; (4048a0 <m2m_ip_cb+0x2a8>)
  40488e:	681b      	ldr	r3, [r3, #0]
  404890:	aa03      	add	r2, sp, #12
  404892:	4629      	mov	r1, r5
  404894:	4798      	blx	r3
	{
  404896:	e78c      	b.n	4047b2 <m2m_ip_cb+0x1ba>
  404898:	00402c75 	.word	0x00402c75
  40489c:	2040cf60 	.word	0x2040cf60
  4048a0:	2040d010 	.word	0x2040d010
  4048a4:	2040c36a 	.word	0x2040c36a
  4048a8:	2040d018 	.word	0x2040d018
  4048ac:	0040453d 	.word	0x0040453d
  4048b0:	2040d014 	.word	0x2040d014

004048b4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4048b4:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4048b6:	4b0a      	ldr	r3, [pc, #40]	; (4048e0 <socketInit+0x2c>)
  4048b8:	781b      	ldrb	r3, [r3, #0]
  4048ba:	b103      	cbz	r3, 4048be <socketInit+0xa>
  4048bc:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4048be:	22b0      	movs	r2, #176	; 0xb0
  4048c0:	2100      	movs	r1, #0
  4048c2:	4808      	ldr	r0, [pc, #32]	; (4048e4 <socketInit+0x30>)
  4048c4:	4b08      	ldr	r3, [pc, #32]	; (4048e8 <socketInit+0x34>)
  4048c6:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4048c8:	4908      	ldr	r1, [pc, #32]	; (4048ec <socketInit+0x38>)
  4048ca:	2002      	movs	r0, #2
  4048cc:	4b08      	ldr	r3, [pc, #32]	; (4048f0 <socketInit+0x3c>)
  4048ce:	4798      	blx	r3
		gbSocketInit=1;
  4048d0:	2201      	movs	r2, #1
  4048d2:	4b03      	ldr	r3, [pc, #12]	; (4048e0 <socketInit+0x2c>)
  4048d4:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4048d6:	2200      	movs	r2, #0
  4048d8:	4b06      	ldr	r3, [pc, #24]	; (4048f4 <socketInit+0x40>)
  4048da:	801a      	strh	r2, [r3, #0]
	}
}
  4048dc:	e7ee      	b.n	4048bc <socketInit+0x8>
  4048de:	bf00      	nop
  4048e0:	2040c369 	.word	0x2040c369
  4048e4:	2040cf60 	.word	0x2040cf60
  4048e8:	00402621 	.word	0x00402621
  4048ec:	004045f9 	.word	0x004045f9
  4048f0:	00402d89 	.word	0x00402d89
  4048f4:	2040c36a 	.word	0x2040c36a

004048f8 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  4048f8:	4b02      	ldr	r3, [pc, #8]	; (404904 <registerSocketCallback+0xc>)
  4048fa:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  4048fc:	4b02      	ldr	r3, [pc, #8]	; (404908 <registerSocketCallback+0x10>)
  4048fe:	6019      	str	r1, [r3, #0]
  404900:	4770      	bx	lr
  404902:	bf00      	nop
  404904:	2040d010 	.word	0x2040d010
  404908:	2040d018 	.word	0x2040d018

0040490c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  40490c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40490e:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  404910:	2802      	cmp	r0, #2
  404912:	d158      	bne.n	4049c6 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404914:	2901      	cmp	r1, #1
  404916:	d059      	beq.n	4049cc <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404918:	2902      	cmp	r1, #2
  40491a:	d116      	bne.n	40494a <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  40491c:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40491e:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  404920:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  404922:	4b2e      	ldr	r3, [pc, #184]	; (4049dc <socket+0xd0>)
  404924:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404928:	7a9b      	ldrb	r3, [r3, #10]
  40492a:	2b00      	cmp	r3, #0
  40492c:	d051      	beq.n	4049d2 <socket+0xc6>
  40492e:	1c63      	adds	r3, r4, #1
  404930:	b2db      	uxtb	r3, r3
  404932:	4f2a      	ldr	r7, [pc, #168]	; (4049dc <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404934:	b2dc      	uxtb	r4, r3
  404936:	42b4      	cmp	r4, r6
  404938:	d240      	bcs.n	4049bc <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  40493a:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  40493c:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  404940:	7a89      	ldrb	r1, [r1, #10]
  404942:	1c58      	adds	r0, r3, #1
  404944:	b121      	cbz	r1, 404950 <socket+0x44>
  404946:	4603      	mov	r3, r0
  404948:	e7f4      	b.n	404934 <socket+0x28>
			return sock;
  40494a:	f04f 34ff 	mov.w	r4, #4294967295
  40494e:	e037      	b.n	4049c0 <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  404950:	4822      	ldr	r0, [pc, #136]	; (4049dc <socket+0xd0>)
  404952:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  404956:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404958:	2210      	movs	r2, #16
  40495a:	2100      	movs	r1, #0
  40495c:	4b20      	ldr	r3, [pc, #128]	; (4049e0 <socket+0xd4>)
  40495e:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  404960:	4b1e      	ldr	r3, [pc, #120]	; (4049dc <socket+0xd0>)
  404962:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404966:	2201      	movs	r2, #1
  404968:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  40496a:	4a1e      	ldr	r2, [pc, #120]	; (4049e4 <socket+0xd8>)
  40496c:	8813      	ldrh	r3, [r2, #0]
  40496e:	3301      	adds	r3, #1
  404970:	b29b      	uxth	r3, r3
  404972:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  404974:	8813      	ldrh	r3, [r2, #0]
  404976:	b29b      	uxth	r3, r3
  404978:	b91b      	cbnz	r3, 404982 <socket+0x76>
					++gu16SessionID;
  40497a:	8813      	ldrh	r3, [r2, #0]
  40497c:	3301      	adds	r3, #1
  40497e:	b29b      	uxth	r3, r3
  404980:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  404982:	4b18      	ldr	r3, [pc, #96]	; (4049e4 <socket+0xd8>)
  404984:	881a      	ldrh	r2, [r3, #0]
  404986:	b292      	uxth	r2, r2
  404988:	4b14      	ldr	r3, [pc, #80]	; (4049dc <socket+0xd0>)
  40498a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  40498e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  404990:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  404992:	f016 0f01 	tst.w	r6, #1
  404996:	d013      	beq.n	4049c0 <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  404998:	aa06      	add	r2, sp, #24
  40499a:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40499e:	4b0f      	ldr	r3, [pc, #60]	; (4049dc <socket+0xd0>)
  4049a0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4049a4:	2321      	movs	r3, #33	; 0x21
  4049a6:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4049a8:	2300      	movs	r3, #0
  4049aa:	9302      	str	r3, [sp, #8]
  4049ac:	9301      	str	r3, [sp, #4]
  4049ae:	9300      	str	r3, [sp, #0]
  4049b0:	2304      	movs	r3, #4
  4049b2:	2150      	movs	r1, #80	; 0x50
  4049b4:	2002      	movs	r0, #2
  4049b6:	4d0c      	ldr	r5, [pc, #48]	; (4049e8 <socket+0xdc>)
  4049b8:	47a8      	blx	r5
  4049ba:	e001      	b.n	4049c0 <socket+0xb4>
	SOCKET		sock = -1;
  4049bc:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  4049c0:	4620      	mov	r0, r4
  4049c2:	b007      	add	sp, #28
  4049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  4049c6:	f04f 34ff 	mov.w	r4, #4294967295
  4049ca:	e7f9      	b.n	4049c0 <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  4049cc:	2607      	movs	r6, #7
			u8Count = 0;
  4049ce:	2400      	movs	r4, #0
  4049d0:	e7a6      	b.n	404920 <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  4049d2:	4802      	ldr	r0, [pc, #8]	; (4049dc <socket+0xd0>)
  4049d4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4049d8:	e7bd      	b.n	404956 <socket+0x4a>
  4049da:	bf00      	nop
  4049dc:	2040cf60 	.word	0x2040cf60
  4049e0:	00402621 	.word	0x00402621
  4049e4:	2040c36a 	.word	0x2040c36a
  4049e8:	00402785 	.word	0x00402785

004049ec <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  4049ec:	b530      	push	{r4, r5, lr}
  4049ee:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  4049f0:	1e04      	subs	r4, r0, #0
  4049f2:	db36      	blt.n	404a62 <connect+0x76>
  4049f4:	2900      	cmp	r1, #0
  4049f6:	d034      	beq.n	404a62 <connect+0x76>
  4049f8:	4b1d      	ldr	r3, [pc, #116]	; (404a70 <connect+0x84>)
  4049fa:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4049fe:	7a9b      	ldrb	r3, [r3, #10]
  404a00:	b2db      	uxtb	r3, r3
  404a02:	2a00      	cmp	r2, #0
  404a04:	d030      	beq.n	404a68 <connect+0x7c>
  404a06:	2b01      	cmp	r3, #1
  404a08:	d12e      	bne.n	404a68 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404a0a:	4b19      	ldr	r3, [pc, #100]	; (404a70 <connect+0x84>)
  404a0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404a10:	7adb      	ldrb	r3, [r3, #11]
  404a12:	f013 0f01 	tst.w	r3, #1
  404a16:	d022      	beq.n	404a5e <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404a18:	4b15      	ldr	r3, [pc, #84]	; (404a70 <connect+0x84>)
  404a1a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404a1e:	7adb      	ldrb	r3, [r3, #11]
  404a20:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404a24:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404a26:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404a2a:	2208      	movs	r2, #8
  404a2c:	a805      	add	r0, sp, #20
  404a2e:	4b11      	ldr	r3, [pc, #68]	; (404a74 <connect+0x88>)
  404a30:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  404a32:	480f      	ldr	r0, [pc, #60]	; (404a70 <connect+0x84>)
  404a34:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404a38:	88c3      	ldrh	r3, [r0, #6]
  404a3a:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  404a3e:	2300      	movs	r3, #0
  404a40:	9302      	str	r3, [sp, #8]
  404a42:	9301      	str	r3, [sp, #4]
  404a44:	9300      	str	r3, [sp, #0]
  404a46:	230c      	movs	r3, #12
  404a48:	aa05      	add	r2, sp, #20
  404a4a:	4629      	mov	r1, r5
  404a4c:	2002      	movs	r0, #2
  404a4e:	4c0a      	ldr	r4, [pc, #40]	; (404a78 <connect+0x8c>)
  404a50:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404a52:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404a54:	bf18      	it	ne
  404a56:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  404a5a:	b009      	add	sp, #36	; 0x24
  404a5c:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  404a5e:	2544      	movs	r5, #68	; 0x44
  404a60:	e7e1      	b.n	404a26 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404a62:	f06f 0005 	mvn.w	r0, #5
  404a66:	e7f8      	b.n	404a5a <connect+0x6e>
  404a68:	f06f 0005 	mvn.w	r0, #5
  404a6c:	e7f5      	b.n	404a5a <connect+0x6e>
  404a6e:	bf00      	nop
  404a70:	2040cf60 	.word	0x2040cf60
  404a74:	0040260d 	.word	0x0040260d
  404a78:	00402785 	.word	0x00402785

00404a7c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  404a7c:	b530      	push	{r4, r5, lr}
  404a7e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  404a80:	460c      	mov	r4, r1
  404a82:	3100      	adds	r1, #0
  404a84:	bf18      	it	ne
  404a86:	2101      	movne	r1, #1
  404a88:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  404a8c:	bf88      	it	hi
  404a8e:	2100      	movhi	r1, #0
  404a90:	2900      	cmp	r1, #0
  404a92:	d037      	beq.n	404b04 <send+0x88>
  404a94:	2800      	cmp	r0, #0
  404a96:	db35      	blt.n	404b04 <send+0x88>
  404a98:	4b1d      	ldr	r3, [pc, #116]	; (404b10 <send+0x94>)
  404a9a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404a9e:	7a9b      	ldrb	r3, [r3, #10]
  404aa0:	b2db      	uxtb	r3, r3
  404aa2:	2b01      	cmp	r3, #1
  404aa4:	d131      	bne.n	404b0a <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404aa6:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404aaa:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  404aae:	4b18      	ldr	r3, [pc, #96]	; (404b10 <send+0x94>)
  404ab0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404ab4:	88db      	ldrh	r3, [r3, #6]
  404ab6:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404aba:	2807      	cmp	r0, #7
  404abc:	bfb4      	ite	lt
  404abe:	2550      	movlt	r5, #80	; 0x50
  404ac0:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404ac2:	4b13      	ldr	r3, [pc, #76]	; (404b10 <send+0x94>)
  404ac4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404ac8:	7adb      	ldrb	r3, [r3, #11]
  404aca:	f013 0f01 	tst.w	r3, #1
  404ace:	d017      	beq.n	404b00 <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  404ad0:	4b0f      	ldr	r3, [pc, #60]	; (404b10 <send+0x94>)
  404ad2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404ad6:	8905      	ldrh	r5, [r0, #8]
  404ad8:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404ada:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404adc:	9502      	str	r5, [sp, #8]
  404ade:	9201      	str	r2, [sp, #4]
  404ae0:	9400      	str	r4, [sp, #0]
  404ae2:	2310      	movs	r3, #16
  404ae4:	eb0d 0203 	add.w	r2, sp, r3
  404ae8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404aec:	2002      	movs	r0, #2
  404aee:	4c09      	ldr	r4, [pc, #36]	; (404b14 <send+0x98>)
  404af0:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  404af2:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404af4:	bf0c      	ite	eq
  404af6:	2000      	moveq	r0, #0
  404af8:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404afc:	b009      	add	sp, #36	; 0x24
  404afe:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  404b00:	2145      	movs	r1, #69	; 0x45
  404b02:	e7eb      	b.n	404adc <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b04:	f06f 0005 	mvn.w	r0, #5
  404b08:	e7f8      	b.n	404afc <send+0x80>
  404b0a:	f06f 0005 	mvn.w	r0, #5
  404b0e:	e7f5      	b.n	404afc <send+0x80>
  404b10:	2040cf60 	.word	0x2040cf60
  404b14:	00402785 	.word	0x00402785

00404b18 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404b18:	2900      	cmp	r1, #0
  404b1a:	bf18      	it	ne
  404b1c:	2a00      	cmpne	r2, #0
  404b1e:	d044      	beq.n	404baa <recv+0x92>
{
  404b20:	b570      	push	{r4, r5, r6, lr}
  404b22:	b086      	sub	sp, #24
  404b24:	460e      	mov	r6, r1
  404b26:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404b28:	2800      	cmp	r0, #0
  404b2a:	db36      	blt.n	404b9a <recv+0x82>
  404b2c:	4a20      	ldr	r2, [pc, #128]	; (404bb0 <recv+0x98>)
  404b2e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  404b32:	7a92      	ldrb	r2, [r2, #10]
  404b34:	b2d2      	uxtb	r2, r2
  404b36:	2a01      	cmp	r2, #1
  404b38:	d132      	bne.n	404ba0 <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404b3a:	4c1d      	ldr	r4, [pc, #116]	; (404bb0 <recv+0x98>)
  404b3c:	0101      	lsls	r1, r0, #4
  404b3e:	1862      	adds	r2, r4, r1
  404b40:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  404b42:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404b44:	7b12      	ldrb	r2, [r2, #12]
  404b46:	2a00      	cmp	r2, #0
  404b48:	d12d      	bne.n	404ba6 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404b4a:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  404b4e:	2101      	movs	r1, #1
  404b50:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404b52:	7ad2      	ldrb	r2, [r2, #11]
  404b54:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404b56:	2a00      	cmp	r2, #0
  404b58:	bf0c      	ite	eq
  404b5a:	2146      	moveq	r1, #70	; 0x46
  404b5c:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  404b5e:	b9d3      	cbnz	r3, 404b96 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  404b60:	f04f 33ff 	mov.w	r3, #4294967295
  404b64:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  404b66:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404b6a:	4b11      	ldr	r3, [pc, #68]	; (404bb0 <recv+0x98>)
  404b6c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404b70:	88c3      	ldrh	r3, [r0, #6]
  404b72:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404b76:	2300      	movs	r3, #0
  404b78:	9302      	str	r3, [sp, #8]
  404b7a:	9301      	str	r3, [sp, #4]
  404b7c:	9300      	str	r3, [sp, #0]
  404b7e:	2308      	movs	r3, #8
  404b80:	aa04      	add	r2, sp, #16
  404b82:	2002      	movs	r0, #2
  404b84:	4c0b      	ldr	r4, [pc, #44]	; (404bb4 <recv+0x9c>)
  404b86:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  404b88:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  404b8a:	bf0c      	ite	eq
  404b8c:	2000      	moveq	r0, #0
  404b8e:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  404b92:	b006      	add	sp, #24
  404b94:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404b96:	9304      	str	r3, [sp, #16]
  404b98:	e7e5      	b.n	404b66 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404b9a:	f06f 0005 	mvn.w	r0, #5
  404b9e:	e7f8      	b.n	404b92 <recv+0x7a>
  404ba0:	f06f 0005 	mvn.w	r0, #5
  404ba4:	e7f5      	b.n	404b92 <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  404ba6:	2000      	movs	r0, #0
  404ba8:	e7f3      	b.n	404b92 <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404baa:	f06f 0005 	mvn.w	r0, #5
}
  404bae:	4770      	bx	lr
  404bb0:	2040cf60 	.word	0x2040cf60
  404bb4:	00402785 	.word	0x00402785

00404bb8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404bb8:	b530      	push	{r4, r5, lr}
  404bba:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404bbc:	1e04      	subs	r4, r0, #0
  404bbe:	db2f      	blt.n	404c20 <close+0x68>
  404bc0:	4b1a      	ldr	r3, [pc, #104]	; (404c2c <close+0x74>)
  404bc2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404bc6:	7a9b      	ldrb	r3, [r3, #10]
  404bc8:	b2db      	uxtb	r3, r3
  404bca:	2b01      	cmp	r3, #1
  404bcc:	d12b      	bne.n	404c26 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  404bce:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  404bd2:	4b16      	ldr	r3, [pc, #88]	; (404c2c <close+0x74>)
  404bd4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404bd8:	88da      	ldrh	r2, [r3, #6]
  404bda:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  404bde:	2200      	movs	r2, #0
  404be0:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  404be2:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404be4:	7adb      	ldrb	r3, [r3, #11]
  404be6:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404bea:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404bec:	9202      	str	r2, [sp, #8]
  404bee:	9201      	str	r2, [sp, #4]
  404bf0:	9200      	str	r2, [sp, #0]
  404bf2:	f04f 0304 	mov.w	r3, #4
  404bf6:	aa05      	add	r2, sp, #20
  404bf8:	bf0c      	ite	eq
  404bfa:	2149      	moveq	r1, #73	; 0x49
  404bfc:	214e      	movne	r1, #78	; 0x4e
  404bfe:	2002      	movs	r0, #2
  404c00:	4d0b      	ldr	r5, [pc, #44]	; (404c30 <close+0x78>)
  404c02:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404c04:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404c06:	bf18      	it	ne
  404c08:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404c0c:	2210      	movs	r2, #16
  404c0e:	2100      	movs	r1, #0
  404c10:	4806      	ldr	r0, [pc, #24]	; (404c2c <close+0x74>)
  404c12:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404c16:	4b07      	ldr	r3, [pc, #28]	; (404c34 <close+0x7c>)
  404c18:	4798      	blx	r3
	}
	return s8Ret;
}
  404c1a:	4628      	mov	r0, r5
  404c1c:	b007      	add	sp, #28
  404c1e:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  404c20:	f06f 0505 	mvn.w	r5, #5
  404c24:	e7f9      	b.n	404c1a <close+0x62>
  404c26:	f06f 0505 	mvn.w	r5, #5
  404c2a:	e7f6      	b.n	404c1a <close+0x62>
  404c2c:	2040cf60 	.word	0x2040cf60
  404c30:	00402785 	.word	0x00402785
  404c34:	00402621 	.word	0x00402621

00404c38 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404c38:	b570      	push	{r4, r5, r6, lr}
  404c3a:	b082      	sub	sp, #8
  404c3c:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  404c3e:	4b2b      	ldr	r3, [pc, #172]	; (404cec <spi_flash_enable+0xb4>)
  404c40:	4798      	blx	r3
  404c42:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404c46:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404c4a:	d203      	bcs.n	404c54 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  404c4c:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  404c4e:	4620      	mov	r0, r4
  404c50:	b002      	add	sp, #8
  404c52:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404c54:	a901      	add	r1, sp, #4
  404c56:	f241 4010 	movw	r0, #5136	; 0x1410
  404c5a:	4b25      	ldr	r3, [pc, #148]	; (404cf0 <spi_flash_enable+0xb8>)
  404c5c:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  404c5e:	4604      	mov	r4, r0
  404c60:	2800      	cmp	r0, #0
  404c62:	d1f4      	bne.n	404c4e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  404c64:	4b23      	ldr	r3, [pc, #140]	; (404cf4 <spi_flash_enable+0xbc>)
  404c66:	9a01      	ldr	r2, [sp, #4]
  404c68:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  404c6a:	4923      	ldr	r1, [pc, #140]	; (404cf8 <spi_flash_enable+0xc0>)
  404c6c:	4319      	orrs	r1, r3
  404c6e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404c70:	f241 4010 	movw	r0, #5136	; 0x1410
  404c74:	4b21      	ldr	r3, [pc, #132]	; (404cfc <spi_flash_enable+0xc4>)
  404c76:	4798      	blx	r3
		if(enable) {
  404c78:	b305      	cbz	r5, 404cbc <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404c7a:	2100      	movs	r1, #0
  404c7c:	4820      	ldr	r0, [pc, #128]	; (404d00 <spi_flash_enable+0xc8>)
  404c7e:	4d1f      	ldr	r5, [pc, #124]	; (404cfc <spi_flash_enable+0xc4>)
  404c80:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404c82:	21ab      	movs	r1, #171	; 0xab
  404c84:	481f      	ldr	r0, [pc, #124]	; (404d04 <spi_flash_enable+0xcc>)
  404c86:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404c88:	2101      	movs	r1, #1
  404c8a:	481f      	ldr	r0, [pc, #124]	; (404d08 <spi_flash_enable+0xd0>)
  404c8c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404c8e:	2100      	movs	r1, #0
  404c90:	481e      	ldr	r0, [pc, #120]	; (404d0c <spi_flash_enable+0xd4>)
  404c92:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404c94:	2181      	movs	r1, #129	; 0x81
  404c96:	481e      	ldr	r0, [pc, #120]	; (404d10 <spi_flash_enable+0xd8>)
  404c98:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404c9a:	4e1e      	ldr	r6, [pc, #120]	; (404d14 <spi_flash_enable+0xdc>)
  404c9c:	4d1e      	ldr	r5, [pc, #120]	; (404d18 <spi_flash_enable+0xe0>)
  404c9e:	4630      	mov	r0, r6
  404ca0:	47a8      	blx	r5
  404ca2:	2801      	cmp	r0, #1
  404ca4:	d1fb      	bne.n	404c9e <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  404ca6:	4913      	ldr	r1, [pc, #76]	; (404cf4 <spi_flash_enable+0xbc>)
  404ca8:	9b01      	ldr	r3, [sp, #4]
  404caa:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  404cac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  404cb0:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  404cb2:	f241 4010 	movw	r0, #5136	; 0x1410
  404cb6:	4b11      	ldr	r3, [pc, #68]	; (404cfc <spi_flash_enable+0xc4>)
  404cb8:	4798      	blx	r3
  404cba:	e7c8      	b.n	404c4e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404cbc:	2100      	movs	r1, #0
  404cbe:	4810      	ldr	r0, [pc, #64]	; (404d00 <spi_flash_enable+0xc8>)
  404cc0:	4d0e      	ldr	r5, [pc, #56]	; (404cfc <spi_flash_enable+0xc4>)
  404cc2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404cc4:	21b9      	movs	r1, #185	; 0xb9
  404cc6:	480f      	ldr	r0, [pc, #60]	; (404d04 <spi_flash_enable+0xcc>)
  404cc8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404cca:	2101      	movs	r1, #1
  404ccc:	480e      	ldr	r0, [pc, #56]	; (404d08 <spi_flash_enable+0xd0>)
  404cce:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  404cd0:	2100      	movs	r1, #0
  404cd2:	480e      	ldr	r0, [pc, #56]	; (404d0c <spi_flash_enable+0xd4>)
  404cd4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404cd6:	2181      	movs	r1, #129	; 0x81
  404cd8:	480d      	ldr	r0, [pc, #52]	; (404d10 <spi_flash_enable+0xd8>)
  404cda:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404cdc:	4e0d      	ldr	r6, [pc, #52]	; (404d14 <spi_flash_enable+0xdc>)
  404cde:	4d0e      	ldr	r5, [pc, #56]	; (404d18 <spi_flash_enable+0xe0>)
  404ce0:	4630      	mov	r0, r6
  404ce2:	47a8      	blx	r5
  404ce4:	2801      	cmp	r0, #1
  404ce6:	d1fb      	bne.n	404ce0 <spi_flash_enable+0xa8>
  404ce8:	e7dd      	b.n	404ca6 <spi_flash_enable+0x6e>
  404cea:	bf00      	nop
  404cec:	0040364d 	.word	0x0040364d
  404cf0:	00403949 	.word	0x00403949
  404cf4:	f8888fff 	.word	0xf8888fff
  404cf8:	01111000 	.word	0x01111000
  404cfc:	00403955 	.word	0x00403955
  404d00:	00010208 	.word	0x00010208
  404d04:	0001020c 	.word	0x0001020c
  404d08:	00010214 	.word	0x00010214
  404d0c:	0001021c 	.word	0x0001021c
  404d10:	00010204 	.word	0x00010204
  404d14:	00010218 	.word	0x00010218
  404d18:	0040393d 	.word	0x0040393d

00404d1c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404d1c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404d1e:	4810      	ldr	r0, [pc, #64]	; (404d60 <sysclk_init+0x44>)
  404d20:	4b10      	ldr	r3, [pc, #64]	; (404d64 <sysclk_init+0x48>)
  404d22:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404d24:	213e      	movs	r1, #62	; 0x3e
  404d26:	2000      	movs	r0, #0
  404d28:	4b0f      	ldr	r3, [pc, #60]	; (404d68 <sysclk_init+0x4c>)
  404d2a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404d2c:	4c0f      	ldr	r4, [pc, #60]	; (404d6c <sysclk_init+0x50>)
  404d2e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404d30:	2800      	cmp	r0, #0
  404d32:	d0fc      	beq.n	404d2e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404d34:	4b0e      	ldr	r3, [pc, #56]	; (404d70 <sysclk_init+0x54>)
  404d36:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404d38:	4a0e      	ldr	r2, [pc, #56]	; (404d74 <sysclk_init+0x58>)
  404d3a:	4b0f      	ldr	r3, [pc, #60]	; (404d78 <sysclk_init+0x5c>)
  404d3c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  404d3e:	4c0f      	ldr	r4, [pc, #60]	; (404d7c <sysclk_init+0x60>)
  404d40:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404d42:	2800      	cmp	r0, #0
  404d44:	d0fc      	beq.n	404d40 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404d46:	2002      	movs	r0, #2
  404d48:	4b0d      	ldr	r3, [pc, #52]	; (404d80 <sysclk_init+0x64>)
  404d4a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404d4c:	2000      	movs	r0, #0
  404d4e:	4b0d      	ldr	r3, [pc, #52]	; (404d84 <sysclk_init+0x68>)
  404d50:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404d52:	4b0d      	ldr	r3, [pc, #52]	; (404d88 <sysclk_init+0x6c>)
  404d54:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404d56:	4802      	ldr	r0, [pc, #8]	; (404d60 <sysclk_init+0x44>)
  404d58:	4b02      	ldr	r3, [pc, #8]	; (404d64 <sysclk_init+0x48>)
  404d5a:	4798      	blx	r3
  404d5c:	bd10      	pop	{r4, pc}
  404d5e:	bf00      	nop
  404d60:	11e1a300 	.word	0x11e1a300
  404d64:	004059bd 	.word	0x004059bd
  404d68:	00405485 	.word	0x00405485
  404d6c:	004054d9 	.word	0x004054d9
  404d70:	004054e9 	.word	0x004054e9
  404d74:	20183f01 	.word	0x20183f01
  404d78:	400e0600 	.word	0x400e0600
  404d7c:	004054f9 	.word	0x004054f9
  404d80:	004053e9 	.word	0x004053e9
  404d84:	00405421 	.word	0x00405421
  404d88:	004058b1 	.word	0x004058b1

00404d8c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  404d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  404d90:	b980      	cbnz	r0, 404db4 <_read+0x28>
  404d92:	460c      	mov	r4, r1
  404d94:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  404d96:	2a00      	cmp	r2, #0
  404d98:	dd0f      	ble.n	404dba <_read+0x2e>
  404d9a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  404d9c:	4e08      	ldr	r6, [pc, #32]	; (404dc0 <_read+0x34>)
  404d9e:	4d09      	ldr	r5, [pc, #36]	; (404dc4 <_read+0x38>)
  404da0:	6830      	ldr	r0, [r6, #0]
  404da2:	4621      	mov	r1, r4
  404da4:	682b      	ldr	r3, [r5, #0]
  404da6:	4798      	blx	r3
		ptr++;
  404da8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  404daa:	42bc      	cmp	r4, r7
  404dac:	d1f8      	bne.n	404da0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  404dae:	4640      	mov	r0, r8
  404db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404db4:	f04f 38ff 	mov.w	r8, #4294967295
  404db8:	e7f9      	b.n	404dae <_read+0x22>
	for (; len > 0; --len) {
  404dba:	4680      	mov	r8, r0
  404dbc:	e7f7      	b.n	404dae <_read+0x22>
  404dbe:	bf00      	nop
  404dc0:	2040d024 	.word	0x2040d024
  404dc4:	2040d01c 	.word	0x2040d01c

00404dc8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  404dc8:	3801      	subs	r0, #1
  404dca:	2802      	cmp	r0, #2
  404dcc:	d815      	bhi.n	404dfa <_write+0x32>
{
  404dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404dd2:	460e      	mov	r6, r1
  404dd4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  404dd6:	b19a      	cbz	r2, 404e00 <_write+0x38>
  404dd8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404dda:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404e14 <_write+0x4c>
  404dde:	4f0c      	ldr	r7, [pc, #48]	; (404e10 <_write+0x48>)
  404de0:	f8d8 0000 	ldr.w	r0, [r8]
  404de4:	f815 1b01 	ldrb.w	r1, [r5], #1
  404de8:	683b      	ldr	r3, [r7, #0]
  404dea:	4798      	blx	r3
  404dec:	2800      	cmp	r0, #0
  404dee:	db0a      	blt.n	404e06 <_write+0x3e>
  404df0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404df2:	3c01      	subs	r4, #1
  404df4:	d1f4      	bne.n	404de0 <_write+0x18>
  404df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404dfa:	f04f 30ff 	mov.w	r0, #4294967295
  404dfe:	4770      	bx	lr
	for (; len != 0; --len) {
  404e00:	4610      	mov	r0, r2
  404e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404e06:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e0e:	bf00      	nop
  404e10:	2040d020 	.word	0x2040d020
  404e14:	2040d024 	.word	0x2040d024

00404e18 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404e1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404e1e:	4b5c      	ldr	r3, [pc, #368]	; (404f90 <board_init+0x178>)
  404e20:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404e22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404e26:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404e2a:	4b5a      	ldr	r3, [pc, #360]	; (404f94 <board_init+0x17c>)
  404e2c:	2200      	movs	r2, #0
  404e2e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404e32:	695a      	ldr	r2, [r3, #20]
  404e34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404e38:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404e3e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404e42:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404e46:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404e4a:	f007 0007 	and.w	r0, r7, #7
  404e4e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404e50:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404e54:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404e58:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404e5c:	f3bf 8f4f 	dsb	sy
  404e60:	f04f 34ff 	mov.w	r4, #4294967295
  404e64:	fa04 fc00 	lsl.w	ip, r4, r0
  404e68:	fa06 f000 	lsl.w	r0, r6, r0
  404e6c:	fa04 f40e 	lsl.w	r4, r4, lr
  404e70:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404e74:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404e76:	463a      	mov	r2, r7
  404e78:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404e7a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404e7e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404e82:	3a01      	subs	r2, #1
  404e84:	4423      	add	r3, r4
  404e86:	f1b2 3fff 	cmp.w	r2, #4294967295
  404e8a:	d1f6      	bne.n	404e7a <board_init+0x62>
        } while(sets--);
  404e8c:	3e01      	subs	r6, #1
  404e8e:	4460      	add	r0, ip
  404e90:	f1b6 3fff 	cmp.w	r6, #4294967295
  404e94:	d1ef      	bne.n	404e76 <board_init+0x5e>
  404e96:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404e9a:	4b3e      	ldr	r3, [pc, #248]	; (404f94 <board_init+0x17c>)
  404e9c:	695a      	ldr	r2, [r3, #20]
  404e9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404ea2:	615a      	str	r2, [r3, #20]
  404ea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ea8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404eac:	4a3a      	ldr	r2, [pc, #232]	; (404f98 <board_init+0x180>)
  404eae:	493b      	ldr	r1, [pc, #236]	; (404f9c <board_init+0x184>)
  404eb0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404eb2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404eb6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404eb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ebc:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404ec0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404ec4:	f022 0201 	bic.w	r2, r2, #1
  404ec8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404ecc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  404ed0:	f022 0201 	bic.w	r2, r2, #1
  404ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404edc:	f3bf 8f6f 	isb	sy
  404ee0:	200a      	movs	r0, #10
  404ee2:	4c2f      	ldr	r4, [pc, #188]	; (404fa0 <board_init+0x188>)
  404ee4:	47a0      	blx	r4
  404ee6:	200b      	movs	r0, #11
  404ee8:	47a0      	blx	r4
  404eea:	200c      	movs	r0, #12
  404eec:	47a0      	blx	r4
  404eee:	2010      	movs	r0, #16
  404ef0:	47a0      	blx	r4
  404ef2:	2011      	movs	r0, #17
  404ef4:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404ef6:	4b2b      	ldr	r3, [pc, #172]	; (404fa4 <board_init+0x18c>)
  404ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
  404efc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404efe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404f02:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404f04:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404f0c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404f0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  404f12:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404f18:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404f1a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  404f20:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404f22:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404f26:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404f28:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404f2a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404f2e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404f30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404f34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404f38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404f3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404f40:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404f46:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404f48:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404f4e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404f50:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404f54:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404f56:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404f58:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404f5c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404f5e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404f60:	4a11      	ldr	r2, [pc, #68]	; (404fa8 <board_init+0x190>)
  404f62:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404f66:	f043 0310 	orr.w	r3, r3, #16
  404f6a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  404f6e:	4b0f      	ldr	r3, [pc, #60]	; (404fac <board_init+0x194>)
  404f70:	2210      	movs	r2, #16
  404f72:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404f78:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404f7a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404f80:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404f82:	4311      	orrs	r1, r2
  404f84:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404f86:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404f88:	4311      	orrs	r1, r2
  404f8a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404f8c:	605a      	str	r2, [r3, #4]
  404f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f90:	400e1850 	.word	0x400e1850
  404f94:	e000ed00 	.word	0xe000ed00
  404f98:	400e0c00 	.word	0x400e0c00
  404f9c:	5a00080c 	.word	0x5a00080c
  404fa0:	00405509 	.word	0x00405509
  404fa4:	400e1200 	.word	0x400e1200
  404fa8:	40088000 	.word	0x40088000
  404fac:	400e1000 	.word	0x400e1000

00404fb0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404fb0:	b90a      	cbnz	r2, 404fb6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404fb2:	6601      	str	r1, [r0, #96]	; 0x60
  404fb4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404fb6:	6641      	str	r1, [r0, #100]	; 0x64
  404fb8:	4770      	bx	lr

00404fba <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  404fba:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  404fbe:	0053      	lsls	r3, r2, #1
  404fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404fc4:	fbb2 f2f3 	udiv	r2, r2, r3
  404fc8:	3a01      	subs	r2, #1
  404fca:	f3c2 020d 	ubfx	r2, r2, #0, #14
  404fce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  404fd2:	4770      	bx	lr

00404fd4 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  404fd4:	6301      	str	r1, [r0, #48]	; 0x30
  404fd6:	4770      	bx	lr

00404fd8 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  404fd8:	6341      	str	r1, [r0, #52]	; 0x34
  404fda:	4770      	bx	lr

00404fdc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404fdc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404fde:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404fe2:	d03a      	beq.n	40505a <pio_set_peripheral+0x7e>
  404fe4:	d813      	bhi.n	40500e <pio_set_peripheral+0x32>
  404fe6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404fea:	d025      	beq.n	405038 <pio_set_peripheral+0x5c>
  404fec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404ff0:	d10a      	bne.n	405008 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404ff2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404ff4:	4313      	orrs	r3, r2
  404ff6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404ff8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404ffa:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404ffc:	400b      	ands	r3, r1
  404ffe:	ea23 0302 	bic.w	r3, r3, r2
  405002:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  405004:	6042      	str	r2, [r0, #4]
  405006:	4770      	bx	lr
	switch (ul_type) {
  405008:	2900      	cmp	r1, #0
  40500a:	d1fb      	bne.n	405004 <pio_set_peripheral+0x28>
  40500c:	4770      	bx	lr
  40500e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  405012:	d021      	beq.n	405058 <pio_set_peripheral+0x7c>
  405014:	d809      	bhi.n	40502a <pio_set_peripheral+0x4e>
  405016:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40501a:	d1f3      	bne.n	405004 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40501c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40501e:	4313      	orrs	r3, r2
  405020:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  405022:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405024:	4313      	orrs	r3, r2
  405026:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  405028:	e7ec      	b.n	405004 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40502a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40502e:	d013      	beq.n	405058 <pio_set_peripheral+0x7c>
  405030:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  405034:	d010      	beq.n	405058 <pio_set_peripheral+0x7c>
  405036:	e7e5      	b.n	405004 <pio_set_peripheral+0x28>
{
  405038:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40503a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40503c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40503e:	43d3      	mvns	r3, r2
  405040:	4021      	ands	r1, r4
  405042:	461c      	mov	r4, r3
  405044:	4019      	ands	r1, r3
  405046:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  405048:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40504a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40504c:	400b      	ands	r3, r1
  40504e:	4023      	ands	r3, r4
  405050:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  405052:	6042      	str	r2, [r0, #4]
}
  405054:	f85d 4b04 	ldr.w	r4, [sp], #4
  405058:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40505a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40505c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40505e:	400b      	ands	r3, r1
  405060:	ea23 0302 	bic.w	r3, r3, r2
  405064:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  405066:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405068:	4313      	orrs	r3, r2
  40506a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40506c:	e7ca      	b.n	405004 <pio_set_peripheral+0x28>

0040506e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40506e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  405070:	f012 0f01 	tst.w	r2, #1
  405074:	d10d      	bne.n	405092 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  405076:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  405078:	f012 0f0a 	tst.w	r2, #10
  40507c:	d00b      	beq.n	405096 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40507e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  405080:	f012 0f02 	tst.w	r2, #2
  405084:	d109      	bne.n	40509a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  405086:	f012 0f08 	tst.w	r2, #8
  40508a:	d008      	beq.n	40509e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40508c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  405090:	e005      	b.n	40509e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  405092:	6641      	str	r1, [r0, #100]	; 0x64
  405094:	e7f0      	b.n	405078 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  405096:	6241      	str	r1, [r0, #36]	; 0x24
  405098:	e7f2      	b.n	405080 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40509a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40509e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4050a0:	6001      	str	r1, [r0, #0]
  4050a2:	4770      	bx	lr

004050a4 <pio_set_output>:
{
  4050a4:	b410      	push	{r4}
  4050a6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4050a8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4050aa:	b94c      	cbnz	r4, 4050c0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4050ac:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4050ae:	b14b      	cbz	r3, 4050c4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4050b0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4050b2:	b94a      	cbnz	r2, 4050c8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4050b4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4050b6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4050b8:	6001      	str	r1, [r0, #0]
}
  4050ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  4050be:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4050c0:	6641      	str	r1, [r0, #100]	; 0x64
  4050c2:	e7f4      	b.n	4050ae <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4050c4:	6541      	str	r1, [r0, #84]	; 0x54
  4050c6:	e7f4      	b.n	4050b2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4050c8:	6301      	str	r1, [r0, #48]	; 0x30
  4050ca:	e7f4      	b.n	4050b6 <pio_set_output+0x12>

004050cc <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4050cc:	f012 0f10 	tst.w	r2, #16
  4050d0:	d012      	beq.n	4050f8 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4050d2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4050d6:	f012 0f20 	tst.w	r2, #32
  4050da:	d007      	beq.n	4050ec <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4050dc:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4050e0:	f012 0f40 	tst.w	r2, #64	; 0x40
  4050e4:	d005      	beq.n	4050f2 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4050e6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4050ea:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4050ec:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4050f0:	e7f6      	b.n	4050e0 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4050f2:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4050f6:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4050f8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4050fc:	4770      	bx	lr

004050fe <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4050fe:	6401      	str	r1, [r0, #64]	; 0x40
  405100:	4770      	bx	lr

00405102 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  405102:	6441      	str	r1, [r0, #68]	; 0x44
  405104:	4770      	bx	lr

00405106 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  405106:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  405108:	4770      	bx	lr

0040510a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40510a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40510c:	4770      	bx	lr
	...

00405110 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  405110:	b570      	push	{r4, r5, r6, lr}
  405112:	b082      	sub	sp, #8
  405114:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  405116:	4c46      	ldr	r4, [pc, #280]	; (405230 <pio_configure_pin+0x120>)
  405118:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  40511c:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40511e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  405122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  405126:	d059      	beq.n	4051dc <pio_configure_pin+0xcc>
  405128:	d80a      	bhi.n	405140 <pio_configure_pin+0x30>
  40512a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40512e:	d02f      	beq.n	405190 <pio_configure_pin+0x80>
  405130:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405134:	d03f      	beq.n	4051b6 <pio_configure_pin+0xa6>
  405136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40513a:	d016      	beq.n	40516a <pio_configure_pin+0x5a>
		return 0;
  40513c:	2000      	movs	r0, #0
  40513e:	e012      	b.n	405166 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  405140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405144:	d05d      	beq.n	405202 <pio_configure_pin+0xf2>
  405146:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40514a:	d05a      	beq.n	405202 <pio_configure_pin+0xf2>
  40514c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405150:	d1f4      	bne.n	40513c <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  405152:	f000 011f 	and.w	r1, r0, #31
  405156:	2601      	movs	r6, #1
  405158:	462a      	mov	r2, r5
  40515a:	fa06 f101 	lsl.w	r1, r6, r1
  40515e:	4620      	mov	r0, r4
  405160:	4b34      	ldr	r3, [pc, #208]	; (405234 <pio_configure_pin+0x124>)
  405162:	4798      	blx	r3
	return 1;
  405164:	4630      	mov	r0, r6
}
  405166:	b002      	add	sp, #8
  405168:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40516a:	f000 001f 	and.w	r0, r0, #31
  40516e:	2601      	movs	r6, #1
  405170:	4086      	lsls	r6, r0
  405172:	4632      	mov	r2, r6
  405174:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  405178:	4620      	mov	r0, r4
  40517a:	4b2f      	ldr	r3, [pc, #188]	; (405238 <pio_configure_pin+0x128>)
  40517c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40517e:	f015 0f01 	tst.w	r5, #1
  405182:	d102      	bne.n	40518a <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  405184:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  405186:	2001      	movs	r0, #1
  405188:	e7ed      	b.n	405166 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40518a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40518c:	2001      	movs	r0, #1
  40518e:	e7ea      	b.n	405166 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  405190:	f000 001f 	and.w	r0, r0, #31
  405194:	2601      	movs	r6, #1
  405196:	4086      	lsls	r6, r0
  405198:	4632      	mov	r2, r6
  40519a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40519e:	4620      	mov	r0, r4
  4051a0:	4b25      	ldr	r3, [pc, #148]	; (405238 <pio_configure_pin+0x128>)
  4051a2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4051a4:	f015 0f01 	tst.w	r5, #1
  4051a8:	d102      	bne.n	4051b0 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4051aa:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4051ac:	2001      	movs	r0, #1
  4051ae:	e7da      	b.n	405166 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4051b0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4051b2:	2001      	movs	r0, #1
  4051b4:	e7d7      	b.n	405166 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4051b6:	f000 001f 	and.w	r0, r0, #31
  4051ba:	2601      	movs	r6, #1
  4051bc:	4086      	lsls	r6, r0
  4051be:	4632      	mov	r2, r6
  4051c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4051c4:	4620      	mov	r0, r4
  4051c6:	4b1c      	ldr	r3, [pc, #112]	; (405238 <pio_configure_pin+0x128>)
  4051c8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4051ca:	f015 0f01 	tst.w	r5, #1
  4051ce:	d102      	bne.n	4051d6 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4051d0:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4051d2:	2001      	movs	r0, #1
  4051d4:	e7c7      	b.n	405166 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4051d6:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4051d8:	2001      	movs	r0, #1
  4051da:	e7c4      	b.n	405166 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4051dc:	f000 001f 	and.w	r0, r0, #31
  4051e0:	2601      	movs	r6, #1
  4051e2:	4086      	lsls	r6, r0
  4051e4:	4632      	mov	r2, r6
  4051e6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4051ea:	4620      	mov	r0, r4
  4051ec:	4b12      	ldr	r3, [pc, #72]	; (405238 <pio_configure_pin+0x128>)
  4051ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4051f0:	f015 0f01 	tst.w	r5, #1
  4051f4:	d102      	bne.n	4051fc <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4051f6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4051f8:	2001      	movs	r0, #1
  4051fa:	e7b4      	b.n	405166 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4051fc:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4051fe:	2001      	movs	r0, #1
  405200:	e7b1      	b.n	405166 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  405202:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  405206:	f000 011f 	and.w	r1, r0, #31
  40520a:	2601      	movs	r6, #1
  40520c:	ea05 0306 	and.w	r3, r5, r6
  405210:	9300      	str	r3, [sp, #0]
  405212:	f3c5 0380 	ubfx	r3, r5, #2, #1
  405216:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40521a:	bf14      	ite	ne
  40521c:	2200      	movne	r2, #0
  40521e:	2201      	moveq	r2, #1
  405220:	fa06 f101 	lsl.w	r1, r6, r1
  405224:	4620      	mov	r0, r4
  405226:	4c05      	ldr	r4, [pc, #20]	; (40523c <pio_configure_pin+0x12c>)
  405228:	47a0      	blx	r4
	return 1;
  40522a:	4630      	mov	r0, r6
		break;
  40522c:	e79b      	b.n	405166 <pio_configure_pin+0x56>
  40522e:	bf00      	nop
  405230:	00200707 	.word	0x00200707
  405234:	0040506f 	.word	0x0040506f
  405238:	00404fdd 	.word	0x00404fdd
  40523c:	004050a5 	.word	0x004050a5

00405240 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  405240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405244:	4604      	mov	r4, r0
  405246:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  405248:	4b0e      	ldr	r3, [pc, #56]	; (405284 <pio_handler_process+0x44>)
  40524a:	4798      	blx	r3
  40524c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40524e:	4620      	mov	r0, r4
  405250:	4b0d      	ldr	r3, [pc, #52]	; (405288 <pio_handler_process+0x48>)
  405252:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  405254:	4005      	ands	r5, r0
  405256:	d013      	beq.n	405280 <pio_handler_process+0x40>
  405258:	4c0c      	ldr	r4, [pc, #48]	; (40528c <pio_handler_process+0x4c>)
  40525a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40525e:	e003      	b.n	405268 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  405260:	42b4      	cmp	r4, r6
  405262:	d00d      	beq.n	405280 <pio_handler_process+0x40>
  405264:	3410      	adds	r4, #16
		while (status != 0) {
  405266:	b15d      	cbz	r5, 405280 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  405268:	6820      	ldr	r0, [r4, #0]
  40526a:	4540      	cmp	r0, r8
  40526c:	d1f8      	bne.n	405260 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40526e:	6861      	ldr	r1, [r4, #4]
  405270:	4229      	tst	r1, r5
  405272:	d0f5      	beq.n	405260 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  405274:	68e3      	ldr	r3, [r4, #12]
  405276:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  405278:	6863      	ldr	r3, [r4, #4]
  40527a:	ea25 0503 	bic.w	r5, r5, r3
  40527e:	e7ef      	b.n	405260 <pio_handler_process+0x20>
  405280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405284:	00405107 	.word	0x00405107
  405288:	0040510b 	.word	0x0040510b
  40528c:	2040c36c 	.word	0x2040c36c

00405290 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  405292:	4c18      	ldr	r4, [pc, #96]	; (4052f4 <pio_handler_set+0x64>)
  405294:	6826      	ldr	r6, [r4, #0]
  405296:	2e06      	cmp	r6, #6
  405298:	d82a      	bhi.n	4052f0 <pio_handler_set+0x60>
  40529a:	f04f 0c00 	mov.w	ip, #0
  40529e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4052a0:	4f15      	ldr	r7, [pc, #84]	; (4052f8 <pio_handler_set+0x68>)
  4052a2:	e004      	b.n	4052ae <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4052a4:	3401      	adds	r4, #1
  4052a6:	b2e4      	uxtb	r4, r4
  4052a8:	46a4      	mov	ip, r4
  4052aa:	42a6      	cmp	r6, r4
  4052ac:	d309      	bcc.n	4052c2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4052ae:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4052b0:	0125      	lsls	r5, r4, #4
  4052b2:	597d      	ldr	r5, [r7, r5]
  4052b4:	428d      	cmp	r5, r1
  4052b6:	d1f5      	bne.n	4052a4 <pio_handler_set+0x14>
  4052b8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4052bc:	686d      	ldr	r5, [r5, #4]
  4052be:	4295      	cmp	r5, r2
  4052c0:	d1f0      	bne.n	4052a4 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4052c2:	4d0d      	ldr	r5, [pc, #52]	; (4052f8 <pio_handler_set+0x68>)
  4052c4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4052c8:	eb05 040e 	add.w	r4, r5, lr
  4052cc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4052d0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4052d2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4052d4:	9906      	ldr	r1, [sp, #24]
  4052d6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4052d8:	3601      	adds	r6, #1
  4052da:	4566      	cmp	r6, ip
  4052dc:	d005      	beq.n	4052ea <pio_handler_set+0x5a>
  4052de:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4052e0:	461a      	mov	r2, r3
  4052e2:	4b06      	ldr	r3, [pc, #24]	; (4052fc <pio_handler_set+0x6c>)
  4052e4:	4798      	blx	r3

	return 0;
  4052e6:	2000      	movs	r0, #0
  4052e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4052ea:	4902      	ldr	r1, [pc, #8]	; (4052f4 <pio_handler_set+0x64>)
  4052ec:	600e      	str	r6, [r1, #0]
  4052ee:	e7f6      	b.n	4052de <pio_handler_set+0x4e>
		return 1;
  4052f0:	2001      	movs	r0, #1
}
  4052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052f4:	2040c3dc 	.word	0x2040c3dc
  4052f8:	2040c36c 	.word	0x2040c36c
  4052fc:	004050cd 	.word	0x004050cd

00405300 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405300:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  405302:	210a      	movs	r1, #10
  405304:	4801      	ldr	r0, [pc, #4]	; (40530c <PIOA_Handler+0xc>)
  405306:	4b02      	ldr	r3, [pc, #8]	; (405310 <PIOA_Handler+0x10>)
  405308:	4798      	blx	r3
  40530a:	bd08      	pop	{r3, pc}
  40530c:	400e0e00 	.word	0x400e0e00
  405310:	00405241 	.word	0x00405241

00405314 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  405314:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  405316:	210b      	movs	r1, #11
  405318:	4801      	ldr	r0, [pc, #4]	; (405320 <PIOB_Handler+0xc>)
  40531a:	4b02      	ldr	r3, [pc, #8]	; (405324 <PIOB_Handler+0x10>)
  40531c:	4798      	blx	r3
  40531e:	bd08      	pop	{r3, pc}
  405320:	400e1000 	.word	0x400e1000
  405324:	00405241 	.word	0x00405241

00405328 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  405328:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40532a:	210c      	movs	r1, #12
  40532c:	4801      	ldr	r0, [pc, #4]	; (405334 <PIOC_Handler+0xc>)
  40532e:	4b02      	ldr	r3, [pc, #8]	; (405338 <PIOC_Handler+0x10>)
  405330:	4798      	blx	r3
  405332:	bd08      	pop	{r3, pc}
  405334:	400e1200 	.word	0x400e1200
  405338:	00405241 	.word	0x00405241

0040533c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40533c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40533e:	2110      	movs	r1, #16
  405340:	4801      	ldr	r0, [pc, #4]	; (405348 <PIOD_Handler+0xc>)
  405342:	4b02      	ldr	r3, [pc, #8]	; (40534c <PIOD_Handler+0x10>)
  405344:	4798      	blx	r3
  405346:	bd08      	pop	{r3, pc}
  405348:	400e1400 	.word	0x400e1400
  40534c:	00405241 	.word	0x00405241

00405350 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  405350:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  405352:	2111      	movs	r1, #17
  405354:	4801      	ldr	r0, [pc, #4]	; (40535c <PIOE_Handler+0xc>)
  405356:	4b02      	ldr	r3, [pc, #8]	; (405360 <PIOE_Handler+0x10>)
  405358:	4798      	blx	r3
  40535a:	bd08      	pop	{r3, pc}
  40535c:	400e1600 	.word	0x400e1600
  405360:	00405241 	.word	0x00405241

00405364 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  405364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405366:	4606      	mov	r6, r0
  405368:	460d      	mov	r5, r1
  40536a:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  40536c:	4b17      	ldr	r3, [pc, #92]	; (4053cc <pio_handler_set_priority+0x68>)
  40536e:	4798      	blx	r3
  405370:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  405372:	f04f 31ff 	mov.w	r1, #4294967295
  405376:	4630      	mov	r0, r6
  405378:	4b15      	ldr	r3, [pc, #84]	; (4053d0 <pio_handler_set_priority+0x6c>)
  40537a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40537c:	4630      	mov	r0, r6
  40537e:	4b15      	ldr	r3, [pc, #84]	; (4053d4 <pio_handler_set_priority+0x70>)
  405380:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405382:	fa5f fe85 	uxtb.w	lr, r5
  405386:	f00e 031f 	and.w	r3, lr, #31
  40538a:	2201      	movs	r2, #1
  40538c:	fa02 f303 	lsl.w	r3, r2, r3
  405390:	0968      	lsrs	r0, r5, #5
  405392:	4911      	ldr	r1, [pc, #68]	; (4053d8 <pio_handler_set_priority+0x74>)
  405394:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  405398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40539c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  4053a0:	2d00      	cmp	r5, #0
  4053a2:	db0a      	blt.n	4053ba <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4053a4:	0164      	lsls	r4, r4, #5
  4053a6:	b2e4      	uxtb	r4, r4
  4053a8:	4a0c      	ldr	r2, [pc, #48]	; (4053dc <pio_handler_set_priority+0x78>)
  4053aa:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4053ac:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4053b0:	4639      	mov	r1, r7
  4053b2:	4630      	mov	r0, r6
  4053b4:	4b0a      	ldr	r3, [pc, #40]	; (4053e0 <pio_handler_set_priority+0x7c>)
  4053b6:	4798      	blx	r3
  4053b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4053ba:	f00e 0e0f 	and.w	lr, lr, #15
  4053be:	0164      	lsls	r4, r4, #5
  4053c0:	b2e4      	uxtb	r4, r4
  4053c2:	4a08      	ldr	r2, [pc, #32]	; (4053e4 <pio_handler_set_priority+0x80>)
  4053c4:	f802 400e 	strb.w	r4, [r2, lr]
  4053c8:	e7f0      	b.n	4053ac <pio_handler_set_priority+0x48>
  4053ca:	bf00      	nop
  4053cc:	0040510b 	.word	0x0040510b
  4053d0:	00405103 	.word	0x00405103
  4053d4:	00405107 	.word	0x00405107
  4053d8:	e000e100 	.word	0xe000e100
  4053dc:	e000e400 	.word	0xe000e400
  4053e0:	004050ff 	.word	0x004050ff
  4053e4:	e000ed14 	.word	0xe000ed14

004053e8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4053e8:	2803      	cmp	r0, #3
  4053ea:	d011      	beq.n	405410 <pmc_mck_set_division+0x28>
  4053ec:	2804      	cmp	r0, #4
  4053ee:	d012      	beq.n	405416 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4053f0:	2802      	cmp	r0, #2
  4053f2:	bf0c      	ite	eq
  4053f4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4053f8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4053fa:	4a08      	ldr	r2, [pc, #32]	; (40541c <pmc_mck_set_division+0x34>)
  4053fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4053fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  405402:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  405404:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  405406:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405408:	f013 0f08 	tst.w	r3, #8
  40540c:	d0fb      	beq.n	405406 <pmc_mck_set_division+0x1e>
}
  40540e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  405410:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  405414:	e7f1      	b.n	4053fa <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  405416:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40541a:	e7ee      	b.n	4053fa <pmc_mck_set_division+0x12>
  40541c:	400e0600 	.word	0x400e0600

00405420 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405420:	4a17      	ldr	r2, [pc, #92]	; (405480 <pmc_switch_mck_to_pllack+0x60>)
  405422:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  405428:	4318      	orrs	r0, r3
  40542a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40542c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40542e:	f013 0f08 	tst.w	r3, #8
  405432:	d10a      	bne.n	40544a <pmc_switch_mck_to_pllack+0x2a>
  405434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405438:	4911      	ldr	r1, [pc, #68]	; (405480 <pmc_switch_mck_to_pllack+0x60>)
  40543a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40543c:	f012 0f08 	tst.w	r2, #8
  405440:	d103      	bne.n	40544a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405442:	3b01      	subs	r3, #1
  405444:	d1f9      	bne.n	40543a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  405446:	2001      	movs	r0, #1
  405448:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40544a:	4a0d      	ldr	r2, [pc, #52]	; (405480 <pmc_switch_mck_to_pllack+0x60>)
  40544c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40544e:	f023 0303 	bic.w	r3, r3, #3
  405452:	f043 0302 	orr.w	r3, r3, #2
  405456:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405458:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40545a:	f013 0f08 	tst.w	r3, #8
  40545e:	d10a      	bne.n	405476 <pmc_switch_mck_to_pllack+0x56>
  405460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405464:	4906      	ldr	r1, [pc, #24]	; (405480 <pmc_switch_mck_to_pllack+0x60>)
  405466:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405468:	f012 0f08 	tst.w	r2, #8
  40546c:	d105      	bne.n	40547a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40546e:	3b01      	subs	r3, #1
  405470:	d1f9      	bne.n	405466 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  405472:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  405474:	4770      	bx	lr
	return 0;
  405476:	2000      	movs	r0, #0
  405478:	4770      	bx	lr
  40547a:	2000      	movs	r0, #0
  40547c:	4770      	bx	lr
  40547e:	bf00      	nop
  405480:	400e0600 	.word	0x400e0600

00405484 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  405484:	b9a0      	cbnz	r0, 4054b0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405486:	480e      	ldr	r0, [pc, #56]	; (4054c0 <pmc_switch_mainck_to_xtal+0x3c>)
  405488:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40548a:	0209      	lsls	r1, r1, #8
  40548c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40548e:	4a0d      	ldr	r2, [pc, #52]	; (4054c4 <pmc_switch_mainck_to_xtal+0x40>)
  405490:	401a      	ands	r2, r3
  405492:	4b0d      	ldr	r3, [pc, #52]	; (4054c8 <pmc_switch_mainck_to_xtal+0x44>)
  405494:	4313      	orrs	r3, r2
  405496:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405498:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40549a:	4602      	mov	r2, r0
  40549c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40549e:	f013 0f01 	tst.w	r3, #1
  4054a2:	d0fb      	beq.n	40549c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4054a4:	4a06      	ldr	r2, [pc, #24]	; (4054c0 <pmc_switch_mainck_to_xtal+0x3c>)
  4054a6:	6a11      	ldr	r1, [r2, #32]
  4054a8:	4b08      	ldr	r3, [pc, #32]	; (4054cc <pmc_switch_mainck_to_xtal+0x48>)
  4054aa:	430b      	orrs	r3, r1
  4054ac:	6213      	str	r3, [r2, #32]
  4054ae:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4054b0:	4903      	ldr	r1, [pc, #12]	; (4054c0 <pmc_switch_mainck_to_xtal+0x3c>)
  4054b2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4054b4:	4a06      	ldr	r2, [pc, #24]	; (4054d0 <pmc_switch_mainck_to_xtal+0x4c>)
  4054b6:	401a      	ands	r2, r3
  4054b8:	4b06      	ldr	r3, [pc, #24]	; (4054d4 <pmc_switch_mainck_to_xtal+0x50>)
  4054ba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4054bc:	620b      	str	r3, [r1, #32]
  4054be:	4770      	bx	lr
  4054c0:	400e0600 	.word	0x400e0600
  4054c4:	ffc8fffc 	.word	0xffc8fffc
  4054c8:	00370001 	.word	0x00370001
  4054cc:	01370000 	.word	0x01370000
  4054d0:	fec8fffc 	.word	0xfec8fffc
  4054d4:	01370002 	.word	0x01370002

004054d8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4054d8:	4b02      	ldr	r3, [pc, #8]	; (4054e4 <pmc_osc_is_ready_mainck+0xc>)
  4054da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4054dc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4054e0:	4770      	bx	lr
  4054e2:	bf00      	nop
  4054e4:	400e0600 	.word	0x400e0600

004054e8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4054e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4054ec:	4b01      	ldr	r3, [pc, #4]	; (4054f4 <pmc_disable_pllack+0xc>)
  4054ee:	629a      	str	r2, [r3, #40]	; 0x28
  4054f0:	4770      	bx	lr
  4054f2:	bf00      	nop
  4054f4:	400e0600 	.word	0x400e0600

004054f8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4054f8:	4b02      	ldr	r3, [pc, #8]	; (405504 <pmc_is_locked_pllack+0xc>)
  4054fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4054fc:	f000 0002 	and.w	r0, r0, #2
  405500:	4770      	bx	lr
  405502:	bf00      	nop
  405504:	400e0600 	.word	0x400e0600

00405508 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  405508:	283f      	cmp	r0, #63	; 0x3f
  40550a:	d81e      	bhi.n	40554a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40550c:	281f      	cmp	r0, #31
  40550e:	d80c      	bhi.n	40552a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  405510:	4b11      	ldr	r3, [pc, #68]	; (405558 <pmc_enable_periph_clk+0x50>)
  405512:	699a      	ldr	r2, [r3, #24]
  405514:	2301      	movs	r3, #1
  405516:	4083      	lsls	r3, r0
  405518:	4393      	bics	r3, r2
  40551a:	d018      	beq.n	40554e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40551c:	2301      	movs	r3, #1
  40551e:	fa03 f000 	lsl.w	r0, r3, r0
  405522:	4b0d      	ldr	r3, [pc, #52]	; (405558 <pmc_enable_periph_clk+0x50>)
  405524:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  405526:	2000      	movs	r0, #0
  405528:	4770      	bx	lr
		ul_id -= 32;
  40552a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40552c:	4b0a      	ldr	r3, [pc, #40]	; (405558 <pmc_enable_periph_clk+0x50>)
  40552e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  405532:	2301      	movs	r3, #1
  405534:	4083      	lsls	r3, r0
  405536:	4393      	bics	r3, r2
  405538:	d00b      	beq.n	405552 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40553a:	2301      	movs	r3, #1
  40553c:	fa03 f000 	lsl.w	r0, r3, r0
  405540:	4b05      	ldr	r3, [pc, #20]	; (405558 <pmc_enable_periph_clk+0x50>)
  405542:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  405546:	2000      	movs	r0, #0
  405548:	4770      	bx	lr
		return 1;
  40554a:	2001      	movs	r0, #1
  40554c:	4770      	bx	lr
	return 0;
  40554e:	2000      	movs	r0, #0
  405550:	4770      	bx	lr
  405552:	2000      	movs	r0, #0
}
  405554:	4770      	bx	lr
  405556:	bf00      	nop
  405558:	400e0600 	.word	0x400e0600

0040555c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40555c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40555e:	4b07      	ldr	r3, [pc, #28]	; (40557c <spi_enable_clock+0x20>)
  405560:	4298      	cmp	r0, r3
  405562:	d003      	beq.n	40556c <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  405564:	4b06      	ldr	r3, [pc, #24]	; (405580 <spi_enable_clock+0x24>)
  405566:	4298      	cmp	r0, r3
  405568:	d004      	beq.n	405574 <spi_enable_clock+0x18>
  40556a:	bd08      	pop	{r3, pc}
  40556c:	2015      	movs	r0, #21
  40556e:	4b05      	ldr	r3, [pc, #20]	; (405584 <spi_enable_clock+0x28>)
  405570:	4798      	blx	r3
  405572:	bd08      	pop	{r3, pc}
  405574:	202a      	movs	r0, #42	; 0x2a
  405576:	4b03      	ldr	r3, [pc, #12]	; (405584 <spi_enable_clock+0x28>)
  405578:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40557a:	e7f6      	b.n	40556a <spi_enable_clock+0xe>
  40557c:	40008000 	.word	0x40008000
  405580:	40058000 	.word	0x40058000
  405584:	00405509 	.word	0x00405509

00405588 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405588:	6843      	ldr	r3, [r0, #4]
  40558a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40558e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  405590:	6843      	ldr	r3, [r0, #4]
  405592:	0409      	lsls	r1, r1, #16
  405594:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  405598:	4319      	orrs	r1, r3
  40559a:	6041      	str	r1, [r0, #4]
  40559c:	4770      	bx	lr

0040559e <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  40559e:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4055a0:	f643 2399 	movw	r3, #15001	; 0x3a99
  4055a4:	6904      	ldr	r4, [r0, #16]
  4055a6:	f014 0f01 	tst.w	r4, #1
  4055aa:	d103      	bne.n	4055b4 <spi_read+0x16>
		if (!timeout--) {
  4055ac:	3b01      	subs	r3, #1
  4055ae:	d1f9      	bne.n	4055a4 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4055b0:	2001      	movs	r0, #1
  4055b2:	e009      	b.n	4055c8 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4055b4:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4055b6:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4055b8:	f010 0f02 	tst.w	r0, #2
  4055bc:	d002      	beq.n	4055c4 <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4055be:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4055c2:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4055c4:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4055c6:	2000      	movs	r0, #0
}
  4055c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4055cc:	4770      	bx	lr

004055ce <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4055ce:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4055d0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4055d4:	6905      	ldr	r5, [r0, #16]
  4055d6:	f015 0f02 	tst.w	r5, #2
  4055da:	d103      	bne.n	4055e4 <spi_write+0x16>
		if (!timeout--) {
  4055dc:	3c01      	subs	r4, #1
  4055de:	d1f9      	bne.n	4055d4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4055e0:	2001      	movs	r0, #1
  4055e2:	e00c      	b.n	4055fe <spi_write+0x30>
  4055e4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4055e6:	f014 0f02 	tst.w	r4, #2
  4055ea:	d006      	beq.n	4055fa <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4055ec:	0412      	lsls	r2, r2, #16
  4055ee:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4055f2:	4311      	orrs	r1, r2
		if (uc_last) {
  4055f4:	b10b      	cbz	r3, 4055fa <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4055f6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4055fa:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4055fc:	2000      	movs	r0, #0
}
  4055fe:	bc30      	pop	{r4, r5}
  405600:	4770      	bx	lr

00405602 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  405602:	b932      	cbnz	r2, 405612 <spi_set_clock_polarity+0x10>
  405604:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  405608:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40560a:	f023 0301 	bic.w	r3, r3, #1
  40560e:	6303      	str	r3, [r0, #48]	; 0x30
  405610:	4770      	bx	lr
  405612:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  405616:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405618:	f043 0301 	orr.w	r3, r3, #1
  40561c:	6303      	str	r3, [r0, #48]	; 0x30
  40561e:	4770      	bx	lr

00405620 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  405620:	b932      	cbnz	r2, 405630 <spi_set_clock_phase+0x10>
  405622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  405626:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405628:	f023 0302 	bic.w	r3, r3, #2
  40562c:	6303      	str	r3, [r0, #48]	; 0x30
  40562e:	4770      	bx	lr
  405630:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  405634:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405636:	f043 0302 	orr.w	r3, r3, #2
  40563a:	6303      	str	r3, [r0, #48]	; 0x30
  40563c:	4770      	bx	lr

0040563e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40563e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  405642:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405644:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  405648:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40564a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40564c:	431a      	orrs	r2, r3
  40564e:	630a      	str	r2, [r1, #48]	; 0x30
  405650:	4770      	bx	lr

00405652 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  405652:	1e43      	subs	r3, r0, #1
  405654:	4419      	add	r1, r3
  405656:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40565a:	1e43      	subs	r3, r0, #1
  40565c:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  40565e:	bf94      	ite	ls
  405660:	b200      	sxthls	r0, r0
		return -1;
  405662:	f04f 30ff 	movhi.w	r0, #4294967295
}
  405666:	4770      	bx	lr

00405668 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405668:	b17a      	cbz	r2, 40568a <spi_set_baudrate_div+0x22>
{
  40566a:	b410      	push	{r4}
  40566c:	4614      	mov	r4, r2
  40566e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  405672:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405678:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40567a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40567c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  405680:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  405682:	2000      	movs	r0, #0
}
  405684:	f85d 4b04 	ldr.w	r4, [sp], #4
  405688:	4770      	bx	lr
        return -1;
  40568a:	f04f 30ff 	mov.w	r0, #4294967295
  40568e:	4770      	bx	lr

00405690 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  405690:	b410      	push	{r4}
  405692:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  405696:	6b08      	ldr	r0, [r1, #48]	; 0x30
  405698:	b280      	uxth	r0, r0
  40569a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  40569c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40569e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4056a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4056a6:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4056a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4056ac:	4770      	bx	lr

004056ae <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4056ae:	6943      	ldr	r3, [r0, #20]
  4056b0:	f013 0f02 	tst.w	r3, #2
  4056b4:	d002      	beq.n	4056bc <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4056b6:	61c1      	str	r1, [r0, #28]
	return 0;
  4056b8:	2000      	movs	r0, #0
  4056ba:	4770      	bx	lr
		return 1;
  4056bc:	2001      	movs	r0, #1
}
  4056be:	4770      	bx	lr

004056c0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4056c0:	6943      	ldr	r3, [r0, #20]
  4056c2:	f013 0f01 	tst.w	r3, #1
  4056c6:	d003      	beq.n	4056d0 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4056c8:	6983      	ldr	r3, [r0, #24]
  4056ca:	700b      	strb	r3, [r1, #0]
	return 0;
  4056cc:	2000      	movs	r0, #0
  4056ce:	4770      	bx	lr
		return 1;
  4056d0:	2001      	movs	r0, #1
}
  4056d2:	4770      	bx	lr

004056d4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4056d4:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4056d6:	010b      	lsls	r3, r1, #4
  4056d8:	4293      	cmp	r3, r2
  4056da:	d914      	bls.n	405706 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4056dc:	00c9      	lsls	r1, r1, #3
  4056de:	084b      	lsrs	r3, r1, #1
  4056e0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4056e4:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4056e8:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4056ea:	1e5c      	subs	r4, r3, #1
  4056ec:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4056f0:	428c      	cmp	r4, r1
  4056f2:	d901      	bls.n	4056f8 <usart_set_async_baudrate+0x24>
		return 1;
  4056f4:	2001      	movs	r0, #1
  4056f6:	e017      	b.n	405728 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4056f8:	6841      	ldr	r1, [r0, #4]
  4056fa:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4056fe:	6041      	str	r1, [r0, #4]
  405700:	e00c      	b.n	40571c <usart_set_async_baudrate+0x48>
		return 1;
  405702:	2001      	movs	r0, #1
  405704:	e010      	b.n	405728 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405706:	0859      	lsrs	r1, r3, #1
  405708:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40570c:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  405710:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405712:	1e5c      	subs	r4, r3, #1
  405714:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405718:	428c      	cmp	r4, r1
  40571a:	d8f2      	bhi.n	405702 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40571c:	0412      	lsls	r2, r2, #16
  40571e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  405722:	431a      	orrs	r2, r3
  405724:	6202      	str	r2, [r0, #32]

	return 0;
  405726:	2000      	movs	r0, #0
}
  405728:	f85d 4b04 	ldr.w	r4, [sp], #4
  40572c:	4770      	bx	lr
	...

00405730 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405730:	4b08      	ldr	r3, [pc, #32]	; (405754 <usart_reset+0x24>)
  405732:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  405736:	2300      	movs	r3, #0
  405738:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40573a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40573c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40573e:	2388      	movs	r3, #136	; 0x88
  405740:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  405742:	2324      	movs	r3, #36	; 0x24
  405744:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  405746:	f44f 7380 	mov.w	r3, #256	; 0x100
  40574a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40574c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  405750:	6003      	str	r3, [r0, #0]
  405752:	4770      	bx	lr
  405754:	55534100 	.word	0x55534100

00405758 <usart_init_rs232>:
{
  405758:	b570      	push	{r4, r5, r6, lr}
  40575a:	4605      	mov	r5, r0
  40575c:	460c      	mov	r4, r1
  40575e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  405760:	4b0f      	ldr	r3, [pc, #60]	; (4057a0 <usart_init_rs232+0x48>)
  405762:	4798      	blx	r3
	ul_reg_val = 0;
  405764:	2200      	movs	r2, #0
  405766:	4b0f      	ldr	r3, [pc, #60]	; (4057a4 <usart_init_rs232+0x4c>)
  405768:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40576a:	b1a4      	cbz	r4, 405796 <usart_init_rs232+0x3e>
  40576c:	4632      	mov	r2, r6
  40576e:	6821      	ldr	r1, [r4, #0]
  405770:	4628      	mov	r0, r5
  405772:	4b0d      	ldr	r3, [pc, #52]	; (4057a8 <usart_init_rs232+0x50>)
  405774:	4798      	blx	r3
  405776:	4602      	mov	r2, r0
  405778:	b978      	cbnz	r0, 40579a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40577a:	6863      	ldr	r3, [r4, #4]
  40577c:	68a1      	ldr	r1, [r4, #8]
  40577e:	430b      	orrs	r3, r1
  405780:	6921      	ldr	r1, [r4, #16]
  405782:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405784:	68e1      	ldr	r1, [r4, #12]
  405786:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405788:	4906      	ldr	r1, [pc, #24]	; (4057a4 <usart_init_rs232+0x4c>)
  40578a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  40578c:	6869      	ldr	r1, [r5, #4]
  40578e:	430b      	orrs	r3, r1
  405790:	606b      	str	r3, [r5, #4]
}
  405792:	4610      	mov	r0, r2
  405794:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  405796:	2201      	movs	r2, #1
  405798:	e7fb      	b.n	405792 <usart_init_rs232+0x3a>
  40579a:	2201      	movs	r2, #1
  40579c:	e7f9      	b.n	405792 <usart_init_rs232+0x3a>
  40579e:	bf00      	nop
  4057a0:	00405731 	.word	0x00405731
  4057a4:	2040c3e0 	.word	0x2040c3e0
  4057a8:	004056d5 	.word	0x004056d5

004057ac <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4057ac:	2340      	movs	r3, #64	; 0x40
  4057ae:	6003      	str	r3, [r0, #0]
  4057b0:	4770      	bx	lr

004057b2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4057b2:	2310      	movs	r3, #16
  4057b4:	6003      	str	r3, [r0, #0]
  4057b6:	4770      	bx	lr

004057b8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4057b8:	6943      	ldr	r3, [r0, #20]
  4057ba:	f013 0f02 	tst.w	r3, #2
  4057be:	d004      	beq.n	4057ca <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4057c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4057c4:	61c1      	str	r1, [r0, #28]
	return 0;
  4057c6:	2000      	movs	r0, #0
  4057c8:	4770      	bx	lr
		return 1;
  4057ca:	2001      	movs	r0, #1
}
  4057cc:	4770      	bx	lr

004057ce <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4057ce:	6943      	ldr	r3, [r0, #20]
  4057d0:	f013 0f01 	tst.w	r3, #1
  4057d4:	d005      	beq.n	4057e2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4057d6:	6983      	ldr	r3, [r0, #24]
  4057d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4057dc:	600b      	str	r3, [r1, #0]
	return 0;
  4057de:	2000      	movs	r0, #0
  4057e0:	4770      	bx	lr
		return 1;
  4057e2:	2001      	movs	r0, #1
}
  4057e4:	4770      	bx	lr

004057e6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4057e6:	e7fe      	b.n	4057e6 <Dummy_Handler>

004057e8 <Reset_Handler>:
{
  4057e8:	b500      	push	{lr}
  4057ea:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4057ec:	4b25      	ldr	r3, [pc, #148]	; (405884 <Reset_Handler+0x9c>)
  4057ee:	4a26      	ldr	r2, [pc, #152]	; (405888 <Reset_Handler+0xa0>)
  4057f0:	429a      	cmp	r2, r3
  4057f2:	d010      	beq.n	405816 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4057f4:	4b25      	ldr	r3, [pc, #148]	; (40588c <Reset_Handler+0xa4>)
  4057f6:	4a23      	ldr	r2, [pc, #140]	; (405884 <Reset_Handler+0x9c>)
  4057f8:	429a      	cmp	r2, r3
  4057fa:	d20c      	bcs.n	405816 <Reset_Handler+0x2e>
  4057fc:	3b01      	subs	r3, #1
  4057fe:	1a9b      	subs	r3, r3, r2
  405800:	f023 0303 	bic.w	r3, r3, #3
  405804:	3304      	adds	r3, #4
  405806:	4413      	add	r3, r2
  405808:	491f      	ldr	r1, [pc, #124]	; (405888 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40580a:	f851 0b04 	ldr.w	r0, [r1], #4
  40580e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  405812:	429a      	cmp	r2, r3
  405814:	d1f9      	bne.n	40580a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  405816:	4b1e      	ldr	r3, [pc, #120]	; (405890 <Reset_Handler+0xa8>)
  405818:	4a1e      	ldr	r2, [pc, #120]	; (405894 <Reset_Handler+0xac>)
  40581a:	429a      	cmp	r2, r3
  40581c:	d20a      	bcs.n	405834 <Reset_Handler+0x4c>
  40581e:	3b01      	subs	r3, #1
  405820:	1a9b      	subs	r3, r3, r2
  405822:	f023 0303 	bic.w	r3, r3, #3
  405826:	3304      	adds	r3, #4
  405828:	4413      	add	r3, r2
                *pDest++ = 0;
  40582a:	2100      	movs	r1, #0
  40582c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  405830:	4293      	cmp	r3, r2
  405832:	d1fb      	bne.n	40582c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  405834:	4a18      	ldr	r2, [pc, #96]	; (405898 <Reset_Handler+0xb0>)
  405836:	4b19      	ldr	r3, [pc, #100]	; (40589c <Reset_Handler+0xb4>)
  405838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40583c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40583e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405842:	fab3 f383 	clz	r3, r3
  405846:	095b      	lsrs	r3, r3, #5
  405848:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40584a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40584c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405850:	2200      	movs	r2, #0
  405852:	4b13      	ldr	r3, [pc, #76]	; (4058a0 <Reset_Handler+0xb8>)
  405854:	701a      	strb	r2, [r3, #0]
	return flags;
  405856:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  405858:	4a12      	ldr	r2, [pc, #72]	; (4058a4 <Reset_Handler+0xbc>)
  40585a:	6813      	ldr	r3, [r2, #0]
  40585c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405860:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  405862:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405866:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40586a:	b129      	cbz	r1, 405878 <Reset_Handler+0x90>
		cpu_irq_enable();
  40586c:	2201      	movs	r2, #1
  40586e:	4b0c      	ldr	r3, [pc, #48]	; (4058a0 <Reset_Handler+0xb8>)
  405870:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  405872:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405876:	b662      	cpsie	i
        __libc_init_array();
  405878:	4b0b      	ldr	r3, [pc, #44]	; (4058a8 <Reset_Handler+0xc0>)
  40587a:	4798      	blx	r3
        main();
  40587c:	4b0b      	ldr	r3, [pc, #44]	; (4058ac <Reset_Handler+0xc4>)
  40587e:	4798      	blx	r3
  405880:	e7fe      	b.n	405880 <Reset_Handler+0x98>
  405882:	bf00      	nop
  405884:	20400000 	.word	0x20400000
  405888:	0040e244 	.word	0x0040e244
  40588c:	204009d8 	.word	0x204009d8
  405890:	2040d060 	.word	0x2040d060
  405894:	204009d8 	.word	0x204009d8
  405898:	e000ed00 	.word	0xe000ed00
  40589c:	00400000 	.word	0x00400000
  4058a0:	20400018 	.word	0x20400018
  4058a4:	e000ed88 	.word	0xe000ed88
  4058a8:	004061e9 	.word	0x004061e9
  4058ac:	00406141 	.word	0x00406141

004058b0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4058b0:	4b3b      	ldr	r3, [pc, #236]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  4058b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058b4:	f003 0303 	and.w	r3, r3, #3
  4058b8:	2b01      	cmp	r3, #1
  4058ba:	d01d      	beq.n	4058f8 <SystemCoreClockUpdate+0x48>
  4058bc:	b183      	cbz	r3, 4058e0 <SystemCoreClockUpdate+0x30>
  4058be:	2b02      	cmp	r3, #2
  4058c0:	d036      	beq.n	405930 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4058c2:	4b37      	ldr	r3, [pc, #220]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  4058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4058ca:	2b70      	cmp	r3, #112	; 0x70
  4058cc:	d05f      	beq.n	40598e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4058ce:	4b34      	ldr	r3, [pc, #208]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  4058d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4058d2:	4934      	ldr	r1, [pc, #208]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  4058d4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4058d8:	680b      	ldr	r3, [r1, #0]
  4058da:	40d3      	lsrs	r3, r2
  4058dc:	600b      	str	r3, [r1, #0]
  4058de:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4058e0:	4b31      	ldr	r3, [pc, #196]	; (4059a8 <SystemCoreClockUpdate+0xf8>)
  4058e2:	695b      	ldr	r3, [r3, #20]
  4058e4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4058e8:	bf14      	ite	ne
  4058ea:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4058ee:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4058f2:	4b2c      	ldr	r3, [pc, #176]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  4058f4:	601a      	str	r2, [r3, #0]
  4058f6:	e7e4      	b.n	4058c2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4058f8:	4b29      	ldr	r3, [pc, #164]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  4058fa:	6a1b      	ldr	r3, [r3, #32]
  4058fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405900:	d003      	beq.n	40590a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405902:	4a2a      	ldr	r2, [pc, #168]	; (4059ac <SystemCoreClockUpdate+0xfc>)
  405904:	4b27      	ldr	r3, [pc, #156]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  405906:	601a      	str	r2, [r3, #0]
  405908:	e7db      	b.n	4058c2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40590a:	4a29      	ldr	r2, [pc, #164]	; (4059b0 <SystemCoreClockUpdate+0x100>)
  40590c:	4b25      	ldr	r3, [pc, #148]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  40590e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405910:	4b23      	ldr	r3, [pc, #140]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  405912:	6a1b      	ldr	r3, [r3, #32]
  405914:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405918:	2b10      	cmp	r3, #16
  40591a:	d005      	beq.n	405928 <SystemCoreClockUpdate+0x78>
  40591c:	2b20      	cmp	r3, #32
  40591e:	d1d0      	bne.n	4058c2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  405920:	4a22      	ldr	r2, [pc, #136]	; (4059ac <SystemCoreClockUpdate+0xfc>)
  405922:	4b20      	ldr	r3, [pc, #128]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  405924:	601a      	str	r2, [r3, #0]
          break;
  405926:	e7cc      	b.n	4058c2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  405928:	4a22      	ldr	r2, [pc, #136]	; (4059b4 <SystemCoreClockUpdate+0x104>)
  40592a:	4b1e      	ldr	r3, [pc, #120]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  40592c:	601a      	str	r2, [r3, #0]
          break;
  40592e:	e7c8      	b.n	4058c2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405930:	4b1b      	ldr	r3, [pc, #108]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  405932:	6a1b      	ldr	r3, [r3, #32]
  405934:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405938:	d016      	beq.n	405968 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40593a:	4a1c      	ldr	r2, [pc, #112]	; (4059ac <SystemCoreClockUpdate+0xfc>)
  40593c:	4b19      	ldr	r3, [pc, #100]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  40593e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405940:	4b17      	ldr	r3, [pc, #92]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  405942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405944:	f003 0303 	and.w	r3, r3, #3
  405948:	2b02      	cmp	r3, #2
  40594a:	d1ba      	bne.n	4058c2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40594c:	4a14      	ldr	r2, [pc, #80]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  40594e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405950:	6a92      	ldr	r2, [r2, #40]	; 0x28
  405952:	4814      	ldr	r0, [pc, #80]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405954:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405958:	6803      	ldr	r3, [r0, #0]
  40595a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40595e:	b2d2      	uxtb	r2, r2
  405960:	fbb3 f3f2 	udiv	r3, r3, r2
  405964:	6003      	str	r3, [r0, #0]
  405966:	e7ac      	b.n	4058c2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405968:	4a11      	ldr	r2, [pc, #68]	; (4059b0 <SystemCoreClockUpdate+0x100>)
  40596a:	4b0e      	ldr	r3, [pc, #56]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  40596c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40596e:	4b0c      	ldr	r3, [pc, #48]	; (4059a0 <SystemCoreClockUpdate+0xf0>)
  405970:	6a1b      	ldr	r3, [r3, #32]
  405972:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405976:	2b10      	cmp	r3, #16
  405978:	d005      	beq.n	405986 <SystemCoreClockUpdate+0xd6>
  40597a:	2b20      	cmp	r3, #32
  40597c:	d1e0      	bne.n	405940 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40597e:	4a0b      	ldr	r2, [pc, #44]	; (4059ac <SystemCoreClockUpdate+0xfc>)
  405980:	4b08      	ldr	r3, [pc, #32]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  405982:	601a      	str	r2, [r3, #0]
          break;
  405984:	e7dc      	b.n	405940 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  405986:	4a0b      	ldr	r2, [pc, #44]	; (4059b4 <SystemCoreClockUpdate+0x104>)
  405988:	4b06      	ldr	r3, [pc, #24]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  40598a:	601a      	str	r2, [r3, #0]
          break;
  40598c:	e7d8      	b.n	405940 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40598e:	4a05      	ldr	r2, [pc, #20]	; (4059a4 <SystemCoreClockUpdate+0xf4>)
  405990:	6813      	ldr	r3, [r2, #0]
  405992:	4909      	ldr	r1, [pc, #36]	; (4059b8 <SystemCoreClockUpdate+0x108>)
  405994:	fba1 1303 	umull	r1, r3, r1, r3
  405998:	085b      	lsrs	r3, r3, #1
  40599a:	6013      	str	r3, [r2, #0]
  40599c:	4770      	bx	lr
  40599e:	bf00      	nop
  4059a0:	400e0600 	.word	0x400e0600
  4059a4:	2040001c 	.word	0x2040001c
  4059a8:	400e1810 	.word	0x400e1810
  4059ac:	00b71b00 	.word	0x00b71b00
  4059b0:	003d0900 	.word	0x003d0900
  4059b4:	007a1200 	.word	0x007a1200
  4059b8:	aaaaaaab 	.word	0xaaaaaaab

004059bc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4059bc:	4b12      	ldr	r3, [pc, #72]	; (405a08 <system_init_flash+0x4c>)
  4059be:	4298      	cmp	r0, r3
  4059c0:	d911      	bls.n	4059e6 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4059c2:	4b12      	ldr	r3, [pc, #72]	; (405a0c <system_init_flash+0x50>)
  4059c4:	4298      	cmp	r0, r3
  4059c6:	d913      	bls.n	4059f0 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4059c8:	4b11      	ldr	r3, [pc, #68]	; (405a10 <system_init_flash+0x54>)
  4059ca:	4298      	cmp	r0, r3
  4059cc:	d914      	bls.n	4059f8 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4059ce:	4b11      	ldr	r3, [pc, #68]	; (405a14 <system_init_flash+0x58>)
  4059d0:	4298      	cmp	r0, r3
  4059d2:	d915      	bls.n	405a00 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4059d4:	4b10      	ldr	r3, [pc, #64]	; (405a18 <system_init_flash+0x5c>)
  4059d6:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4059d8:	bf94      	ite	ls
  4059da:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4059de:	4a0f      	ldrhi	r2, [pc, #60]	; (405a1c <system_init_flash+0x60>)
  4059e0:	4b0f      	ldr	r3, [pc, #60]	; (405a20 <system_init_flash+0x64>)
  4059e2:	601a      	str	r2, [r3, #0]
  4059e4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4059e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4059ea:	4b0d      	ldr	r3, [pc, #52]	; (405a20 <system_init_flash+0x64>)
  4059ec:	601a      	str	r2, [r3, #0]
  4059ee:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4059f0:	4a0c      	ldr	r2, [pc, #48]	; (405a24 <system_init_flash+0x68>)
  4059f2:	4b0b      	ldr	r3, [pc, #44]	; (405a20 <system_init_flash+0x64>)
  4059f4:	601a      	str	r2, [r3, #0]
  4059f6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4059f8:	4a0b      	ldr	r2, [pc, #44]	; (405a28 <system_init_flash+0x6c>)
  4059fa:	4b09      	ldr	r3, [pc, #36]	; (405a20 <system_init_flash+0x64>)
  4059fc:	601a      	str	r2, [r3, #0]
  4059fe:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405a00:	4a0a      	ldr	r2, [pc, #40]	; (405a2c <system_init_flash+0x70>)
  405a02:	4b07      	ldr	r3, [pc, #28]	; (405a20 <system_init_flash+0x64>)
  405a04:	601a      	str	r2, [r3, #0]
  405a06:	4770      	bx	lr
  405a08:	01312cff 	.word	0x01312cff
  405a0c:	026259ff 	.word	0x026259ff
  405a10:	039386ff 	.word	0x039386ff
  405a14:	04c4b3ff 	.word	0x04c4b3ff
  405a18:	05f5e0ff 	.word	0x05f5e0ff
  405a1c:	04000500 	.word	0x04000500
  405a20:	400e0c00 	.word	0x400e0c00
  405a24:	04000100 	.word	0x04000100
  405a28:	04000200 	.word	0x04000200
  405a2c:	04000300 	.word	0x04000300

00405a30 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405a30:	4b0a      	ldr	r3, [pc, #40]	; (405a5c <_sbrk+0x2c>)
  405a32:	681b      	ldr	r3, [r3, #0]
  405a34:	b153      	cbz	r3, 405a4c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  405a36:	4b09      	ldr	r3, [pc, #36]	; (405a5c <_sbrk+0x2c>)
  405a38:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405a3a:	181a      	adds	r2, r3, r0
  405a3c:	4908      	ldr	r1, [pc, #32]	; (405a60 <_sbrk+0x30>)
  405a3e:	4291      	cmp	r1, r2
  405a40:	db08      	blt.n	405a54 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  405a42:	4610      	mov	r0, r2
  405a44:	4a05      	ldr	r2, [pc, #20]	; (405a5c <_sbrk+0x2c>)
  405a46:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405a48:	4618      	mov	r0, r3
  405a4a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405a4c:	4a05      	ldr	r2, [pc, #20]	; (405a64 <_sbrk+0x34>)
  405a4e:	4b03      	ldr	r3, [pc, #12]	; (405a5c <_sbrk+0x2c>)
  405a50:	601a      	str	r2, [r3, #0]
  405a52:	e7f0      	b.n	405a36 <_sbrk+0x6>
		return (caddr_t) -1;	
  405a54:	f04f 30ff 	mov.w	r0, #4294967295
}
  405a58:	4770      	bx	lr
  405a5a:	bf00      	nop
  405a5c:	2040c3e4 	.word	0x2040c3e4
  405a60:	2045fffc 	.word	0x2045fffc
  405a64:	2040f260 	.word	0x2040f260

00405a68 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405a68:	f04f 30ff 	mov.w	r0, #4294967295
  405a6c:	4770      	bx	lr

00405a6e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  405a72:	604b      	str	r3, [r1, #4]

	return 0;
}
  405a74:	2000      	movs	r0, #0
  405a76:	4770      	bx	lr

00405a78 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405a78:	2001      	movs	r0, #1
  405a7a:	4770      	bx	lr

00405a7c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405a7c:	2000      	movs	r0, #0
  405a7e:	4770      	bx	lr

00405a80 <resolve_cb>:
* \param[in] hostIp Server IP.
*
* \return None.
*/
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  405a80:	b510      	push	{r4, lr}
  405a82:	b082      	sub	sp, #8
  gu32HostIp = hostIp;
  405a84:	4b07      	ldr	r3, [pc, #28]	; (405aa4 <resolve_cb+0x24>)
  405a86:	6019      	str	r1, [r3, #0]
  gbHostIpByName = true;
  printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
  (int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405a88:	0e0b      	lsrs	r3, r1, #24
  printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405a8a:	9301      	str	r3, [sp, #4]
  405a8c:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405a90:	9300      	str	r3, [sp, #0]
  405a92:	f3c1 2307 	ubfx	r3, r1, #8, #8
  405a96:	b2ca      	uxtb	r2, r1
  405a98:	4601      	mov	r1, r0
  405a9a:	4803      	ldr	r0, [pc, #12]	; (405aa8 <resolve_cb+0x28>)
  405a9c:	4c03      	ldr	r4, [pc, #12]	; (405aac <resolve_cb+0x2c>)
  405a9e:	47a0      	blx	r4
}
  405aa0:	b002      	add	sp, #8
  405aa2:	bd10      	pop	{r4, pc}
  405aa4:	2040cedc 	.word	0x2040cedc
  405aa8:	0040dc20 	.word	0x0040dc20
  405aac:	00406239 	.word	0x00406239

00405ab0 <but_callback>:
void but_callback(void){
  405ab0:	b500      	push	{lr}
  405ab2:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  405ab4:	a902      	add	r1, sp, #8
  405ab6:	2300      	movs	r3, #0
  405ab8:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xSemaphoreBut, &xHigherPriorityTaskWoken);	
  405abc:	4b03      	ldr	r3, [pc, #12]	; (405acc <but_callback+0x1c>)
  405abe:	6818      	ldr	r0, [r3, #0]
  405ac0:	4b03      	ldr	r3, [pc, #12]	; (405ad0 <but_callback+0x20>)
  405ac2:	4798      	blx	r3
}
  405ac4:	b003      	add	sp, #12
  405ac6:	f85d fb04 	ldr.w	pc, [sp], #4
  405aca:	bf00      	nop
  405acc:	2040d030 	.word	0x2040d030
  405ad0:	00400ed5 	.word	0x00400ed5

00405ad4 <task_wifi>:
      default: state = WAIT;
    }
  }
}

static void task_wifi(void *pvParameters) {
  405ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  405ad6:	b08d      	sub	sp, #52	; 0x34
  tstrWifiInitParam param;
  struct sockaddr_in addr_in;

  xSemaphore = xSemaphoreCreateCounting(20,0);
  405ad8:	2100      	movs	r1, #0
  405ada:	2014      	movs	r0, #20
  405adc:	4b3b      	ldr	r3, [pc, #236]	; (405bcc <task_wifi+0xf8>)
  405ade:	4798      	blx	r3
  405ae0:	4b3b      	ldr	r3, [pc, #236]	; (405bd0 <task_wifi+0xfc>)
  405ae2:	6018      	str	r0, [r3, #0]
  xQueueMsg = xQueueCreate(10, sizeof(tstrSocketRecvMsg));
  405ae4:	2200      	movs	r2, #0
  405ae6:	2118      	movs	r1, #24
  405ae8:	200a      	movs	r0, #10
  405aea:	4b3a      	ldr	r3, [pc, #232]	; (405bd4 <task_wifi+0x100>)
  405aec:	4798      	blx	r3
  405aee:	4b3a      	ldr	r3, [pc, #232]	; (405bd8 <task_wifi+0x104>)
  405af0:	6018      	str	r0, [r3, #0]

  /* Initialize the BSP. */
  nm_bsp_init();
  405af2:	4b3a      	ldr	r3, [pc, #232]	; (405bdc <task_wifi+0x108>)
  405af4:	4798      	blx	r3

  /* Initialize Wi-Fi parameters structure. */
  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  405af6:	2300      	movs	r3, #0
  405af8:	9307      	str	r3, [sp, #28]
  405afa:	9308      	str	r3, [sp, #32]
  405afc:	9309      	str	r3, [sp, #36]	; 0x24
  405afe:	930a      	str	r3, [sp, #40]	; 0x28
  405b00:	930b      	str	r3, [sp, #44]	; 0x2c

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
  405b02:	4b37      	ldr	r3, [pc, #220]	; (405be0 <task_wifi+0x10c>)
  405b04:	9306      	str	r3, [sp, #24]
  int8_t ret = m2m_wifi_init(&param);
  405b06:	a806      	add	r0, sp, #24
  405b08:	4b36      	ldr	r3, [pc, #216]	; (405be4 <task_wifi+0x110>)
  405b0a:	4798      	blx	r3
  if (M2M_SUCCESS != ret) {
  405b0c:	b120      	cbz	r0, 405b18 <task_wifi+0x44>
  405b0e:	4601      	mov	r1, r0
    printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  405b10:	4835      	ldr	r0, [pc, #212]	; (405be8 <task_wifi+0x114>)
  405b12:	4b36      	ldr	r3, [pc, #216]	; (405bec <task_wifi+0x118>)
  405b14:	4798      	blx	r3
  405b16:	e7fe      	b.n	405b16 <task_wifi+0x42>
    while (1) { }
  }

  /* Initialize socket module. */
  socketInit();
  405b18:	4b35      	ldr	r3, [pc, #212]	; (405bf0 <task_wifi+0x11c>)
  405b1a:	4798      	blx	r3

  /* Register socket callback function. */
  registerSocketCallback(socket_cb, resolve_cb);
  405b1c:	4935      	ldr	r1, [pc, #212]	; (405bf4 <task_wifi+0x120>)
  405b1e:	4836      	ldr	r0, [pc, #216]	; (405bf8 <task_wifi+0x124>)
  405b20:	4b36      	ldr	r3, [pc, #216]	; (405bfc <task_wifi+0x128>)
  405b22:	4798      	blx	r3

  /* Connect to router. */
  printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  405b24:	4d36      	ldr	r5, [pc, #216]	; (405c00 <task_wifi+0x12c>)
  405b26:	4629      	mov	r1, r5
  405b28:	4836      	ldr	r0, [pc, #216]	; (405c04 <task_wifi+0x130>)
  405b2a:	4c30      	ldr	r4, [pc, #192]	; (405bec <task_wifi+0x118>)
  405b2c:	47a0      	blx	r4
  m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  405b2e:	23ff      	movs	r3, #255	; 0xff
  405b30:	9300      	str	r3, [sp, #0]
  405b32:	4b35      	ldr	r3, [pc, #212]	; (405c08 <task_wifi+0x134>)
  405b34:	2202      	movs	r2, #2
  405b36:	210b      	movs	r1, #11
  405b38:	4628      	mov	r0, r5
  405b3a:	4d34      	ldr	r5, [pc, #208]	; (405c0c <task_wifi+0x138>)
  405b3c:	47a8      	blx	r5

  /* formata ip */
  addr_in.sin_family = AF_INET;
  405b3e:	2302      	movs	r3, #2
  405b40:	f8ad 3008 	strh.w	r3, [sp, #8]
  addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  405b44:	f648 0313 	movw	r3, #34835	; 0x8813
  405b48:	f8ad 300a 	strh.w	r3, [sp, #10]
  inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  405b4c:	a903      	add	r1, sp, #12
  405b4e:	4830      	ldr	r0, [pc, #192]	; (405c10 <task_wifi+0x13c>)
  405b50:	4b30      	ldr	r3, [pc, #192]	; (405c14 <task_wifi+0x140>)
  405b52:	4798      	blx	r3

  printf(STRING_LINE);
  405b54:	4830      	ldr	r0, [pc, #192]	; (405c18 <task_wifi+0x144>)
  405b56:	47a0      	blx	r4

  while(1){
    vTaskDelay(50);
  405b58:	4e30      	ldr	r6, [pc, #192]	; (405c1c <task_wifi+0x148>)
    m2m_wifi_handle_events(NULL);
  405b5a:	4d31      	ldr	r5, [pc, #196]	; (405c20 <task_wifi+0x14c>)

    if (wifi_connected == M2M_WIFI_CONNECTED) {
  405b5c:	4c31      	ldr	r4, [pc, #196]	; (405c24 <task_wifi+0x150>)
  405b5e:	e001      	b.n	405b64 <task_wifi+0x90>
      /* Open client socket. */
      if (tcp_client_socket < 0) {
        printf(STRING_LINE);
        printf("socket init \n");
        if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
          printf("main: failed to create TCP client socket error!\r\n");
  405b60:	4831      	ldr	r0, [pc, #196]	; (405c28 <task_wifi+0x154>)
  405b62:	47b8      	blx	r7
    vTaskDelay(50);
  405b64:	2032      	movs	r0, #50	; 0x32
  405b66:	47b0      	blx	r6
    m2m_wifi_handle_events(NULL);
  405b68:	2000      	movs	r0, #0
  405b6a:	47a8      	blx	r5
    if (wifi_connected == M2M_WIFI_CONNECTED) {
  405b6c:	7823      	ldrb	r3, [r4, #0]
  405b6e:	2b01      	cmp	r3, #1
  405b70:	d1f8      	bne.n	405b64 <task_wifi+0x90>
      if (tcp_client_socket < 0) {
  405b72:	4b2e      	ldr	r3, [pc, #184]	; (405c2c <task_wifi+0x158>)
  405b74:	f993 3000 	ldrsb.w	r3, [r3]
  405b78:	2b00      	cmp	r3, #0
  405b7a:	daf3      	bge.n	405b64 <task_wifi+0x90>
        printf(STRING_LINE);
  405b7c:	4826      	ldr	r0, [pc, #152]	; (405c18 <task_wifi+0x144>)
  405b7e:	4f1b      	ldr	r7, [pc, #108]	; (405bec <task_wifi+0x118>)
  405b80:	47b8      	blx	r7
        printf("socket init \n");
  405b82:	482b      	ldr	r0, [pc, #172]	; (405c30 <task_wifi+0x15c>)
  405b84:	47b8      	blx	r7
        if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405b86:	2200      	movs	r2, #0
  405b88:	2101      	movs	r1, #1
  405b8a:	2002      	movs	r0, #2
  405b8c:	4b29      	ldr	r3, [pc, #164]	; (405c34 <task_wifi+0x160>)
  405b8e:	4798      	blx	r3
  405b90:	4b26      	ldr	r3, [pc, #152]	; (405c2c <task_wifi+0x158>)
  405b92:	7018      	strb	r0, [r3, #0]
  405b94:	2800      	cmp	r0, #0
  405b96:	dbe3      	blt.n	405b60 <task_wifi+0x8c>
          continue;
        }

        /* Connect server */
        printf("socket connecting\n");
  405b98:	4827      	ldr	r0, [pc, #156]	; (405c38 <task_wifi+0x164>)
  405b9a:	4b14      	ldr	r3, [pc, #80]	; (405bec <task_wifi+0x118>)
  405b9c:	4798      	blx	r3
        if (connect(tcp_client_socket, (struct sockaddr *)&addr_in,
  405b9e:	2210      	movs	r2, #16
  405ba0:	a902      	add	r1, sp, #8
  405ba2:	4b22      	ldr	r3, [pc, #136]	; (405c2c <task_wifi+0x158>)
  405ba4:	f993 0000 	ldrsb.w	r0, [r3]
  405ba8:	4b24      	ldr	r3, [pc, #144]	; (405c3c <task_wifi+0x168>)
  405baa:	4798      	blx	r3
  405bac:	b918      	cbnz	r0, 405bb6 <task_wifi+0xe2>
        sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
          close(tcp_client_socket);
          tcp_client_socket = -1;
          printf("main: error connect to socket\n");
          }else{
          gbTcpConnection = true;
  405bae:	2201      	movs	r2, #1
  405bb0:	4b23      	ldr	r3, [pc, #140]	; (405c40 <task_wifi+0x16c>)
  405bb2:	701a      	strb	r2, [r3, #0]
  405bb4:	e7d6      	b.n	405b64 <task_wifi+0x90>
          close(tcp_client_socket);
  405bb6:	4f1d      	ldr	r7, [pc, #116]	; (405c2c <task_wifi+0x158>)
  405bb8:	f997 0000 	ldrsb.w	r0, [r7]
  405bbc:	4b21      	ldr	r3, [pc, #132]	; (405c44 <task_wifi+0x170>)
  405bbe:	4798      	blx	r3
          tcp_client_socket = -1;
  405bc0:	23ff      	movs	r3, #255	; 0xff
  405bc2:	703b      	strb	r3, [r7, #0]
          printf("main: error connect to socket\n");
  405bc4:	4820      	ldr	r0, [pc, #128]	; (405c48 <task_wifi+0x174>)
  405bc6:	4b09      	ldr	r3, [pc, #36]	; (405bec <task_wifi+0x118>)
  405bc8:	4798      	blx	r3
  405bca:	e7cb      	b.n	405b64 <task_wifi+0x90>
  405bcc:	00400b91 	.word	0x00400b91
  405bd0:	2040d02c 	.word	0x2040d02c
  405bd4:	00400b15 	.word	0x00400b15
  405bd8:	2040d028 	.word	0x2040d028
  405bdc:	004022b5 	.word	0x004022b5
  405be0:	00405d05 	.word	0x00405d05
  405be4:	00403105 	.word	0x00403105
  405be8:	0040ddbc 	.word	0x0040ddbc
  405bec:	00406239 	.word	0x00406239
  405bf0:	004048b5 	.word	0x004048b5
  405bf4:	00405a81 	.word	0x00405a81
  405bf8:	00405c4d 	.word	0x00405c4d
  405bfc:	004048f9 	.word	0x004048f9
  405c00:	0040dde4 	.word	0x0040dde4
  405c04:	0040ddf0 	.word	0x0040ddf0
  405c08:	0040de14 	.word	0x0040de14
  405c0c:	0040345d 	.word	0x0040345d
  405c10:	0040de24 	.word	0x0040de24
  405c14:	004003f5 	.word	0x004003f5
  405c18:	0040dbc0 	.word	0x0040dbc0
  405c1c:	004017dd 	.word	0x004017dd
  405c20:	00403201 	.word	0x00403201
  405c24:	2040cee0 	.word	0x2040cee0
  405c28:	0040de44 	.word	0x0040de44
  405c2c:	20400024 	.word	0x20400024
  405c30:	0040de34 	.word	0x0040de34
  405c34:	0040490d 	.word	0x0040490d
  405c38:	0040de78 	.word	0x0040de78
  405c3c:	004049ed 	.word	0x004049ed
  405c40:	2040ced8 	.word	0x2040ced8
  405c44:	00404bb9 	.word	0x00404bb9
  405c48:	0040de8c 	.word	0x0040de8c

00405c4c <socket_cb>:
  if (sock == tcp_client_socket) {
  405c4c:	4b23      	ldr	r3, [pc, #140]	; (405cdc <socket_cb+0x90>)
  405c4e:	f993 3000 	ldrsb.w	r3, [r3]
  405c52:	4283      	cmp	r3, r0
  405c54:	d000      	beq.n	405c58 <socket_cb+0xc>
  405c56:	4770      	bx	lr
{
  405c58:	b510      	push	{r4, lr}
  405c5a:	b082      	sub	sp, #8
  405c5c:	4614      	mov	r4, r2
    switch (u8Msg) {
  405c5e:	2905      	cmp	r1, #5
  405c60:	d003      	beq.n	405c6a <socket_cb+0x1e>
  405c62:	2906      	cmp	r1, #6
  405c64:	d01f      	beq.n	405ca6 <socket_cb+0x5a>
}
  405c66:	b002      	add	sp, #8
  405c68:	bd10      	pop	{r4, pc}
        printf("socket_msg_connect\n");
  405c6a:	481d      	ldr	r0, [pc, #116]	; (405ce0 <socket_cb+0x94>)
  405c6c:	4b1d      	ldr	r3, [pc, #116]	; (405ce4 <socket_cb+0x98>)
  405c6e:	4798      	blx	r3
        if (gbTcpConnection) {
  405c70:	4b1d      	ldr	r3, [pc, #116]	; (405ce8 <socket_cb+0x9c>)
  405c72:	781b      	ldrb	r3, [r3, #0]
  405c74:	2b00      	cmp	r3, #0
  405c76:	d0f6      	beq.n	405c66 <socket_cb+0x1a>
          if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  405c78:	b13c      	cbz	r4, 405c8a <socket_cb+0x3e>
  405c7a:	f994 3001 	ldrsb.w	r3, [r4, #1]
  405c7e:	2b00      	cmp	r3, #0
  405c80:	db03      	blt.n	405c8a <socket_cb+0x3e>
            printf("socket_cb: connect ok \n");
  405c82:	481a      	ldr	r0, [pc, #104]	; (405cec <socket_cb+0xa0>)
  405c84:	4b17      	ldr	r3, [pc, #92]	; (405ce4 <socket_cb+0x98>)
  405c86:	4798      	blx	r3
            gbTcpConnected = true;
  405c88:	e7ed      	b.n	405c66 <socket_cb+0x1a>
            printf("socket_cb: connect error!\r\n");
  405c8a:	4819      	ldr	r0, [pc, #100]	; (405cf0 <socket_cb+0xa4>)
  405c8c:	4b15      	ldr	r3, [pc, #84]	; (405ce4 <socket_cb+0x98>)
  405c8e:	4798      	blx	r3
            gbTcpConnection = false;
  405c90:	2200      	movs	r2, #0
  405c92:	4b15      	ldr	r3, [pc, #84]	; (405ce8 <socket_cb+0x9c>)
  405c94:	701a      	strb	r2, [r3, #0]
            close(tcp_client_socket);
  405c96:	4c11      	ldr	r4, [pc, #68]	; (405cdc <socket_cb+0x90>)
  405c98:	f994 0000 	ldrsb.w	r0, [r4]
  405c9c:	4b15      	ldr	r3, [pc, #84]	; (405cf4 <socket_cb+0xa8>)
  405c9e:	4798      	blx	r3
            tcp_client_socket = -1;
  405ca0:	23ff      	movs	r3, #255	; 0xff
  405ca2:	7023      	strb	r3, [r4, #0]
  405ca4:	e7df      	b.n	405c66 <socket_cb+0x1a>
        tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
  405ca6:	9201      	str	r2, [sp, #4]
        if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405ca8:	b18a      	cbz	r2, 405cce <socket_cb+0x82>
  405caa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  405cae:	2a00      	cmp	r2, #0
  405cb0:	dd0d      	ble.n	405cce <socket_cb+0x82>
          xQueueSend(xQueueMsg, &pstrRecv, 10);
  405cb2:	2300      	movs	r3, #0
  405cb4:	220a      	movs	r2, #10
  405cb6:	a901      	add	r1, sp, #4
  405cb8:	480f      	ldr	r0, [pc, #60]	; (405cf8 <socket_cb+0xac>)
  405cba:	6800      	ldr	r0, [r0, #0]
  405cbc:	4c0f      	ldr	r4, [pc, #60]	; (405cfc <socket_cb+0xb0>)
  405cbe:	47a0      	blx	r4
          xSemaphoreGive( xSemaphore );
  405cc0:	2300      	movs	r3, #0
  405cc2:	461a      	mov	r2, r3
  405cc4:	4619      	mov	r1, r3
  405cc6:	480e      	ldr	r0, [pc, #56]	; (405d00 <socket_cb+0xb4>)
  405cc8:	6800      	ldr	r0, [r0, #0]
  405cca:	47a0      	blx	r4
  405ccc:	e7cb      	b.n	405c66 <socket_cb+0x1a>
          close(tcp_client_socket);
  405cce:	4618      	mov	r0, r3
  405cd0:	4b08      	ldr	r3, [pc, #32]	; (405cf4 <socket_cb+0xa8>)
  405cd2:	4798      	blx	r3
          tcp_client_socket = -1;
  405cd4:	22ff      	movs	r2, #255	; 0xff
  405cd6:	4b01      	ldr	r3, [pc, #4]	; (405cdc <socket_cb+0x90>)
  405cd8:	701a      	strb	r2, [r3, #0]
}
  405cda:	e7c4      	b.n	405c66 <socket_cb+0x1a>
  405cdc:	20400024 	.word	0x20400024
  405ce0:	0040dc50 	.word	0x0040dc50
  405ce4:	00406239 	.word	0x00406239
  405ce8:	2040ced8 	.word	0x2040ced8
  405cec:	0040dc64 	.word	0x0040dc64
  405cf0:	0040dc7c 	.word	0x0040dc7c
  405cf4:	00404bb9 	.word	0x00404bb9
  405cf8:	2040d028 	.word	0x2040d028
  405cfc:	00400bf1 	.word	0x00400bf1
  405d00:	2040d02c 	.word	0x2040d02c

00405d04 <wifi_cb>:
{
  405d04:	b510      	push	{r4, lr}
  405d06:	b082      	sub	sp, #8
  switch (u8MsgType) {
  405d08:	282c      	cmp	r0, #44	; 0x2c
  405d0a:	d005      	beq.n	405d18 <wifi_cb+0x14>
  405d0c:	2832      	cmp	r0, #50	; 0x32
  405d0e:	d015      	beq.n	405d3c <wifi_cb+0x38>
  405d10:	281b      	cmp	r0, #27
  405d12:	d020      	beq.n	405d56 <wifi_cb+0x52>
}
  405d14:	b002      	add	sp, #8
  405d16:	bd10      	pop	{r4, pc}
      if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  405d18:	780b      	ldrb	r3, [r1, #0]
  405d1a:	2b01      	cmp	r3, #1
  405d1c:	d008      	beq.n	405d30 <wifi_cb+0x2c>
        } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  405d1e:	2b00      	cmp	r3, #0
  405d20:	d1f8      	bne.n	405d14 <wifi_cb+0x10>
        printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  405d22:	4813      	ldr	r0, [pc, #76]	; (405d70 <wifi_cb+0x6c>)
  405d24:	4b13      	ldr	r3, [pc, #76]	; (405d74 <wifi_cb+0x70>)
  405d26:	4798      	blx	r3
        wifi_connected = 0;
  405d28:	2200      	movs	r2, #0
  405d2a:	4b13      	ldr	r3, [pc, #76]	; (405d78 <wifi_cb+0x74>)
  405d2c:	701a      	strb	r2, [r3, #0]
  405d2e:	e7f1      	b.n	405d14 <wifi_cb+0x10>
        printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  405d30:	4812      	ldr	r0, [pc, #72]	; (405d7c <wifi_cb+0x78>)
  405d32:	4b10      	ldr	r3, [pc, #64]	; (405d74 <wifi_cb+0x70>)
  405d34:	4798      	blx	r3
        m2m_wifi_request_dhcp_client();
  405d36:	4b12      	ldr	r3, [pc, #72]	; (405d80 <wifi_cb+0x7c>)
  405d38:	4798      	blx	r3
  405d3a:	e7eb      	b.n	405d14 <wifi_cb+0x10>
      printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  405d3c:	788b      	ldrb	r3, [r1, #2]
  405d3e:	784a      	ldrb	r2, [r1, #1]
  405d40:	7808      	ldrb	r0, [r1, #0]
  405d42:	78c9      	ldrb	r1, [r1, #3]
  405d44:	9100      	str	r1, [sp, #0]
  405d46:	4601      	mov	r1, r0
  405d48:	480e      	ldr	r0, [pc, #56]	; (405d84 <wifi_cb+0x80>)
  405d4a:	4c0a      	ldr	r4, [pc, #40]	; (405d74 <wifi_cb+0x70>)
  405d4c:	47a0      	blx	r4
      wifi_connected = M2M_WIFI_CONNECTED;
  405d4e:	2201      	movs	r2, #1
  405d50:	4b09      	ldr	r3, [pc, #36]	; (405d78 <wifi_cb+0x74>)
  405d52:	701a      	strb	r2, [r3, #0]
      break;
  405d54:	e7de      	b.n	405d14 <wifi_cb+0x10>
      printf("socket_cb: Year: %d, Month: %d, The GMT time is %u:%02u:%02u\r\n",
  405d56:	790b      	ldrb	r3, [r1, #4]
  405d58:	788a      	ldrb	r2, [r1, #2]
  405d5a:	8808      	ldrh	r0, [r1, #0]
  405d5c:	798c      	ldrb	r4, [r1, #6]
  405d5e:	9401      	str	r4, [sp, #4]
  405d60:	7949      	ldrb	r1, [r1, #5]
  405d62:	9100      	str	r1, [sp, #0]
  405d64:	4601      	mov	r1, r0
  405d66:	4808      	ldr	r0, [pc, #32]	; (405d88 <wifi_cb+0x84>)
  405d68:	4c02      	ldr	r4, [pc, #8]	; (405d74 <wifi_cb+0x70>)
  405d6a:	47a0      	blx	r4
}
  405d6c:	e7d2      	b.n	405d14 <wifi_cb+0x10>
  405d6e:	bf00      	nop
  405d70:	0040dee4 	.word	0x0040dee4
  405d74:	00406239 	.word	0x00406239
  405d78:	2040cee0 	.word	0x2040cee0
  405d7c:	0040dec4 	.word	0x0040dec4
  405d80:	00403479 	.word	0x00403479
  405d84:	0040df08 	.word	0x0040df08
  405d88:	0040df30 	.word	0x0040df30

00405d8c <vApplicationStackOverflowHook>:
signed char *pcTaskName){
  405d8c:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  405d8e:	460a      	mov	r2, r1
  405d90:	4601      	mov	r1, r0
  405d92:	4802      	ldr	r0, [pc, #8]	; (405d9c <vApplicationStackOverflowHook+0x10>)
  405d94:	4b02      	ldr	r3, [pc, #8]	; (405da0 <vApplicationStackOverflowHook+0x14>)
  405d96:	4798      	blx	r3
  405d98:	e7fe      	b.n	405d98 <vApplicationStackOverflowHook+0xc>
  405d9a:	bf00      	nop
  405d9c:	0040deac 	.word	0x0040deac
  405da0:	00406239 	.word	0x00406239

00405da4 <vApplicationTickHook>:
extern void vApplicationTickHook(void){}
  405da4:	4770      	bx	lr

00405da6 <vApplicationMallocFailedHook>:
  405da6:	f04f 0380 	mov.w	r3, #128	; 0x80
  405daa:	b672      	cpsid	i
  405dac:	f383 8811 	msr	BASEPRI, r3
  405db0:	f3bf 8f6f 	isb	sy
  405db4:	f3bf 8f4f 	dsb	sy
  405db8:	b662      	cpsie	i
  405dba:	e7fe      	b.n	405dba <vApplicationMallocFailedHook+0x14>

00405dbc <init>:
void init(void) {
  405dbc:	b570      	push	{r4, r5, r6, lr}
  405dbe:	b082      	sub	sp, #8
	sysclk_init();
  405dc0:	4b20      	ldr	r3, [pc, #128]	; (405e44 <init+0x88>)
  405dc2:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  405dc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405dc8:	4b1f      	ldr	r3, [pc, #124]	; (405e48 <init+0x8c>)
  405dca:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(LED_PIO_ID);
  405dcc:	200c      	movs	r0, #12
  405dce:	4c1f      	ldr	r4, [pc, #124]	; (405e4c <init+0x90>)
  405dd0:	47a0      	blx	r4
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 1, 0, 0);
  405dd2:	2500      	movs	r5, #0
  405dd4:	9500      	str	r5, [sp, #0]
  405dd6:	462b      	mov	r3, r5
  405dd8:	2201      	movs	r2, #1
  405dda:	f44f 7180 	mov.w	r1, #256	; 0x100
  405dde:	481c      	ldr	r0, [pc, #112]	; (405e50 <init+0x94>)
  405de0:	4e1c      	ldr	r6, [pc, #112]	; (405e54 <init+0x98>)
  405de2:	47b0      	blx	r6
	pmc_enable_periph_clk(BUT_PIO_ID);
  405de4:	200a      	movs	r0, #10
  405de6:	47a0      	blx	r4
	pio_set_input(BUT_PIO,BUT_PIO_IDX_MASK,PIO_DEFAULT);
  405de8:	4c1b      	ldr	r4, [pc, #108]	; (405e58 <init+0x9c>)
  405dea:	462a      	mov	r2, r5
  405dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405df0:	4620      	mov	r0, r4
  405df2:	4b1a      	ldr	r3, [pc, #104]	; (405e5c <init+0xa0>)
  405df4:	4798      	blx	r3
	pio_pull_up(BUT_PIO,BUT_PIO_IDX_MASK,1);
  405df6:	2201      	movs	r2, #1
  405df8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405dfc:	4620      	mov	r0, r4
  405dfe:	4b18      	ldr	r3, [pc, #96]	; (405e60 <init+0xa4>)
  405e00:	4798      	blx	r3
	pio_set_debounce_filter(BUT_PIO_ID, BUT_PIO_IDX_MASK, 60);
  405e02:	223c      	movs	r2, #60	; 0x3c
  405e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405e08:	200a      	movs	r0, #10
  405e0a:	4b16      	ldr	r3, [pc, #88]	; (405e64 <init+0xa8>)
  405e0c:	4798      	blx	r3
	pio_handler_set(BUT_PIO,
  405e0e:	4b16      	ldr	r3, [pc, #88]	; (405e68 <init+0xac>)
  405e10:	9300      	str	r3, [sp, #0]
  405e12:	2370      	movs	r3, #112	; 0x70
  405e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405e18:	210a      	movs	r1, #10
  405e1a:	4620      	mov	r0, r4
  405e1c:	4d13      	ldr	r5, [pc, #76]	; (405e6c <init+0xb0>)
  405e1e:	47a8      	blx	r5
	pio_enable_interrupt(BUT_PIO, BUT_PIO_IDX_MASK);
  405e20:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405e24:	4620      	mov	r0, r4
  405e26:	4b12      	ldr	r3, [pc, #72]	; (405e70 <init+0xb4>)
  405e28:	4798      	blx	r3
	pio_get_interrupt_status(BUT_PIO);
  405e2a:	4620      	mov	r0, r4
  405e2c:	4b11      	ldr	r3, [pc, #68]	; (405e74 <init+0xb8>)
  405e2e:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405e30:	4b11      	ldr	r3, [pc, #68]	; (405e78 <init+0xbc>)
  405e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405e36:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405e38:	2280      	movs	r2, #128	; 0x80
  405e3a:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
}
  405e3e:	b002      	add	sp, #8
  405e40:	bd70      	pop	{r4, r5, r6, pc}
  405e42:	bf00      	nop
  405e44:	00404d1d 	.word	0x00404d1d
  405e48:	400e1850 	.word	0x400e1850
  405e4c:	00405509 	.word	0x00405509
  405e50:	400e1200 	.word	0x400e1200
  405e54:	004050a5 	.word	0x004050a5
  405e58:	400e0e00 	.word	0x400e0e00
  405e5c:	0040506f 	.word	0x0040506f
  405e60:	00404fb1 	.word	0x00404fb1
  405e64:	00404fbb 	.word	0x00404fbb
  405e68:	00405ab1 	.word	0x00405ab1
  405e6c:	00405291 	.word	0x00405291
  405e70:	004050ff 	.word	0x004050ff
  405e74:	00405107 	.word	0x00405107
  405e78:	e000e100 	.word	0xe000e100

00405e7c <format_request>:
void format_request(char *vect, char path) {
  405e7c:	b508      	push	{r3, lr}
	sprintf(vect, "GET %s HTTP/1.1\r\n Accept: */*\r\n\r\n", path);
  405e7e:	460a      	mov	r2, r1
  405e80:	4901      	ldr	r1, [pc, #4]	; (405e88 <format_request+0xc>)
  405e82:	4b02      	ldr	r3, [pc, #8]	; (405e8c <format_request+0x10>)
  405e84:	4798      	blx	r3
  405e86:	bd08      	pop	{r3, pc}
  405e88:	0040db44 	.word	0x0040db44
  405e8c:	004065d1 	.word	0x004065d1

00405e90 <task_process>:
static void task_process(void *pvParameters) {
  405e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e94:	b083      	sub	sp, #12
  printf("task process created \n");
  405e96:	4882      	ldr	r0, [pc, #520]	; (4060a0 <task_process+0x210>)
  405e98:	4b82      	ldr	r3, [pc, #520]	; (4060a4 <task_process+0x214>)
  405e9a:	4798      	blx	r3
  vTaskDelay(1000);
  405e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405ea0:	4b81      	ldr	r3, [pc, #516]	; (4060a8 <task_process+0x218>)
  405ea2:	4798      	blx	r3
  enum states state = WAIT;
  405ea4:	2300      	movs	r3, #0
	int flag_post = 0;
  405ea6:	4699      	mov	r9, r3
      state = WAIT;
  405ea8:	461d      	mov	r5, r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405eaa:	4c80      	ldr	r4, [pc, #512]	; (4060ac <task_process+0x21c>)
	  format_request((char *)g_sendBuffer, "/status");
  405eac:	4a80      	ldr	r2, [pc, #512]	; (4060b0 <task_process+0x220>)
  405eae:	fa5f fb82 	uxtb.w	fp, r2
      state = WAIT;
  405eb2:	469a      	mov	sl, r3
  405eb4:	e002      	b.n	405ebc <task_process+0x2c>
      state = GET;
  405eb6:	2301      	movs	r3, #1
  405eb8:	e000      	b.n	405ebc <task_process+0x2c>
      state = WAIT;
  405eba:	4653      	mov	r3, sl
    switch(state){
  405ebc:	2b06      	cmp	r3, #6
  405ebe:	d8fc      	bhi.n	405eba <task_process+0x2a>
  405ec0:	a201      	add	r2, pc, #4	; (adr r2, 405ec8 <task_process+0x38>)
  405ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405ec6:	bf00      	nop
  405ec8:	00405ee5 	.word	0x00405ee5
  405ecc:	00405f25 	.word	0x00405f25
  405ed0:	00405f53 	.word	0x00405f53
  405ed4:	00405f8f 	.word	0x00405f8f
  405ed8:	00405ff1 	.word	0x00405ff1
  405edc:	00405ebb 	.word	0x00405ebb
  405ee0:	00406095 	.word	0x00406095
      printf("STATE: WAIT \n");
  405ee4:	4873      	ldr	r0, [pc, #460]	; (4060b4 <task_process+0x224>)
  405ee6:	4b6f      	ldr	r3, [pc, #444]	; (4060a4 <task_process+0x214>)
  405ee8:	4798      	blx	r3
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405eea:	4b73      	ldr	r3, [pc, #460]	; (4060b8 <task_process+0x228>)
  405eec:	781b      	ldrb	r3, [r3, #0]
  405eee:	b96b      	cbnz	r3, 405f0c <task_process+0x7c>
  405ef0:	f994 3000 	ldrsb.w	r3, [r4]
  405ef4:	2b00      	cmp	r3, #0
  405ef6:	db09      	blt.n	405f0c <task_process+0x7c>
        vTaskDelay(10);
  405ef8:	4f6b      	ldr	r7, [pc, #428]	; (4060a8 <task_process+0x218>)
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405efa:	4e6f      	ldr	r6, [pc, #444]	; (4060b8 <task_process+0x228>)
        vTaskDelay(10);
  405efc:	200a      	movs	r0, #10
  405efe:	47b8      	blx	r7
      while(gbTcpConnection == false && tcp_client_socket >= 0){
  405f00:	7833      	ldrb	r3, [r6, #0]
  405f02:	b91b      	cbnz	r3, 405f0c <task_process+0x7c>
  405f04:	f994 3000 	ldrsb.w	r3, [r4]
  405f08:	2b00      	cmp	r3, #0
  405f0a:	daf7      	bge.n	405efc <task_process+0x6c>
	  if ((xSemaphoreTake(xSemaphoreBut, 10 / portTICK_PERIOD_MS))) {
  405f0c:	462b      	mov	r3, r5
  405f0e:	220a      	movs	r2, #10
  405f10:	4629      	mov	r1, r5
  405f12:	486a      	ldr	r0, [pc, #424]	; (4060bc <task_process+0x22c>)
  405f14:	6800      	ldr	r0, [r0, #0]
  405f16:	4e6a      	ldr	r6, [pc, #424]	; (4060c0 <task_process+0x230>)
  405f18:	47b0      	blx	r6
  405f1a:	2800      	cmp	r0, #0
  405f1c:	d0cb      	beq.n	405eb6 <task_process+0x26>
      state = GET;
  405f1e:	2301      	movs	r3, #1
		flag_post = 1;
  405f20:	4699      	mov	r9, r3
  405f22:	e7cb      	b.n	405ebc <task_process+0x2c>
      printf("STATE: GET \n");
  405f24:	4867      	ldr	r0, [pc, #412]	; (4060c4 <task_process+0x234>)
  405f26:	4f5f      	ldr	r7, [pc, #380]	; (4060a4 <task_process+0x214>)
  405f28:	47b8      	blx	r7
	  format_request((char *)g_sendBuffer, "/status");
  405f2a:	4e67      	ldr	r6, [pc, #412]	; (4060c8 <task_process+0x238>)
  405f2c:	4659      	mov	r1, fp
  405f2e:	4630      	mov	r0, r6
  405f30:	4b66      	ldr	r3, [pc, #408]	; (4060cc <task_process+0x23c>)
  405f32:	4798      	blx	r3
	  printf("\n%s a string\n", g_sendBuffer);
  405f34:	4631      	mov	r1, r6
  405f36:	4866      	ldr	r0, [pc, #408]	; (4060d0 <task_process+0x240>)
  405f38:	47b8      	blx	r7
      send(tcp_client_socket, g_sendBuffer, strlen((char *)g_sendBuffer), 0);
  405f3a:	4630      	mov	r0, r6
  405f3c:	4b65      	ldr	r3, [pc, #404]	; (4060d4 <task_process+0x244>)
  405f3e:	4798      	blx	r3
  405f40:	462b      	mov	r3, r5
  405f42:	b282      	uxth	r2, r0
  405f44:	4631      	mov	r1, r6
  405f46:	f994 0000 	ldrsb.w	r0, [r4]
  405f4a:	4e63      	ldr	r6, [pc, #396]	; (4060d8 <task_process+0x248>)
  405f4c:	47b0      	blx	r6
      state = ACK;
  405f4e:	2303      	movs	r3, #3
      break;
  405f50:	e7b4      	b.n	405ebc <task_process+0x2c>
	  printf("STATE: POST \n");
  405f52:	4862      	ldr	r0, [pc, #392]	; (4060dc <task_process+0x24c>)
  405f54:	4b53      	ldr	r3, [pc, #332]	; (4060a4 <task_process+0x214>)
  405f56:	4798      	blx	r3
	  contentLength = strlen(POSTDATA);
  405f58:	4b61      	ldr	r3, [pc, #388]	; (4060e0 <task_process+0x250>)
  405f5a:	f8d3 8000 	ldr.w	r8, [r3]
  405f5e:	4640      	mov	r0, r8
  405f60:	4f5c      	ldr	r7, [pc, #368]	; (4060d4 <task_process+0x244>)
  405f62:	47b8      	blx	r7
  405f64:	4602      	mov	r2, r0
  405f66:	4b5f      	ldr	r3, [pc, #380]	; (4060e4 <task_process+0x254>)
  405f68:	6018      	str	r0, [r3, #0]
	  sprintf((char *)g_sendBuffer, "POST /status HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: %d\n\n%s",
  405f6a:	4e57      	ldr	r6, [pc, #348]	; (4060c8 <task_process+0x238>)
  405f6c:	4643      	mov	r3, r8
  405f6e:	495e      	ldr	r1, [pc, #376]	; (4060e8 <task_process+0x258>)
  405f70:	4630      	mov	r0, r6
  405f72:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 40613c <task_process+0x2ac>
  405f76:	47c0      	blx	r8
	  send(tcp_client_socket, g_sendBuffer, strlen((char *)g_sendBuffer), 0);
  405f78:	4630      	mov	r0, r6
  405f7a:	47b8      	blx	r7
  405f7c:	462b      	mov	r3, r5
  405f7e:	b282      	uxth	r2, r0
  405f80:	4631      	mov	r1, r6
  405f82:	f994 0000 	ldrsb.w	r0, [r4]
  405f86:	4e54      	ldr	r6, [pc, #336]	; (4060d8 <task_process+0x248>)
  405f88:	47b0      	blx	r6
	  state = ACK;
  405f8a:	2303      	movs	r3, #3
	  break;
  405f8c:	e796      	b.n	405ebc <task_process+0x2c>
      printf("STATE: ACK \n");
  405f8e:	4857      	ldr	r0, [pc, #348]	; (4060ec <task_process+0x25c>)
  405f90:	4b44      	ldr	r3, [pc, #272]	; (4060a4 <task_process+0x214>)
  405f92:	4798      	blx	r3
      memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405f94:	4e56      	ldr	r6, [pc, #344]	; (4060f0 <task_process+0x260>)
  405f96:	f44f 67af 	mov.w	r7, #1400	; 0x578
  405f9a:	463a      	mov	r2, r7
  405f9c:	4629      	mov	r1, r5
  405f9e:	4630      	mov	r0, r6
  405fa0:	4b54      	ldr	r3, [pc, #336]	; (4060f4 <task_process+0x264>)
  405fa2:	4798      	blx	r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  405fa4:	462b      	mov	r3, r5
  405fa6:	463a      	mov	r2, r7
  405fa8:	4631      	mov	r1, r6
  405faa:	f994 0000 	ldrsb.w	r0, [r4]
  405fae:	4e52      	ldr	r6, [pc, #328]	; (4060f8 <task_process+0x268>)
  405fb0:	47b0      	blx	r6
	  if (flag_post) {
  405fb2:	f1b9 0f00 	cmp.w	r9, #0
  405fb6:	d002      	beq.n	405fbe <task_process+0x12e>
		state = DONE;
  405fb8:	2306      	movs	r3, #6
		flag_post = 0;
  405fba:	46a9      	mov	r9, r5
  405fbc:	e77e      	b.n	405ebc <task_process+0x2c>
      if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  405fbe:	462b      	mov	r3, r5
  405fc0:	f241 3288 	movw	r2, #5000	; 0x1388
  405fc4:	a901      	add	r1, sp, #4
  405fc6:	484d      	ldr	r0, [pc, #308]	; (4060fc <task_process+0x26c>)
  405fc8:	6800      	ldr	r0, [r0, #0]
  405fca:	4e3d      	ldr	r6, [pc, #244]	; (4060c0 <task_process+0x230>)
  405fcc:	47b0      	blx	r6
  405fce:	2801      	cmp	r0, #1
  405fd0:	d001      	beq.n	405fd6 <task_process+0x146>
        state = TIMEOUT;
  405fd2:	2305      	movs	r3, #5
  405fd4:	e772      	b.n	405ebc <task_process+0x2c>
        printf(STRING_LINE);
  405fd6:	4f4a      	ldr	r7, [pc, #296]	; (406100 <task_process+0x270>)
  405fd8:	4638      	mov	r0, r7
  405fda:	4e32      	ldr	r6, [pc, #200]	; (4060a4 <task_process+0x214>)
  405fdc:	47b0      	blx	r6
        printf(p_recvMsg->pu8Buffer);
  405fde:	9b01      	ldr	r3, [sp, #4]
  405fe0:	6818      	ldr	r0, [r3, #0]
  405fe2:	47b0      	blx	r6
        printf(STRING_EOL);  printf(STRING_LINE);
  405fe4:	4847      	ldr	r0, [pc, #284]	; (406104 <task_process+0x274>)
  405fe6:	47b0      	blx	r6
  405fe8:	4638      	mov	r0, r7
  405fea:	47b0      	blx	r6
        state = MSG;
  405fec:	2304      	movs	r3, #4
  405fee:	e765      	b.n	405ebc <task_process+0x2c>
      printf("STATE: MSG \n");
  405ff0:	4845      	ldr	r0, [pc, #276]	; (406108 <task_process+0x278>)
  405ff2:	4b2c      	ldr	r3, [pc, #176]	; (4060a4 <task_process+0x214>)
  405ff4:	4798      	blx	r3
      memset(g_receivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405ff6:	4e3e      	ldr	r6, [pc, #248]	; (4060f0 <task_process+0x260>)
  405ff8:	f44f 67af 	mov.w	r7, #1400	; 0x578
  405ffc:	463a      	mov	r2, r7
  405ffe:	4629      	mov	r1, r5
  406000:	4630      	mov	r0, r6
  406002:	4b3c      	ldr	r3, [pc, #240]	; (4060f4 <task_process+0x264>)
  406004:	4798      	blx	r3
      recv(tcp_client_socket, &g_receivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  406006:	462b      	mov	r3, r5
  406008:	463a      	mov	r2, r7
  40600a:	4631      	mov	r1, r6
  40600c:	f994 0000 	ldrsb.w	r0, [r4]
  406010:	4e39      	ldr	r6, [pc, #228]	; (4060f8 <task_process+0x268>)
  406012:	47b0      	blx	r6
      if(xQueueReceive(xQueueMsg, &p_recvMsg, 5000) == pdTRUE){
  406014:	462b      	mov	r3, r5
  406016:	f241 3288 	movw	r2, #5000	; 0x1388
  40601a:	a901      	add	r1, sp, #4
  40601c:	4837      	ldr	r0, [pc, #220]	; (4060fc <task_process+0x26c>)
  40601e:	6800      	ldr	r0, [r0, #0]
  406020:	4e27      	ldr	r6, [pc, #156]	; (4060c0 <task_process+0x230>)
  406022:	47b0      	blx	r6
  406024:	2801      	cmp	r0, #1
  406026:	d001      	beq.n	40602c <task_process+0x19c>
        state = TIMEOUT;
  406028:	2305      	movs	r3, #5
  40602a:	e747      	b.n	405ebc <task_process+0x2c>
        printf(STRING_LINE);
  40602c:	4f34      	ldr	r7, [pc, #208]	; (406100 <task_process+0x270>)
  40602e:	4638      	mov	r0, r7
  406030:	4e1c      	ldr	r6, [pc, #112]	; (4060a4 <task_process+0x214>)
  406032:	47b0      	blx	r6
        printf(p_recvMsg->pu8Buffer);
  406034:	9b01      	ldr	r3, [sp, #4]
  406036:	6818      	ldr	r0, [r3, #0]
  406038:	47b0      	blx	r6
        printf(STRING_EOL);  printf(STRING_LINE);
  40603a:	4832      	ldr	r0, [pc, #200]	; (406104 <task_process+0x274>)
  40603c:	47b0      	blx	r6
  40603e:	4638      	mov	r0, r7
  406040:	47b0      	blx	r6
		char *p = strstr(p_recvMsg->pu8Buffer, "led")+6;
  406042:	4932      	ldr	r1, [pc, #200]	; (40610c <task_process+0x27c>)
  406044:	9b01      	ldr	r3, [sp, #4]
  406046:	6818      	ldr	r0, [r3, #0]
  406048:	4b31      	ldr	r3, [pc, #196]	; (406110 <task_process+0x280>)
  40604a:	4798      	blx	r3
  40604c:	1d87      	adds	r7, r0, #6
		uint32_t k = p[1]-48;
  40604e:	79c1      	ldrb	r1, [r0, #7]
		printf("O valor de %d\n", k);
  406050:	3930      	subs	r1, #48	; 0x30
  406052:	4830      	ldr	r0, [pc, #192]	; (406114 <task_process+0x284>)
  406054:	47b0      	blx	r6
		if (strcmp(p,"0") == 0) {
  406056:	4930      	ldr	r1, [pc, #192]	; (406118 <task_process+0x288>)
  406058:	4638      	mov	r0, r7
  40605a:	4b30      	ldr	r3, [pc, #192]	; (40611c <task_process+0x28c>)
  40605c:	4798      	blx	r3
  40605e:	b130      	cbz	r0, 40606e <task_process+0x1de>
		} else if (strcmp(p,"1") == 0) {
  406060:	492f      	ldr	r1, [pc, #188]	; (406120 <task_process+0x290>)
  406062:	4638      	mov	r0, r7
  406064:	4b2d      	ldr	r3, [pc, #180]	; (40611c <task_process+0x28c>)
  406066:	4798      	blx	r3
  406068:	b150      	cbz	r0, 406080 <task_process+0x1f0>
        state = DONE;
  40606a:	2306      	movs	r3, #6
  40606c:	e726      	b.n	405ebc <task_process+0x2c>
			printf("DESLIGADO");
  40606e:	482d      	ldr	r0, [pc, #180]	; (406124 <task_process+0x294>)
  406070:	47b0      	blx	r6
			pio_set(LED_PIO, LED_PIO_IDX_MASK);
  406072:	f44f 7180 	mov.w	r1, #256	; 0x100
  406076:	482c      	ldr	r0, [pc, #176]	; (406128 <task_process+0x298>)
  406078:	4b2c      	ldr	r3, [pc, #176]	; (40612c <task_process+0x29c>)
  40607a:	4798      	blx	r3
        state = DONE;
  40607c:	2306      	movs	r3, #6
  40607e:	e71d      	b.n	405ebc <task_process+0x2c>
			printf("LIGADO");
  406080:	482b      	ldr	r0, [pc, #172]	; (406130 <task_process+0x2a0>)
  406082:	4b08      	ldr	r3, [pc, #32]	; (4060a4 <task_process+0x214>)
  406084:	4798      	blx	r3
			pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  406086:	f44f 7180 	mov.w	r1, #256	; 0x100
  40608a:	4827      	ldr	r0, [pc, #156]	; (406128 <task_process+0x298>)
  40608c:	4b29      	ldr	r3, [pc, #164]	; (406134 <task_process+0x2a4>)
  40608e:	4798      	blx	r3
        state = DONE;
  406090:	2306      	movs	r3, #6
  406092:	e713      	b.n	405ebc <task_process+0x2c>
      printf("STATE: DONE \n");
  406094:	4828      	ldr	r0, [pc, #160]	; (406138 <task_process+0x2a8>)
  406096:	4b03      	ldr	r3, [pc, #12]	; (4060a4 <task_process+0x214>)
  406098:	4798      	blx	r3
      state = WAIT;
  40609a:	462b      	mov	r3, r5
      break;
  40609c:	e70e      	b.n	405ebc <task_process+0x2c>
  40609e:	bf00      	nop
  4060a0:	0040dca0 	.word	0x0040dca0
  4060a4:	00406239 	.word	0x00406239
  4060a8:	004017dd 	.word	0x004017dd
  4060ac:	20400024 	.word	0x20400024
  4060b0:	0040dcd8 	.word	0x0040dcd8
  4060b4:	0040dcb8 	.word	0x0040dcb8
  4060b8:	2040ced8 	.word	0x2040ced8
  4060bc:	2040d030 	.word	0x2040d030
  4060c0:	00400fb5 	.word	0x00400fb5
  4060c4:	0040dcc8 	.word	0x0040dcc8
  4060c8:	2040c960 	.word	0x2040c960
  4060cc:	00405e7d 	.word	0x00405e7d
  4060d0:	0040dce0 	.word	0x0040dce0
  4060d4:	00406901 	.word	0x00406901
  4060d8:	00404a7d 	.word	0x00404a7d
  4060dc:	0040dcf0 	.word	0x0040dcf0
  4060e0:	20400020 	.word	0x20400020
  4060e4:	2040d034 	.word	0x2040d034
  4060e8:	0040dd00 	.word	0x0040dd00
  4060ec:	0040dd60 	.word	0x0040dd60
  4060f0:	2040c3e8 	.word	0x2040c3e8
  4060f4:	00406395 	.word	0x00406395
  4060f8:	00404b19 	.word	0x00404b19
  4060fc:	2040d028 	.word	0x2040d028
  406100:	0040dbc0 	.word	0x0040dbc0
  406104:	0040dbec 	.word	0x0040dbec
  406108:	0040dd70 	.word	0x0040dd70
  40610c:	0040dd80 	.word	0x0040dd80
  406110:	00406c8d 	.word	0x00406c8d
  406114:	0040dd84 	.word	0x0040dd84
  406118:	0040dd94 	.word	0x0040dd94
  40611c:	00406629 	.word	0x00406629
  406120:	0040dc9c 	.word	0x0040dc9c
  406124:	0040dd98 	.word	0x0040dd98
  406128:	400e1200 	.word	0x400e1200
  40612c:	00404fd5 	.word	0x00404fd5
  406130:	0040dda4 	.word	0x0040dda4
  406134:	00404fd9 	.word	0x00404fd9
  406138:	0040ddac 	.word	0x0040ddac
  40613c:	004065d1 	.word	0x004065d1

00406140 <main>:
    }
  }
}

int main(void)
{
  406140:	b500      	push	{lr}
  406142:	b085      	sub	sp, #20
  /* Initialize the board. */
  sysclk_init();
  406144:	4b18      	ldr	r3, [pc, #96]	; (4061a8 <main+0x68>)
  406146:	4798      	blx	r3
  board_init();
  406148:	4b18      	ldr	r3, [pc, #96]	; (4061ac <main+0x6c>)
  40614a:	4798      	blx	r3
  init();
  40614c:	4b18      	ldr	r3, [pc, #96]	; (4061b0 <main+0x70>)
  40614e:	4798      	blx	r3

  /* Initialize the UART console. */
  configure_console();
  406150:	4b18      	ldr	r3, [pc, #96]	; (4061b4 <main+0x74>)
  406152:	4798      	blx	r3
  printf(STRING_HEADER);
  406154:	4818      	ldr	r0, [pc, #96]	; (4061b8 <main+0x78>)
  406156:	4b19      	ldr	r3, [pc, #100]	; (4061bc <main+0x7c>)
  406158:	4798      	blx	r3

  xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL, TASK_WIFI_PRIORITY, &xHandleWifi);
  40615a:	2400      	movs	r4, #0
  40615c:	9403      	str	r4, [sp, #12]
  40615e:	9402      	str	r4, [sp, #8]
  406160:	4b17      	ldr	r3, [pc, #92]	; (4061c0 <main+0x80>)
  406162:	9301      	str	r3, [sp, #4]
  406164:	2501      	movs	r5, #1
  406166:	9500      	str	r5, [sp, #0]
  406168:	4623      	mov	r3, r4
  40616a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  40616e:	4915      	ldr	r1, [pc, #84]	; (4061c4 <main+0x84>)
  406170:	4815      	ldr	r0, [pc, #84]	; (4061c8 <main+0x88>)
  406172:	4e16      	ldr	r6, [pc, #88]	; (4061cc <main+0x8c>)
  406174:	47b0      	blx	r6
  xTaskCreate(task_process, "process", TASK_PROCESS_STACK_SIZE, NULL, TASK_PROCESS_PRIORITY,  NULL );
  406176:	9403      	str	r4, [sp, #12]
  406178:	9402      	str	r4, [sp, #8]
  40617a:	9401      	str	r4, [sp, #4]
  40617c:	9400      	str	r4, [sp, #0]
  40617e:	4623      	mov	r3, r4
  406180:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406184:	4912      	ldr	r1, [pc, #72]	; (4061d0 <main+0x90>)
  406186:	4813      	ldr	r0, [pc, #76]	; (4061d4 <main+0x94>)
  406188:	47b0      	blx	r6
  
  xSemaphoreBut = xSemaphoreCreateBinary();
  40618a:	2203      	movs	r2, #3
  40618c:	4621      	mov	r1, r4
  40618e:	4628      	mov	r0, r5
  406190:	4b11      	ldr	r3, [pc, #68]	; (4061d8 <main+0x98>)
  406192:	4798      	blx	r3
  406194:	4b11      	ldr	r3, [pc, #68]	; (4061dc <main+0x9c>)
  406196:	6018      	str	r0, [r3, #0]
  if (xSemaphoreBut == NULL)
  406198:	b110      	cbz	r0, 4061a0 <main+0x60>
  printf("falha em criar o semaforo but\n");

  vTaskStartScheduler();
  40619a:	4b11      	ldr	r3, [pc, #68]	; (4061e0 <main+0xa0>)
  40619c:	4798      	blx	r3
  40619e:	e7fe      	b.n	40619e <main+0x5e>
  printf("falha em criar o semaforo but\n");
  4061a0:	4810      	ldr	r0, [pc, #64]	; (4061e4 <main+0xa4>)
  4061a2:	4b06      	ldr	r3, [pc, #24]	; (4061bc <main+0x7c>)
  4061a4:	4798      	blx	r3
  4061a6:	e7f8      	b.n	40619a <main+0x5a>
  4061a8:	00404d1d 	.word	0x00404d1d
  4061ac:	00404e19 	.word	0x00404e19
  4061b0:	00405dbd 	.word	0x00405dbd
  4061b4:	0040035d 	.word	0x0040035d
  4061b8:	0040db68 	.word	0x0040db68
  4061bc:	00406239 	.word	0x00406239
  4061c0:	2040cee4 	.word	0x2040cee4
  4061c4:	0040dbf0 	.word	0x0040dbf0
  4061c8:	00405ad5 	.word	0x00405ad5
  4061cc:	00401295 	.word	0x00401295
  4061d0:	0040dbf8 	.word	0x0040dbf8
  4061d4:	00405e91 	.word	0x00405e91
  4061d8:	00400b15 	.word	0x00400b15
  4061dc:	2040d030 	.word	0x2040d030
  4061e0:	004014c9 	.word	0x004014c9
  4061e4:	0040dc00 	.word	0x0040dc00

004061e8 <__libc_init_array>:
  4061e8:	b570      	push	{r4, r5, r6, lr}
  4061ea:	4e0f      	ldr	r6, [pc, #60]	; (406228 <__libc_init_array+0x40>)
  4061ec:	4d0f      	ldr	r5, [pc, #60]	; (40622c <__libc_init_array+0x44>)
  4061ee:	1b76      	subs	r6, r6, r5
  4061f0:	10b6      	asrs	r6, r6, #2
  4061f2:	bf18      	it	ne
  4061f4:	2400      	movne	r4, #0
  4061f6:	d005      	beq.n	406204 <__libc_init_array+0x1c>
  4061f8:	3401      	adds	r4, #1
  4061fa:	f855 3b04 	ldr.w	r3, [r5], #4
  4061fe:	4798      	blx	r3
  406200:	42a6      	cmp	r6, r4
  406202:	d1f9      	bne.n	4061f8 <__libc_init_array+0x10>
  406204:	4e0a      	ldr	r6, [pc, #40]	; (406230 <__libc_init_array+0x48>)
  406206:	4d0b      	ldr	r5, [pc, #44]	; (406234 <__libc_init_array+0x4c>)
  406208:	1b76      	subs	r6, r6, r5
  40620a:	f008 f805 	bl	40e218 <_init>
  40620e:	10b6      	asrs	r6, r6, #2
  406210:	bf18      	it	ne
  406212:	2400      	movne	r4, #0
  406214:	d006      	beq.n	406224 <__libc_init_array+0x3c>
  406216:	3401      	adds	r4, #1
  406218:	f855 3b04 	ldr.w	r3, [r5], #4
  40621c:	4798      	blx	r3
  40621e:	42a6      	cmp	r6, r4
  406220:	d1f9      	bne.n	406216 <__libc_init_array+0x2e>
  406222:	bd70      	pop	{r4, r5, r6, pc}
  406224:	bd70      	pop	{r4, r5, r6, pc}
  406226:	bf00      	nop
  406228:	0040e224 	.word	0x0040e224
  40622c:	0040e224 	.word	0x0040e224
  406230:	0040e22c 	.word	0x0040e22c
  406234:	0040e224 	.word	0x0040e224

00406238 <iprintf>:
  406238:	b40f      	push	{r0, r1, r2, r3}
  40623a:	b500      	push	{lr}
  40623c:	4907      	ldr	r1, [pc, #28]	; (40625c <iprintf+0x24>)
  40623e:	b083      	sub	sp, #12
  406240:	ab04      	add	r3, sp, #16
  406242:	6808      	ldr	r0, [r1, #0]
  406244:	f853 2b04 	ldr.w	r2, [r3], #4
  406248:	6881      	ldr	r1, [r0, #8]
  40624a:	9301      	str	r3, [sp, #4]
  40624c:	f002 f898 	bl	408380 <_vfiprintf_r>
  406250:	b003      	add	sp, #12
  406252:	f85d eb04 	ldr.w	lr, [sp], #4
  406256:	b004      	add	sp, #16
  406258:	4770      	bx	lr
  40625a:	bf00      	nop
  40625c:	20400028 	.word	0x20400028

00406260 <memcpy>:
  406260:	4684      	mov	ip, r0
  406262:	ea41 0300 	orr.w	r3, r1, r0
  406266:	f013 0303 	ands.w	r3, r3, #3
  40626a:	d16d      	bne.n	406348 <memcpy+0xe8>
  40626c:	3a40      	subs	r2, #64	; 0x40
  40626e:	d341      	bcc.n	4062f4 <memcpy+0x94>
  406270:	f851 3b04 	ldr.w	r3, [r1], #4
  406274:	f840 3b04 	str.w	r3, [r0], #4
  406278:	f851 3b04 	ldr.w	r3, [r1], #4
  40627c:	f840 3b04 	str.w	r3, [r0], #4
  406280:	f851 3b04 	ldr.w	r3, [r1], #4
  406284:	f840 3b04 	str.w	r3, [r0], #4
  406288:	f851 3b04 	ldr.w	r3, [r1], #4
  40628c:	f840 3b04 	str.w	r3, [r0], #4
  406290:	f851 3b04 	ldr.w	r3, [r1], #4
  406294:	f840 3b04 	str.w	r3, [r0], #4
  406298:	f851 3b04 	ldr.w	r3, [r1], #4
  40629c:	f840 3b04 	str.w	r3, [r0], #4
  4062a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062a4:	f840 3b04 	str.w	r3, [r0], #4
  4062a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062ac:	f840 3b04 	str.w	r3, [r0], #4
  4062b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062b4:	f840 3b04 	str.w	r3, [r0], #4
  4062b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062bc:	f840 3b04 	str.w	r3, [r0], #4
  4062c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062c4:	f840 3b04 	str.w	r3, [r0], #4
  4062c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062cc:	f840 3b04 	str.w	r3, [r0], #4
  4062d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062d4:	f840 3b04 	str.w	r3, [r0], #4
  4062d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062dc:	f840 3b04 	str.w	r3, [r0], #4
  4062e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4062e4:	f840 3b04 	str.w	r3, [r0], #4
  4062e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062ec:	f840 3b04 	str.w	r3, [r0], #4
  4062f0:	3a40      	subs	r2, #64	; 0x40
  4062f2:	d2bd      	bcs.n	406270 <memcpy+0x10>
  4062f4:	3230      	adds	r2, #48	; 0x30
  4062f6:	d311      	bcc.n	40631c <memcpy+0xbc>
  4062f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4062fc:	f840 3b04 	str.w	r3, [r0], #4
  406300:	f851 3b04 	ldr.w	r3, [r1], #4
  406304:	f840 3b04 	str.w	r3, [r0], #4
  406308:	f851 3b04 	ldr.w	r3, [r1], #4
  40630c:	f840 3b04 	str.w	r3, [r0], #4
  406310:	f851 3b04 	ldr.w	r3, [r1], #4
  406314:	f840 3b04 	str.w	r3, [r0], #4
  406318:	3a10      	subs	r2, #16
  40631a:	d2ed      	bcs.n	4062f8 <memcpy+0x98>
  40631c:	320c      	adds	r2, #12
  40631e:	d305      	bcc.n	40632c <memcpy+0xcc>
  406320:	f851 3b04 	ldr.w	r3, [r1], #4
  406324:	f840 3b04 	str.w	r3, [r0], #4
  406328:	3a04      	subs	r2, #4
  40632a:	d2f9      	bcs.n	406320 <memcpy+0xc0>
  40632c:	3204      	adds	r2, #4
  40632e:	d008      	beq.n	406342 <memcpy+0xe2>
  406330:	07d2      	lsls	r2, r2, #31
  406332:	bf1c      	itt	ne
  406334:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406338:	f800 3b01 	strbne.w	r3, [r0], #1
  40633c:	d301      	bcc.n	406342 <memcpy+0xe2>
  40633e:	880b      	ldrh	r3, [r1, #0]
  406340:	8003      	strh	r3, [r0, #0]
  406342:	4660      	mov	r0, ip
  406344:	4770      	bx	lr
  406346:	bf00      	nop
  406348:	2a08      	cmp	r2, #8
  40634a:	d313      	bcc.n	406374 <memcpy+0x114>
  40634c:	078b      	lsls	r3, r1, #30
  40634e:	d08d      	beq.n	40626c <memcpy+0xc>
  406350:	f010 0303 	ands.w	r3, r0, #3
  406354:	d08a      	beq.n	40626c <memcpy+0xc>
  406356:	f1c3 0304 	rsb	r3, r3, #4
  40635a:	1ad2      	subs	r2, r2, r3
  40635c:	07db      	lsls	r3, r3, #31
  40635e:	bf1c      	itt	ne
  406360:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406364:	f800 3b01 	strbne.w	r3, [r0], #1
  406368:	d380      	bcc.n	40626c <memcpy+0xc>
  40636a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40636e:	f820 3b02 	strh.w	r3, [r0], #2
  406372:	e77b      	b.n	40626c <memcpy+0xc>
  406374:	3a04      	subs	r2, #4
  406376:	d3d9      	bcc.n	40632c <memcpy+0xcc>
  406378:	3a01      	subs	r2, #1
  40637a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40637e:	f800 3b01 	strb.w	r3, [r0], #1
  406382:	d2f9      	bcs.n	406378 <memcpy+0x118>
  406384:	780b      	ldrb	r3, [r1, #0]
  406386:	7003      	strb	r3, [r0, #0]
  406388:	784b      	ldrb	r3, [r1, #1]
  40638a:	7043      	strb	r3, [r0, #1]
  40638c:	788b      	ldrb	r3, [r1, #2]
  40638e:	7083      	strb	r3, [r0, #2]
  406390:	4660      	mov	r0, ip
  406392:	4770      	bx	lr

00406394 <memset>:
  406394:	b470      	push	{r4, r5, r6}
  406396:	0786      	lsls	r6, r0, #30
  406398:	d046      	beq.n	406428 <memset+0x94>
  40639a:	1e54      	subs	r4, r2, #1
  40639c:	2a00      	cmp	r2, #0
  40639e:	d041      	beq.n	406424 <memset+0x90>
  4063a0:	b2ca      	uxtb	r2, r1
  4063a2:	4603      	mov	r3, r0
  4063a4:	e002      	b.n	4063ac <memset+0x18>
  4063a6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4063aa:	d33b      	bcc.n	406424 <memset+0x90>
  4063ac:	f803 2b01 	strb.w	r2, [r3], #1
  4063b0:	079d      	lsls	r5, r3, #30
  4063b2:	d1f8      	bne.n	4063a6 <memset+0x12>
  4063b4:	2c03      	cmp	r4, #3
  4063b6:	d92e      	bls.n	406416 <memset+0x82>
  4063b8:	b2cd      	uxtb	r5, r1
  4063ba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4063be:	2c0f      	cmp	r4, #15
  4063c0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4063c4:	d919      	bls.n	4063fa <memset+0x66>
  4063c6:	f103 0210 	add.w	r2, r3, #16
  4063ca:	4626      	mov	r6, r4
  4063cc:	3e10      	subs	r6, #16
  4063ce:	2e0f      	cmp	r6, #15
  4063d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4063d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4063d8:	f842 5c08 	str.w	r5, [r2, #-8]
  4063dc:	f842 5c04 	str.w	r5, [r2, #-4]
  4063e0:	f102 0210 	add.w	r2, r2, #16
  4063e4:	d8f2      	bhi.n	4063cc <memset+0x38>
  4063e6:	f1a4 0210 	sub.w	r2, r4, #16
  4063ea:	f022 020f 	bic.w	r2, r2, #15
  4063ee:	f004 040f 	and.w	r4, r4, #15
  4063f2:	3210      	adds	r2, #16
  4063f4:	2c03      	cmp	r4, #3
  4063f6:	4413      	add	r3, r2
  4063f8:	d90d      	bls.n	406416 <memset+0x82>
  4063fa:	461e      	mov	r6, r3
  4063fc:	4622      	mov	r2, r4
  4063fe:	3a04      	subs	r2, #4
  406400:	2a03      	cmp	r2, #3
  406402:	f846 5b04 	str.w	r5, [r6], #4
  406406:	d8fa      	bhi.n	4063fe <memset+0x6a>
  406408:	1f22      	subs	r2, r4, #4
  40640a:	f022 0203 	bic.w	r2, r2, #3
  40640e:	3204      	adds	r2, #4
  406410:	4413      	add	r3, r2
  406412:	f004 0403 	and.w	r4, r4, #3
  406416:	b12c      	cbz	r4, 406424 <memset+0x90>
  406418:	b2c9      	uxtb	r1, r1
  40641a:	441c      	add	r4, r3
  40641c:	f803 1b01 	strb.w	r1, [r3], #1
  406420:	429c      	cmp	r4, r3
  406422:	d1fb      	bne.n	40641c <memset+0x88>
  406424:	bc70      	pop	{r4, r5, r6}
  406426:	4770      	bx	lr
  406428:	4614      	mov	r4, r2
  40642a:	4603      	mov	r3, r0
  40642c:	e7c2      	b.n	4063b4 <memset+0x20>
  40642e:	bf00      	nop

00406430 <setbuf>:
  406430:	2900      	cmp	r1, #0
  406432:	bf0c      	ite	eq
  406434:	2202      	moveq	r2, #2
  406436:	2200      	movne	r2, #0
  406438:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40643c:	f000 b800 	b.w	406440 <setvbuf>

00406440 <setvbuf>:
  406440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406444:	4c61      	ldr	r4, [pc, #388]	; (4065cc <setvbuf+0x18c>)
  406446:	6825      	ldr	r5, [r4, #0]
  406448:	b083      	sub	sp, #12
  40644a:	4604      	mov	r4, r0
  40644c:	460f      	mov	r7, r1
  40644e:	4690      	mov	r8, r2
  406450:	461e      	mov	r6, r3
  406452:	b115      	cbz	r5, 40645a <setvbuf+0x1a>
  406454:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406456:	2b00      	cmp	r3, #0
  406458:	d064      	beq.n	406524 <setvbuf+0xe4>
  40645a:	f1b8 0f02 	cmp.w	r8, #2
  40645e:	d006      	beq.n	40646e <setvbuf+0x2e>
  406460:	f1b8 0f01 	cmp.w	r8, #1
  406464:	f200 809f 	bhi.w	4065a6 <setvbuf+0x166>
  406468:	2e00      	cmp	r6, #0
  40646a:	f2c0 809c 	blt.w	4065a6 <setvbuf+0x166>
  40646e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406470:	07d8      	lsls	r0, r3, #31
  406472:	d534      	bpl.n	4064de <setvbuf+0x9e>
  406474:	4621      	mov	r1, r4
  406476:	4628      	mov	r0, r5
  406478:	f003 fee0 	bl	40a23c <_fflush_r>
  40647c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40647e:	b141      	cbz	r1, 406492 <setvbuf+0x52>
  406480:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406484:	4299      	cmp	r1, r3
  406486:	d002      	beq.n	40648e <setvbuf+0x4e>
  406488:	4628      	mov	r0, r5
  40648a:	f004 f855 	bl	40a538 <_free_r>
  40648e:	2300      	movs	r3, #0
  406490:	6323      	str	r3, [r4, #48]	; 0x30
  406492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406496:	2200      	movs	r2, #0
  406498:	61a2      	str	r2, [r4, #24]
  40649a:	6062      	str	r2, [r4, #4]
  40649c:	061a      	lsls	r2, r3, #24
  40649e:	d43a      	bmi.n	406516 <setvbuf+0xd6>
  4064a0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4064a4:	f023 0303 	bic.w	r3, r3, #3
  4064a8:	f1b8 0f02 	cmp.w	r8, #2
  4064ac:	81a3      	strh	r3, [r4, #12]
  4064ae:	d01d      	beq.n	4064ec <setvbuf+0xac>
  4064b0:	ab01      	add	r3, sp, #4
  4064b2:	466a      	mov	r2, sp
  4064b4:	4621      	mov	r1, r4
  4064b6:	4628      	mov	r0, r5
  4064b8:	f004 faea 	bl	40aa90 <__swhatbuf_r>
  4064bc:	89a3      	ldrh	r3, [r4, #12]
  4064be:	4318      	orrs	r0, r3
  4064c0:	81a0      	strh	r0, [r4, #12]
  4064c2:	2e00      	cmp	r6, #0
  4064c4:	d132      	bne.n	40652c <setvbuf+0xec>
  4064c6:	9e00      	ldr	r6, [sp, #0]
  4064c8:	4630      	mov	r0, r6
  4064ca:	f004 fb59 	bl	40ab80 <malloc>
  4064ce:	4607      	mov	r7, r0
  4064d0:	2800      	cmp	r0, #0
  4064d2:	d06b      	beq.n	4065ac <setvbuf+0x16c>
  4064d4:	89a3      	ldrh	r3, [r4, #12]
  4064d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4064da:	81a3      	strh	r3, [r4, #12]
  4064dc:	e028      	b.n	406530 <setvbuf+0xf0>
  4064de:	89a3      	ldrh	r3, [r4, #12]
  4064e0:	0599      	lsls	r1, r3, #22
  4064e2:	d4c7      	bmi.n	406474 <setvbuf+0x34>
  4064e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4064e6:	f004 facf 	bl	40aa88 <__retarget_lock_acquire_recursive>
  4064ea:	e7c3      	b.n	406474 <setvbuf+0x34>
  4064ec:	2500      	movs	r5, #0
  4064ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4064f0:	2600      	movs	r6, #0
  4064f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4064f6:	f043 0302 	orr.w	r3, r3, #2
  4064fa:	2001      	movs	r0, #1
  4064fc:	60a6      	str	r6, [r4, #8]
  4064fe:	07ce      	lsls	r6, r1, #31
  406500:	81a3      	strh	r3, [r4, #12]
  406502:	6022      	str	r2, [r4, #0]
  406504:	6122      	str	r2, [r4, #16]
  406506:	6160      	str	r0, [r4, #20]
  406508:	d401      	bmi.n	40650e <setvbuf+0xce>
  40650a:	0598      	lsls	r0, r3, #22
  40650c:	d53e      	bpl.n	40658c <setvbuf+0x14c>
  40650e:	4628      	mov	r0, r5
  406510:	b003      	add	sp, #12
  406512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406516:	6921      	ldr	r1, [r4, #16]
  406518:	4628      	mov	r0, r5
  40651a:	f004 f80d 	bl	40a538 <_free_r>
  40651e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406522:	e7bd      	b.n	4064a0 <setvbuf+0x60>
  406524:	4628      	mov	r0, r5
  406526:	f003 fee1 	bl	40a2ec <__sinit>
  40652a:	e796      	b.n	40645a <setvbuf+0x1a>
  40652c:	2f00      	cmp	r7, #0
  40652e:	d0cb      	beq.n	4064c8 <setvbuf+0x88>
  406530:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406532:	2b00      	cmp	r3, #0
  406534:	d033      	beq.n	40659e <setvbuf+0x15e>
  406536:	9b00      	ldr	r3, [sp, #0]
  406538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40653c:	6027      	str	r7, [r4, #0]
  40653e:	429e      	cmp	r6, r3
  406540:	bf1c      	itt	ne
  406542:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406546:	81a2      	strhne	r2, [r4, #12]
  406548:	f1b8 0f01 	cmp.w	r8, #1
  40654c:	bf04      	itt	eq
  40654e:	f042 0201 	orreq.w	r2, r2, #1
  406552:	81a2      	strheq	r2, [r4, #12]
  406554:	b292      	uxth	r2, r2
  406556:	f012 0308 	ands.w	r3, r2, #8
  40655a:	6127      	str	r7, [r4, #16]
  40655c:	6166      	str	r6, [r4, #20]
  40655e:	d00e      	beq.n	40657e <setvbuf+0x13e>
  406560:	07d1      	lsls	r1, r2, #31
  406562:	d51a      	bpl.n	40659a <setvbuf+0x15a>
  406564:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406566:	4276      	negs	r6, r6
  406568:	2300      	movs	r3, #0
  40656a:	f015 0501 	ands.w	r5, r5, #1
  40656e:	61a6      	str	r6, [r4, #24]
  406570:	60a3      	str	r3, [r4, #8]
  406572:	d009      	beq.n	406588 <setvbuf+0x148>
  406574:	2500      	movs	r5, #0
  406576:	4628      	mov	r0, r5
  406578:	b003      	add	sp, #12
  40657a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40657e:	60a3      	str	r3, [r4, #8]
  406580:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406582:	f015 0501 	ands.w	r5, r5, #1
  406586:	d1f5      	bne.n	406574 <setvbuf+0x134>
  406588:	0593      	lsls	r3, r2, #22
  40658a:	d4c0      	bmi.n	40650e <setvbuf+0xce>
  40658c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40658e:	f004 fa7d 	bl	40aa8c <__retarget_lock_release_recursive>
  406592:	4628      	mov	r0, r5
  406594:	b003      	add	sp, #12
  406596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40659a:	60a6      	str	r6, [r4, #8]
  40659c:	e7f0      	b.n	406580 <setvbuf+0x140>
  40659e:	4628      	mov	r0, r5
  4065a0:	f003 fea4 	bl	40a2ec <__sinit>
  4065a4:	e7c7      	b.n	406536 <setvbuf+0xf6>
  4065a6:	f04f 35ff 	mov.w	r5, #4294967295
  4065aa:	e7b0      	b.n	40650e <setvbuf+0xce>
  4065ac:	f8dd 9000 	ldr.w	r9, [sp]
  4065b0:	45b1      	cmp	r9, r6
  4065b2:	d004      	beq.n	4065be <setvbuf+0x17e>
  4065b4:	4648      	mov	r0, r9
  4065b6:	f004 fae3 	bl	40ab80 <malloc>
  4065ba:	4607      	mov	r7, r0
  4065bc:	b920      	cbnz	r0, 4065c8 <setvbuf+0x188>
  4065be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4065c2:	f04f 35ff 	mov.w	r5, #4294967295
  4065c6:	e792      	b.n	4064ee <setvbuf+0xae>
  4065c8:	464e      	mov	r6, r9
  4065ca:	e783      	b.n	4064d4 <setvbuf+0x94>
  4065cc:	20400028 	.word	0x20400028

004065d0 <sprintf>:
  4065d0:	b40e      	push	{r1, r2, r3}
  4065d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4065d4:	b09c      	sub	sp, #112	; 0x70
  4065d6:	ab21      	add	r3, sp, #132	; 0x84
  4065d8:	490f      	ldr	r1, [pc, #60]	; (406618 <sprintf+0x48>)
  4065da:	f853 2b04 	ldr.w	r2, [r3], #4
  4065de:	9301      	str	r3, [sp, #4]
  4065e0:	4605      	mov	r5, r0
  4065e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4065e6:	6808      	ldr	r0, [r1, #0]
  4065e8:	9502      	str	r5, [sp, #8]
  4065ea:	f44f 7702 	mov.w	r7, #520	; 0x208
  4065ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4065f2:	a902      	add	r1, sp, #8
  4065f4:	9506      	str	r5, [sp, #24]
  4065f6:	f8ad 7014 	strh.w	r7, [sp, #20]
  4065fa:	9404      	str	r4, [sp, #16]
  4065fc:	9407      	str	r4, [sp, #28]
  4065fe:	f8ad 6016 	strh.w	r6, [sp, #22]
  406602:	f000 fc4f 	bl	406ea4 <_svfprintf_r>
  406606:	9b02      	ldr	r3, [sp, #8]
  406608:	2200      	movs	r2, #0
  40660a:	701a      	strb	r2, [r3, #0]
  40660c:	b01c      	add	sp, #112	; 0x70
  40660e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  406612:	b003      	add	sp, #12
  406614:	4770      	bx	lr
  406616:	bf00      	nop
  406618:	20400028 	.word	0x20400028
  40661c:	00000000 	.word	0x00000000
  406620:	eba2 0003 	sub.w	r0, r2, r3
  406624:	4770      	bx	lr
  406626:	bf00      	nop

00406628 <strcmp>:
  406628:	7802      	ldrb	r2, [r0, #0]
  40662a:	780b      	ldrb	r3, [r1, #0]
  40662c:	2a01      	cmp	r2, #1
  40662e:	bf28      	it	cs
  406630:	429a      	cmpcs	r2, r3
  406632:	d1f5      	bne.n	406620 <sprintf+0x50>
  406634:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  406638:	ea40 0401 	orr.w	r4, r0, r1
  40663c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  406640:	f06f 0c00 	mvn.w	ip, #0
  406644:	ea4f 7244 	mov.w	r2, r4, lsl #29
  406648:	b312      	cbz	r2, 406690 <strcmp+0x68>
  40664a:	ea80 0401 	eor.w	r4, r0, r1
  40664e:	f014 0f07 	tst.w	r4, #7
  406652:	d16a      	bne.n	40672a <strcmp+0x102>
  406654:	f000 0407 	and.w	r4, r0, #7
  406658:	f020 0007 	bic.w	r0, r0, #7
  40665c:	f004 0503 	and.w	r5, r4, #3
  406660:	f021 0107 	bic.w	r1, r1, #7
  406664:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406668:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40666c:	f014 0f04 	tst.w	r4, #4
  406670:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  406674:	fa0c f405 	lsl.w	r4, ip, r5
  406678:	ea62 0204 	orn	r2, r2, r4
  40667c:	ea66 0604 	orn	r6, r6, r4
  406680:	d00a      	beq.n	406698 <strcmp+0x70>
  406682:	ea63 0304 	orn	r3, r3, r4
  406686:	4662      	mov	r2, ip
  406688:	ea67 0704 	orn	r7, r7, r4
  40668c:	4666      	mov	r6, ip
  40668e:	e003      	b.n	406698 <strcmp+0x70>
  406690:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  406694:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  406698:	fa82 f54c 	uadd8	r5, r2, ip
  40669c:	ea82 0406 	eor.w	r4, r2, r6
  4066a0:	faa4 f48c 	sel	r4, r4, ip
  4066a4:	bb6c      	cbnz	r4, 406702 <strcmp+0xda>
  4066a6:	fa83 f54c 	uadd8	r5, r3, ip
  4066aa:	ea83 0507 	eor.w	r5, r3, r7
  4066ae:	faa5 f58c 	sel	r5, r5, ip
  4066b2:	b995      	cbnz	r5, 4066da <strcmp+0xb2>
  4066b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  4066b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  4066bc:	fa82 f54c 	uadd8	r5, r2, ip
  4066c0:	ea82 0406 	eor.w	r4, r2, r6
  4066c4:	faa4 f48c 	sel	r4, r4, ip
  4066c8:	fa83 f54c 	uadd8	r5, r3, ip
  4066cc:	ea83 0507 	eor.w	r5, r3, r7
  4066d0:	faa5 f58c 	sel	r5, r5, ip
  4066d4:	4325      	orrs	r5, r4
  4066d6:	d0db      	beq.n	406690 <strcmp+0x68>
  4066d8:	b99c      	cbnz	r4, 406702 <strcmp+0xda>
  4066da:	ba2d      	rev	r5, r5
  4066dc:	fab5 f485 	clz	r4, r5
  4066e0:	f024 0407 	bic.w	r4, r4, #7
  4066e4:	fa27 f104 	lsr.w	r1, r7, r4
  4066e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4066ec:	fa23 f304 	lsr.w	r3, r3, r4
  4066f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4066f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4066f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4066fc:	eba0 0001 	sub.w	r0, r0, r1
  406700:	4770      	bx	lr
  406702:	ba24      	rev	r4, r4
  406704:	fab4 f484 	clz	r4, r4
  406708:	f024 0407 	bic.w	r4, r4, #7
  40670c:	fa26 f104 	lsr.w	r1, r6, r4
  406710:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  406714:	fa22 f204 	lsr.w	r2, r2, r4
  406718:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40671c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406720:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406724:	eba0 0001 	sub.w	r0, r0, r1
  406728:	4770      	bx	lr
  40672a:	f014 0f03 	tst.w	r4, #3
  40672e:	d13c      	bne.n	4067aa <strcmp+0x182>
  406730:	f010 0403 	ands.w	r4, r0, #3
  406734:	d128      	bne.n	406788 <strcmp+0x160>
  406736:	f850 2b08 	ldr.w	r2, [r0], #8
  40673a:	f851 3b08 	ldr.w	r3, [r1], #8
  40673e:	fa82 f54c 	uadd8	r5, r2, ip
  406742:	ea82 0503 	eor.w	r5, r2, r3
  406746:	faa5 f58c 	sel	r5, r5, ip
  40674a:	b95d      	cbnz	r5, 406764 <strcmp+0x13c>
  40674c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406750:	f851 3c04 	ldr.w	r3, [r1, #-4]
  406754:	fa82 f54c 	uadd8	r5, r2, ip
  406758:	ea82 0503 	eor.w	r5, r2, r3
  40675c:	faa5 f58c 	sel	r5, r5, ip
  406760:	2d00      	cmp	r5, #0
  406762:	d0e8      	beq.n	406736 <strcmp+0x10e>
  406764:	ba2d      	rev	r5, r5
  406766:	fab5 f485 	clz	r4, r5
  40676a:	f024 0407 	bic.w	r4, r4, #7
  40676e:	fa23 f104 	lsr.w	r1, r3, r4
  406772:	fa22 f204 	lsr.w	r2, r2, r4
  406776:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40677a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40677e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406782:	eba0 0001 	sub.w	r0, r0, r1
  406786:	4770      	bx	lr
  406788:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40678c:	f020 0003 	bic.w	r0, r0, #3
  406790:	f850 2b08 	ldr.w	r2, [r0], #8
  406794:	f021 0103 	bic.w	r1, r1, #3
  406798:	f851 3b08 	ldr.w	r3, [r1], #8
  40679c:	fa0c f404 	lsl.w	r4, ip, r4
  4067a0:	ea62 0204 	orn	r2, r2, r4
  4067a4:	ea63 0304 	orn	r3, r3, r4
  4067a8:	e7c9      	b.n	40673e <strcmp+0x116>
  4067aa:	f010 0403 	ands.w	r4, r0, #3
  4067ae:	d01a      	beq.n	4067e6 <strcmp+0x1be>
  4067b0:	eba1 0104 	sub.w	r1, r1, r4
  4067b4:	f020 0003 	bic.w	r0, r0, #3
  4067b8:	07e4      	lsls	r4, r4, #31
  4067ba:	f850 2b04 	ldr.w	r2, [r0], #4
  4067be:	d006      	beq.n	4067ce <strcmp+0x1a6>
  4067c0:	d20f      	bcs.n	4067e2 <strcmp+0x1ba>
  4067c2:	788b      	ldrb	r3, [r1, #2]
  4067c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4067c8:	1ae4      	subs	r4, r4, r3
  4067ca:	d106      	bne.n	4067da <strcmp+0x1b2>
  4067cc:	b12b      	cbz	r3, 4067da <strcmp+0x1b2>
  4067ce:	78cb      	ldrb	r3, [r1, #3]
  4067d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4067d4:	1ae4      	subs	r4, r4, r3
  4067d6:	d100      	bne.n	4067da <strcmp+0x1b2>
  4067d8:	b91b      	cbnz	r3, 4067e2 <strcmp+0x1ba>
  4067da:	4620      	mov	r0, r4
  4067dc:	f85d 4b10 	ldr.w	r4, [sp], #16
  4067e0:	4770      	bx	lr
  4067e2:	f101 0104 	add.w	r1, r1, #4
  4067e6:	f850 2b04 	ldr.w	r2, [r0], #4
  4067ea:	07cc      	lsls	r4, r1, #31
  4067ec:	f021 0103 	bic.w	r1, r1, #3
  4067f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4067f4:	d848      	bhi.n	406888 <strcmp+0x260>
  4067f6:	d224      	bcs.n	406842 <strcmp+0x21a>
  4067f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4067fc:	fa82 f54c 	uadd8	r5, r2, ip
  406800:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  406804:	faa5 f58c 	sel	r5, r5, ip
  406808:	d10a      	bne.n	406820 <strcmp+0x1f8>
  40680a:	b965      	cbnz	r5, 406826 <strcmp+0x1fe>
  40680c:	f851 3b04 	ldr.w	r3, [r1], #4
  406810:	ea84 0402 	eor.w	r4, r4, r2
  406814:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  406818:	d10e      	bne.n	406838 <strcmp+0x210>
  40681a:	f850 2b04 	ldr.w	r2, [r0], #4
  40681e:	e7eb      	b.n	4067f8 <strcmp+0x1d0>
  406820:	ea4f 2313 	mov.w	r3, r3, lsr #8
  406824:	e055      	b.n	4068d2 <strcmp+0x2aa>
  406826:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  40682a:	d14d      	bne.n	4068c8 <strcmp+0x2a0>
  40682c:	7808      	ldrb	r0, [r1, #0]
  40682e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  406832:	f1c0 0000 	rsb	r0, r0, #0
  406836:	4770      	bx	lr
  406838:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40683c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  406840:	e047      	b.n	4068d2 <strcmp+0x2aa>
  406842:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  406846:	fa82 f54c 	uadd8	r5, r2, ip
  40684a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40684e:	faa5 f58c 	sel	r5, r5, ip
  406852:	d10a      	bne.n	40686a <strcmp+0x242>
  406854:	b965      	cbnz	r5, 406870 <strcmp+0x248>
  406856:	f851 3b04 	ldr.w	r3, [r1], #4
  40685a:	ea84 0402 	eor.w	r4, r4, r2
  40685e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  406862:	d10c      	bne.n	40687e <strcmp+0x256>
  406864:	f850 2b04 	ldr.w	r2, [r0], #4
  406868:	e7eb      	b.n	406842 <strcmp+0x21a>
  40686a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40686e:	e030      	b.n	4068d2 <strcmp+0x2aa>
  406870:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  406874:	d128      	bne.n	4068c8 <strcmp+0x2a0>
  406876:	880b      	ldrh	r3, [r1, #0]
  406878:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40687c:	e029      	b.n	4068d2 <strcmp+0x2aa>
  40687e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  406882:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  406886:	e024      	b.n	4068d2 <strcmp+0x2aa>
  406888:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40688c:	fa82 f54c 	uadd8	r5, r2, ip
  406890:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  406894:	faa5 f58c 	sel	r5, r5, ip
  406898:	d10a      	bne.n	4068b0 <strcmp+0x288>
  40689a:	b965      	cbnz	r5, 4068b6 <strcmp+0x28e>
  40689c:	f851 3b04 	ldr.w	r3, [r1], #4
  4068a0:	ea84 0402 	eor.w	r4, r4, r2
  4068a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  4068a8:	d109      	bne.n	4068be <strcmp+0x296>
  4068aa:	f850 2b04 	ldr.w	r2, [r0], #4
  4068ae:	e7eb      	b.n	406888 <strcmp+0x260>
  4068b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  4068b4:	e00d      	b.n	4068d2 <strcmp+0x2aa>
  4068b6:	f015 0fff 	tst.w	r5, #255	; 0xff
  4068ba:	d105      	bne.n	4068c8 <strcmp+0x2a0>
  4068bc:	680b      	ldr	r3, [r1, #0]
  4068be:	ea4f 2212 	mov.w	r2, r2, lsr #8
  4068c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4068c6:	e004      	b.n	4068d2 <strcmp+0x2aa>
  4068c8:	f04f 0000 	mov.w	r0, #0
  4068cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4068d0:	4770      	bx	lr
  4068d2:	ba12      	rev	r2, r2
  4068d4:	ba1b      	rev	r3, r3
  4068d6:	fa82 f44c 	uadd8	r4, r2, ip
  4068da:	ea82 0403 	eor.w	r4, r2, r3
  4068de:	faa4 f58c 	sel	r5, r4, ip
  4068e2:	fab5 f485 	clz	r4, r5
  4068e6:	fa02 f204 	lsl.w	r2, r2, r4
  4068ea:	fa03 f304 	lsl.w	r3, r3, r4
  4068ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4068f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4068f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4068fa:	4770      	bx	lr
  4068fc:	0000      	movs	r0, r0
	...

00406900 <strlen>:
  406900:	f890 f000 	pld	[r0]
  406904:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406908:	f020 0107 	bic.w	r1, r0, #7
  40690c:	f06f 0c00 	mvn.w	ip, #0
  406910:	f010 0407 	ands.w	r4, r0, #7
  406914:	f891 f020 	pld	[r1, #32]
  406918:	f040 8049 	bne.w	4069ae <strlen+0xae>
  40691c:	f04f 0400 	mov.w	r4, #0
  406920:	f06f 0007 	mvn.w	r0, #7
  406924:	e9d1 2300 	ldrd	r2, r3, [r1]
  406928:	f891 f040 	pld	[r1, #64]	; 0x40
  40692c:	f100 0008 	add.w	r0, r0, #8
  406930:	fa82 f24c 	uadd8	r2, r2, ip
  406934:	faa4 f28c 	sel	r2, r4, ip
  406938:	fa83 f34c 	uadd8	r3, r3, ip
  40693c:	faa2 f38c 	sel	r3, r2, ip
  406940:	bb4b      	cbnz	r3, 406996 <strlen+0x96>
  406942:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406946:	fa82 f24c 	uadd8	r2, r2, ip
  40694a:	f100 0008 	add.w	r0, r0, #8
  40694e:	faa4 f28c 	sel	r2, r4, ip
  406952:	fa83 f34c 	uadd8	r3, r3, ip
  406956:	faa2 f38c 	sel	r3, r2, ip
  40695a:	b9e3      	cbnz	r3, 406996 <strlen+0x96>
  40695c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406960:	fa82 f24c 	uadd8	r2, r2, ip
  406964:	f100 0008 	add.w	r0, r0, #8
  406968:	faa4 f28c 	sel	r2, r4, ip
  40696c:	fa83 f34c 	uadd8	r3, r3, ip
  406970:	faa2 f38c 	sel	r3, r2, ip
  406974:	b97b      	cbnz	r3, 406996 <strlen+0x96>
  406976:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40697a:	f101 0120 	add.w	r1, r1, #32
  40697e:	fa82 f24c 	uadd8	r2, r2, ip
  406982:	f100 0008 	add.w	r0, r0, #8
  406986:	faa4 f28c 	sel	r2, r4, ip
  40698a:	fa83 f34c 	uadd8	r3, r3, ip
  40698e:	faa2 f38c 	sel	r3, r2, ip
  406992:	2b00      	cmp	r3, #0
  406994:	d0c6      	beq.n	406924 <strlen+0x24>
  406996:	2a00      	cmp	r2, #0
  406998:	bf04      	itt	eq
  40699a:	3004      	addeq	r0, #4
  40699c:	461a      	moveq	r2, r3
  40699e:	ba12      	rev	r2, r2
  4069a0:	fab2 f282 	clz	r2, r2
  4069a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4069a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4069ac:	4770      	bx	lr
  4069ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4069b2:	f004 0503 	and.w	r5, r4, #3
  4069b6:	f1c4 0000 	rsb	r0, r4, #0
  4069ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4069be:	f014 0f04 	tst.w	r4, #4
  4069c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4069c6:	fa0c f505 	lsl.w	r5, ip, r5
  4069ca:	ea62 0205 	orn	r2, r2, r5
  4069ce:	bf1c      	itt	ne
  4069d0:	ea63 0305 	ornne	r3, r3, r5
  4069d4:	4662      	movne	r2, ip
  4069d6:	f04f 0400 	mov.w	r4, #0
  4069da:	e7a9      	b.n	406930 <strlen+0x30>

004069dc <critical_factorization>:
  4069dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4069e0:	f04f 0e01 	mov.w	lr, #1
  4069e4:	4674      	mov	r4, lr
  4069e6:	2500      	movs	r5, #0
  4069e8:	f04f 36ff 	mov.w	r6, #4294967295
  4069ec:	192b      	adds	r3, r5, r4
  4069ee:	428b      	cmp	r3, r1
  4069f0:	eb00 0706 	add.w	r7, r0, r6
  4069f4:	d20d      	bcs.n	406a12 <critical_factorization+0x36>
  4069f6:	5d3f      	ldrb	r7, [r7, r4]
  4069f8:	f810 c003 	ldrb.w	ip, [r0, r3]
  4069fc:	45bc      	cmp	ip, r7
  4069fe:	d22d      	bcs.n	406a5c <critical_factorization+0x80>
  406a00:	461d      	mov	r5, r3
  406a02:	2401      	movs	r4, #1
  406a04:	eba3 0e06 	sub.w	lr, r3, r6
  406a08:	192b      	adds	r3, r5, r4
  406a0a:	428b      	cmp	r3, r1
  406a0c:	eb00 0706 	add.w	r7, r0, r6
  406a10:	d3f1      	bcc.n	4069f6 <critical_factorization+0x1a>
  406a12:	f04f 0801 	mov.w	r8, #1
  406a16:	f8c2 e000 	str.w	lr, [r2]
  406a1a:	4644      	mov	r4, r8
  406a1c:	2500      	movs	r5, #0
  406a1e:	f04f 37ff 	mov.w	r7, #4294967295
  406a22:	192b      	adds	r3, r5, r4
  406a24:	4299      	cmp	r1, r3
  406a26:	eb00 0e07 	add.w	lr, r0, r7
  406a2a:	d90e      	bls.n	406a4a <critical_factorization+0x6e>
  406a2c:	f81e e004 	ldrb.w	lr, [lr, r4]
  406a30:	f810 c003 	ldrb.w	ip, [r0, r3]
  406a34:	45f4      	cmp	ip, lr
  406a36:	d918      	bls.n	406a6a <critical_factorization+0x8e>
  406a38:	461d      	mov	r5, r3
  406a3a:	2401      	movs	r4, #1
  406a3c:	eba3 0807 	sub.w	r8, r3, r7
  406a40:	192b      	adds	r3, r5, r4
  406a42:	4299      	cmp	r1, r3
  406a44:	eb00 0e07 	add.w	lr, r0, r7
  406a48:	d8f0      	bhi.n	406a2c <critical_factorization+0x50>
  406a4a:	3701      	adds	r7, #1
  406a4c:	1c70      	adds	r0, r6, #1
  406a4e:	4287      	cmp	r7, r0
  406a50:	bf24      	itt	cs
  406a52:	f8c2 8000 	strcs.w	r8, [r2]
  406a56:	4638      	movcs	r0, r7
  406a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a5c:	d00c      	beq.n	406a78 <critical_factorization+0x9c>
  406a5e:	f04f 0e01 	mov.w	lr, #1
  406a62:	462e      	mov	r6, r5
  406a64:	4674      	mov	r4, lr
  406a66:	4475      	add	r5, lr
  406a68:	e7c0      	b.n	4069ec <critical_factorization+0x10>
  406a6a:	d00b      	beq.n	406a84 <critical_factorization+0xa8>
  406a6c:	f04f 0801 	mov.w	r8, #1
  406a70:	462f      	mov	r7, r5
  406a72:	4644      	mov	r4, r8
  406a74:	4445      	add	r5, r8
  406a76:	e7d4      	b.n	406a22 <critical_factorization+0x46>
  406a78:	4574      	cmp	r4, lr
  406a7a:	bf12      	itee	ne
  406a7c:	3401      	addne	r4, #1
  406a7e:	461d      	moveq	r5, r3
  406a80:	2401      	moveq	r4, #1
  406a82:	e7b3      	b.n	4069ec <critical_factorization+0x10>
  406a84:	4544      	cmp	r4, r8
  406a86:	bf12      	itee	ne
  406a88:	3401      	addne	r4, #1
  406a8a:	461d      	moveq	r5, r3
  406a8c:	2401      	moveq	r4, #1
  406a8e:	e7c8      	b.n	406a22 <critical_factorization+0x46>

00406a90 <two_way_long_needle>:
  406a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a94:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  406a98:	4616      	mov	r6, r2
  406a9a:	4605      	mov	r5, r0
  406a9c:	468b      	mov	fp, r1
  406a9e:	4610      	mov	r0, r2
  406aa0:	4619      	mov	r1, r3
  406aa2:	aa03      	add	r2, sp, #12
  406aa4:	461c      	mov	r4, r3
  406aa6:	f7ff ff99 	bl	4069dc <critical_factorization>
  406aaa:	ab03      	add	r3, sp, #12
  406aac:	4681      	mov	r9, r0
  406aae:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  406ab2:	f843 4f04 	str.w	r4, [r3, #4]!
  406ab6:	4293      	cmp	r3, r2
  406ab8:	d1fb      	bne.n	406ab2 <two_way_long_needle+0x22>
  406aba:	b14c      	cbz	r4, 406ad0 <two_way_long_needle+0x40>
  406abc:	1e63      	subs	r3, r4, #1
  406abe:	1e72      	subs	r2, r6, #1
  406ac0:	a804      	add	r0, sp, #16
  406ac2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  406ac6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  406aca:	f113 33ff 	adds.w	r3, r3, #4294967295
  406ace:	d2f8      	bcs.n	406ac2 <two_way_long_needle+0x32>
  406ad0:	9903      	ldr	r1, [sp, #12]
  406ad2:	464a      	mov	r2, r9
  406ad4:	4431      	add	r1, r6
  406ad6:	4630      	mov	r0, r6
  406ad8:	f004 fb72 	bl	40b1c0 <memcmp>
  406adc:	2800      	cmp	r0, #0
  406ade:	d16f      	bne.n	406bc0 <two_way_long_needle+0x130>
  406ae0:	f109 33ff 	add.w	r3, r9, #4294967295
  406ae4:	9300      	str	r3, [sp, #0]
  406ae6:	18f3      	adds	r3, r6, r3
  406ae8:	4682      	mov	sl, r0
  406aea:	9301      	str	r3, [sp, #4]
  406aec:	4623      	mov	r3, r4
  406aee:	4680      	mov	r8, r0
  406af0:	4654      	mov	r4, sl
  406af2:	4658      	mov	r0, fp
  406af4:	469a      	mov	sl, r3
  406af6:	eb08 070a 	add.w	r7, r8, sl
  406afa:	1a3a      	subs	r2, r7, r0
  406afc:	2100      	movs	r1, #0
  406afe:	4428      	add	r0, r5
  406b00:	f004 fb0e 	bl	40b120 <memchr>
  406b04:	2800      	cmp	r0, #0
  406b06:	d156      	bne.n	406bb6 <two_way_long_needle+0x126>
  406b08:	2f00      	cmp	r7, #0
  406b0a:	d054      	beq.n	406bb6 <two_way_long_needle+0x126>
  406b0c:	19eb      	adds	r3, r5, r7
  406b0e:	aa04      	add	r2, sp, #16
  406b10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  406b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406b18:	b14b      	cbz	r3, 406b2e <two_way_long_needle+0x9e>
  406b1a:	b124      	cbz	r4, 406b26 <two_way_long_needle+0x96>
  406b1c:	9a03      	ldr	r2, [sp, #12]
  406b1e:	4293      	cmp	r3, r2
  406b20:	d201      	bcs.n	406b26 <two_way_long_needle+0x96>
  406b22:	ebaa 0302 	sub.w	r3, sl, r2
  406b26:	4498      	add	r8, r3
  406b28:	2400      	movs	r4, #0
  406b2a:	4638      	mov	r0, r7
  406b2c:	e7e3      	b.n	406af6 <two_way_long_needle+0x66>
  406b2e:	454c      	cmp	r4, r9
  406b30:	4623      	mov	r3, r4
  406b32:	f10a 3eff 	add.w	lr, sl, #4294967295
  406b36:	bf38      	it	cc
  406b38:	464b      	movcc	r3, r9
  406b3a:	4573      	cmp	r3, lr
  406b3c:	d213      	bcs.n	406b66 <two_way_long_needle+0xd6>
  406b3e:	eb08 0203 	add.w	r2, r8, r3
  406b42:	f816 c003 	ldrb.w	ip, [r6, r3]
  406b46:	5ca8      	ldrb	r0, [r5, r2]
  406b48:	4584      	cmp	ip, r0
  406b4a:	442a      	add	r2, r5
  406b4c:	eb06 0103 	add.w	r1, r6, r3
  406b50:	d006      	beq.n	406b60 <two_way_long_needle+0xd0>
  406b52:	e02c      	b.n	406bae <two_way_long_needle+0x11e>
  406b54:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  406b58:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  406b5c:	4584      	cmp	ip, r0
  406b5e:	d126      	bne.n	406bae <two_way_long_needle+0x11e>
  406b60:	3301      	adds	r3, #1
  406b62:	4573      	cmp	r3, lr
  406b64:	d3f6      	bcc.n	406b54 <two_way_long_needle+0xc4>
  406b66:	454c      	cmp	r4, r9
  406b68:	9900      	ldr	r1, [sp, #0]
  406b6a:	f080 8089 	bcs.w	406c80 <two_way_long_needle+0x1f0>
  406b6e:	9b00      	ldr	r3, [sp, #0]
  406b70:	eb08 0203 	add.w	r2, r8, r3
  406b74:	9b01      	ldr	r3, [sp, #4]
  406b76:	5ca8      	ldrb	r0, [r5, r2]
  406b78:	781b      	ldrb	r3, [r3, #0]
  406b7a:	4298      	cmp	r0, r3
  406b7c:	442a      	add	r2, r5
  406b7e:	d17f      	bne.n	406c80 <two_way_long_needle+0x1f0>
  406b80:	9801      	ldr	r0, [sp, #4]
  406b82:	f104 3bff 	add.w	fp, r4, #4294967295
  406b86:	e006      	b.n	406b96 <two_way_long_needle+0x106>
  406b88:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  406b8c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  406b90:	45f4      	cmp	ip, lr
  406b92:	d103      	bne.n	406b9c <two_way_long_needle+0x10c>
  406b94:	4619      	mov	r1, r3
  406b96:	1e4b      	subs	r3, r1, #1
  406b98:	459b      	cmp	fp, r3
  406b9a:	d1f5      	bne.n	406b88 <two_way_long_needle+0xf8>
  406b9c:	3401      	adds	r4, #1
  406b9e:	428c      	cmp	r4, r1
  406ba0:	d870      	bhi.n	406c84 <two_way_long_needle+0x1f4>
  406ba2:	9c03      	ldr	r4, [sp, #12]
  406ba4:	4638      	mov	r0, r7
  406ba6:	44a0      	add	r8, r4
  406ba8:	ebaa 0404 	sub.w	r4, sl, r4
  406bac:	e7a3      	b.n	406af6 <two_way_long_needle+0x66>
  406bae:	f1c9 0201 	rsb	r2, r9, #1
  406bb2:	4490      	add	r8, r2
  406bb4:	e7b7      	b.n	406b26 <two_way_long_needle+0x96>
  406bb6:	2000      	movs	r0, #0
  406bb8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  406bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bc0:	eba4 0309 	sub.w	r3, r4, r9
  406bc4:	454b      	cmp	r3, r9
  406bc6:	bf38      	it	cc
  406bc8:	464b      	movcc	r3, r9
  406bca:	3301      	adds	r3, #1
  406bcc:	f109 38ff 	add.w	r8, r9, #4294967295
  406bd0:	9303      	str	r3, [sp, #12]
  406bd2:	eb06 0308 	add.w	r3, r6, r8
  406bd6:	4658      	mov	r0, fp
  406bd8:	f04f 0a00 	mov.w	sl, #0
  406bdc:	46cb      	mov	fp, r9
  406bde:	4699      	mov	r9, r3
  406be0:	eb0a 0704 	add.w	r7, sl, r4
  406be4:	1a3a      	subs	r2, r7, r0
  406be6:	2100      	movs	r1, #0
  406be8:	4428      	add	r0, r5
  406bea:	f004 fa99 	bl	40b120 <memchr>
  406bee:	2800      	cmp	r0, #0
  406bf0:	d1e1      	bne.n	406bb6 <two_way_long_needle+0x126>
  406bf2:	2f00      	cmp	r7, #0
  406bf4:	d0df      	beq.n	406bb6 <two_way_long_needle+0x126>
  406bf6:	19eb      	adds	r3, r5, r7
  406bf8:	aa04      	add	r2, sp, #16
  406bfa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  406bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406c02:	bba3      	cbnz	r3, 406c6e <two_way_long_needle+0x1de>
  406c04:	1e61      	subs	r1, r4, #1
  406c06:	458b      	cmp	fp, r1
  406c08:	d215      	bcs.n	406c36 <two_way_long_needle+0x1a6>
  406c0a:	eb0a 020b 	add.w	r2, sl, fp
  406c0e:	f816 300b 	ldrb.w	r3, [r6, fp]
  406c12:	f815 e002 	ldrb.w	lr, [r5, r2]
  406c16:	459e      	cmp	lr, r3
  406c18:	442a      	add	r2, r5
  406c1a:	eb06 000b 	add.w	r0, r6, fp
  406c1e:	465b      	mov	r3, fp
  406c20:	d006      	beq.n	406c30 <two_way_long_needle+0x1a0>
  406c22:	e027      	b.n	406c74 <two_way_long_needle+0x1e4>
  406c24:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  406c28:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  406c2c:	45f4      	cmp	ip, lr
  406c2e:	d121      	bne.n	406c74 <two_way_long_needle+0x1e4>
  406c30:	3301      	adds	r3, #1
  406c32:	428b      	cmp	r3, r1
  406c34:	d3f6      	bcc.n	406c24 <two_way_long_needle+0x194>
  406c36:	f1b8 3fff 	cmp.w	r8, #4294967295
  406c3a:	d011      	beq.n	406c60 <two_way_long_needle+0x1d0>
  406c3c:	eb0a 0208 	add.w	r2, sl, r8
  406c40:	f899 1000 	ldrb.w	r1, [r9]
  406c44:	5cab      	ldrb	r3, [r5, r2]
  406c46:	4299      	cmp	r1, r3
  406c48:	442a      	add	r2, r5
  406c4a:	d10f      	bne.n	406c6c <two_way_long_needle+0x1dc>
  406c4c:	464b      	mov	r3, r9
  406c4e:	e005      	b.n	406c5c <two_way_long_needle+0x1cc>
  406c50:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  406c54:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  406c58:	4288      	cmp	r0, r1
  406c5a:	d107      	bne.n	406c6c <two_way_long_needle+0x1dc>
  406c5c:	42b3      	cmp	r3, r6
  406c5e:	d1f7      	bne.n	406c50 <two_way_long_needle+0x1c0>
  406c60:	eb05 000a 	add.w	r0, r5, sl
  406c64:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  406c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c6c:	9b03      	ldr	r3, [sp, #12]
  406c6e:	449a      	add	sl, r3
  406c70:	4638      	mov	r0, r7
  406c72:	e7b5      	b.n	406be0 <two_way_long_needle+0x150>
  406c74:	f1cb 0201 	rsb	r2, fp, #1
  406c78:	4492      	add	sl, r2
  406c7a:	449a      	add	sl, r3
  406c7c:	4638      	mov	r0, r7
  406c7e:	e7af      	b.n	406be0 <two_way_long_needle+0x150>
  406c80:	4649      	mov	r1, r9
  406c82:	e78b      	b.n	406b9c <two_way_long_needle+0x10c>
  406c84:	eb05 0008 	add.w	r0, r5, r8
  406c88:	e796      	b.n	406bb8 <two_way_long_needle+0x128>
  406c8a:	bf00      	nop

00406c8c <strstr>:
  406c8c:	7802      	ldrb	r2, [r0, #0]
  406c8e:	2a00      	cmp	r2, #0
  406c90:	f000 8101 	beq.w	406e96 <strstr+0x20a>
  406c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c98:	f891 8000 	ldrb.w	r8, [r1]
  406c9c:	b085      	sub	sp, #20
  406c9e:	4644      	mov	r4, r8
  406ca0:	f1b8 0f00 	cmp.w	r8, #0
  406ca4:	d016      	beq.n	406cd4 <strstr+0x48>
  406ca6:	4686      	mov	lr, r0
  406ca8:	f101 0c01 	add.w	ip, r1, #1
  406cac:	2701      	movs	r7, #1
  406cae:	e003      	b.n	406cb8 <strstr+0x2c>
  406cb0:	f813 4b01 	ldrb.w	r4, [r3], #1
  406cb4:	b16c      	cbz	r4, 406cd2 <strstr+0x46>
  406cb6:	469c      	mov	ip, r3
  406cb8:	42a2      	cmp	r2, r4
  406cba:	bf14      	ite	ne
  406cbc:	2700      	movne	r7, #0
  406cbe:	f007 0701 	andeq.w	r7, r7, #1
  406cc2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  406cc6:	4663      	mov	r3, ip
  406cc8:	2a00      	cmp	r2, #0
  406cca:	d1f1      	bne.n	406cb0 <strstr+0x24>
  406ccc:	f89c 3000 	ldrb.w	r3, [ip]
  406cd0:	b9fb      	cbnz	r3, 406d12 <strstr+0x86>
  406cd2:	b117      	cbz	r7, 406cda <strstr+0x4e>
  406cd4:	b005      	add	sp, #20
  406cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cda:	460e      	mov	r6, r1
  406cdc:	4605      	mov	r5, r0
  406cde:	4641      	mov	r1, r8
  406ce0:	3001      	adds	r0, #1
  406ce2:	ebac 0406 	sub.w	r4, ip, r6
  406ce6:	f005 f801 	bl	40bcec <strchr>
  406cea:	4607      	mov	r7, r0
  406cec:	b188      	cbz	r0, 406d12 <strstr+0x86>
  406cee:	2c01      	cmp	r4, #1
  406cf0:	d0f0      	beq.n	406cd4 <strstr+0x48>
  406cf2:	1928      	adds	r0, r5, r4
  406cf4:	4287      	cmp	r7, r0
  406cf6:	bf94      	ite	ls
  406cf8:	1bc1      	subls	r1, r0, r7
  406cfa:	2101      	movhi	r1, #1
  406cfc:	2c1f      	cmp	r4, #31
  406cfe:	468b      	mov	fp, r1
  406d00:	d90b      	bls.n	406d1a <strstr+0x8e>
  406d02:	4623      	mov	r3, r4
  406d04:	4632      	mov	r2, r6
  406d06:	4638      	mov	r0, r7
  406d08:	f7ff fec2 	bl	406a90 <two_way_long_needle>
  406d0c:	b005      	add	sp, #20
  406d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d12:	2000      	movs	r0, #0
  406d14:	b005      	add	sp, #20
  406d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d1a:	aa03      	add	r2, sp, #12
  406d1c:	4621      	mov	r1, r4
  406d1e:	4630      	mov	r0, r6
  406d20:	f7ff fe5c 	bl	4069dc <critical_factorization>
  406d24:	9903      	ldr	r1, [sp, #12]
  406d26:	4680      	mov	r8, r0
  406d28:	4602      	mov	r2, r0
  406d2a:	4431      	add	r1, r6
  406d2c:	4630      	mov	r0, r6
  406d2e:	f004 fa47 	bl	40b1c0 <memcmp>
  406d32:	2800      	cmp	r0, #0
  406d34:	d157      	bne.n	406de6 <strstr+0x15a>
  406d36:	f108 33ff 	add.w	r3, r8, #4294967295
  406d3a:	9300      	str	r3, [sp, #0]
  406d3c:	18f3      	adds	r3, r6, r3
  406d3e:	4681      	mov	r9, r0
  406d40:	4605      	mov	r5, r0
  406d42:	9301      	str	r3, [sp, #4]
  406d44:	4658      	mov	r0, fp
  406d46:	46b2      	mov	sl, r6
  406d48:	1966      	adds	r6, r4, r5
  406d4a:	1a32      	subs	r2, r6, r0
  406d4c:	2100      	movs	r1, #0
  406d4e:	4438      	add	r0, r7
  406d50:	f004 f9e6 	bl	40b120 <memchr>
  406d54:	2800      	cmp	r0, #0
  406d56:	d1dc      	bne.n	406d12 <strstr+0x86>
  406d58:	2e00      	cmp	r6, #0
  406d5a:	d0da      	beq.n	406d12 <strstr+0x86>
  406d5c:	45c8      	cmp	r8, r9
  406d5e:	4643      	mov	r3, r8
  406d60:	bf38      	it	cc
  406d62:	464b      	movcc	r3, r9
  406d64:	429c      	cmp	r4, r3
  406d66:	d912      	bls.n	406d8e <strstr+0x102>
  406d68:	195a      	adds	r2, r3, r5
  406d6a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  406d6e:	5cb8      	ldrb	r0, [r7, r2]
  406d70:	4281      	cmp	r1, r0
  406d72:	443a      	add	r2, r7
  406d74:	eb0a 0e03 	add.w	lr, sl, r3
  406d78:	d006      	beq.n	406d88 <strstr+0xfc>
  406d7a:	e02c      	b.n	406dd6 <strstr+0x14a>
  406d7c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  406d80:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  406d84:	4288      	cmp	r0, r1
  406d86:	d126      	bne.n	406dd6 <strstr+0x14a>
  406d88:	3301      	adds	r3, #1
  406d8a:	429c      	cmp	r4, r3
  406d8c:	d1f6      	bne.n	406d7c <strstr+0xf0>
  406d8e:	45c8      	cmp	r8, r9
  406d90:	9900      	ldr	r1, [sp, #0]
  406d92:	f240 8083 	bls.w	406e9c <strstr+0x210>
  406d96:	9b00      	ldr	r3, [sp, #0]
  406d98:	18ea      	adds	r2, r5, r3
  406d9a:	9b01      	ldr	r3, [sp, #4]
  406d9c:	5cb8      	ldrb	r0, [r7, r2]
  406d9e:	781b      	ldrb	r3, [r3, #0]
  406da0:	4298      	cmp	r0, r3
  406da2:	443a      	add	r2, r7
  406da4:	d17a      	bne.n	406e9c <strstr+0x210>
  406da6:	9801      	ldr	r0, [sp, #4]
  406da8:	f109 3bff 	add.w	fp, r9, #4294967295
  406dac:	e006      	b.n	406dbc <strstr+0x130>
  406dae:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  406db2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  406db6:	45f4      	cmp	ip, lr
  406db8:	d103      	bne.n	406dc2 <strstr+0x136>
  406dba:	4619      	mov	r1, r3
  406dbc:	1e4b      	subs	r3, r1, #1
  406dbe:	455b      	cmp	r3, fp
  406dc0:	d1f5      	bne.n	406dae <strstr+0x122>
  406dc2:	f109 0901 	add.w	r9, r9, #1
  406dc6:	4589      	cmp	r9, r1
  406dc8:	d857      	bhi.n	406e7a <strstr+0x1ee>
  406dca:	9b03      	ldr	r3, [sp, #12]
  406dcc:	4630      	mov	r0, r6
  406dce:	441d      	add	r5, r3
  406dd0:	eba4 0903 	sub.w	r9, r4, r3
  406dd4:	e7b8      	b.n	406d48 <strstr+0xbc>
  406dd6:	f1c8 0201 	rsb	r2, r8, #1
  406dda:	4415      	add	r5, r2
  406ddc:	441d      	add	r5, r3
  406dde:	f04f 0900 	mov.w	r9, #0
  406de2:	4630      	mov	r0, r6
  406de4:	e7b0      	b.n	406d48 <strstr+0xbc>
  406de6:	eba4 0308 	sub.w	r3, r4, r8
  406dea:	4543      	cmp	r3, r8
  406dec:	bf38      	it	cc
  406dee:	4643      	movcc	r3, r8
  406df0:	3301      	adds	r3, #1
  406df2:	f108 39ff 	add.w	r9, r8, #4294967295
  406df6:	9303      	str	r3, [sp, #12]
  406df8:	eb06 0309 	add.w	r3, r6, r9
  406dfc:	4658      	mov	r0, fp
  406dfe:	2500      	movs	r5, #0
  406e00:	46bb      	mov	fp, r7
  406e02:	469a      	mov	sl, r3
  406e04:	1967      	adds	r7, r4, r5
  406e06:	1a3a      	subs	r2, r7, r0
  406e08:	2100      	movs	r1, #0
  406e0a:	4458      	add	r0, fp
  406e0c:	f004 f988 	bl	40b120 <memchr>
  406e10:	2800      	cmp	r0, #0
  406e12:	f47f af7e 	bne.w	406d12 <strstr+0x86>
  406e16:	2f00      	cmp	r7, #0
  406e18:	f43f af7b 	beq.w	406d12 <strstr+0x86>
  406e1c:	4544      	cmp	r4, r8
  406e1e:	d915      	bls.n	406e4c <strstr+0x1c0>
  406e20:	eb08 0205 	add.w	r2, r8, r5
  406e24:	f816 3008 	ldrb.w	r3, [r6, r8]
  406e28:	f81b 0002 	ldrb.w	r0, [fp, r2]
  406e2c:	4298      	cmp	r0, r3
  406e2e:	445a      	add	r2, fp
  406e30:	eb06 0108 	add.w	r1, r6, r8
  406e34:	4643      	mov	r3, r8
  406e36:	d006      	beq.n	406e46 <strstr+0x1ba>
  406e38:	e023      	b.n	406e82 <strstr+0x1f6>
  406e3a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  406e3e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  406e42:	4586      	cmp	lr, r0
  406e44:	d11d      	bne.n	406e82 <strstr+0x1f6>
  406e46:	3301      	adds	r3, #1
  406e48:	429c      	cmp	r4, r3
  406e4a:	d1f6      	bne.n	406e3a <strstr+0x1ae>
  406e4c:	f1b9 3fff 	cmp.w	r9, #4294967295
  406e50:	d012      	beq.n	406e78 <strstr+0x1ec>
  406e52:	eb05 0209 	add.w	r2, r5, r9
  406e56:	f89a 3000 	ldrb.w	r3, [sl]
  406e5a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  406e5e:	4299      	cmp	r1, r3
  406e60:	445a      	add	r2, fp
  406e62:	d114      	bne.n	406e8e <strstr+0x202>
  406e64:	4653      	mov	r3, sl
  406e66:	e005      	b.n	406e74 <strstr+0x1e8>
  406e68:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  406e6c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  406e70:	4288      	cmp	r0, r1
  406e72:	d10c      	bne.n	406e8e <strstr+0x202>
  406e74:	42b3      	cmp	r3, r6
  406e76:	d1f7      	bne.n	406e68 <strstr+0x1dc>
  406e78:	465f      	mov	r7, fp
  406e7a:	1978      	adds	r0, r7, r5
  406e7c:	b005      	add	sp, #20
  406e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e82:	f1c8 0201 	rsb	r2, r8, #1
  406e86:	4415      	add	r5, r2
  406e88:	441d      	add	r5, r3
  406e8a:	4638      	mov	r0, r7
  406e8c:	e7ba      	b.n	406e04 <strstr+0x178>
  406e8e:	9b03      	ldr	r3, [sp, #12]
  406e90:	4638      	mov	r0, r7
  406e92:	441d      	add	r5, r3
  406e94:	e7b6      	b.n	406e04 <strstr+0x178>
  406e96:	780b      	ldrb	r3, [r1, #0]
  406e98:	b913      	cbnz	r3, 406ea0 <strstr+0x214>
  406e9a:	4770      	bx	lr
  406e9c:	4641      	mov	r1, r8
  406e9e:	e790      	b.n	406dc2 <strstr+0x136>
  406ea0:	2000      	movs	r0, #0
  406ea2:	4770      	bx	lr

00406ea4 <_svfprintf_r>:
  406ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ea8:	b0c3      	sub	sp, #268	; 0x10c
  406eaa:	460c      	mov	r4, r1
  406eac:	910b      	str	r1, [sp, #44]	; 0x2c
  406eae:	4692      	mov	sl, r2
  406eb0:	930f      	str	r3, [sp, #60]	; 0x3c
  406eb2:	900c      	str	r0, [sp, #48]	; 0x30
  406eb4:	f003 fdd6 	bl	40aa64 <_localeconv_r>
  406eb8:	6803      	ldr	r3, [r0, #0]
  406eba:	931a      	str	r3, [sp, #104]	; 0x68
  406ebc:	4618      	mov	r0, r3
  406ebe:	f7ff fd1f 	bl	406900 <strlen>
  406ec2:	89a3      	ldrh	r3, [r4, #12]
  406ec4:	9019      	str	r0, [sp, #100]	; 0x64
  406ec6:	0619      	lsls	r1, r3, #24
  406ec8:	d503      	bpl.n	406ed2 <_svfprintf_r+0x2e>
  406eca:	6923      	ldr	r3, [r4, #16]
  406ecc:	2b00      	cmp	r3, #0
  406ece:	f001 8003 	beq.w	407ed8 <_svfprintf_r+0x1034>
  406ed2:	2300      	movs	r3, #0
  406ed4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406ed8:	9313      	str	r3, [sp, #76]	; 0x4c
  406eda:	9315      	str	r3, [sp, #84]	; 0x54
  406edc:	9314      	str	r3, [sp, #80]	; 0x50
  406ede:	9327      	str	r3, [sp, #156]	; 0x9c
  406ee0:	9326      	str	r3, [sp, #152]	; 0x98
  406ee2:	9318      	str	r3, [sp, #96]	; 0x60
  406ee4:	931b      	str	r3, [sp, #108]	; 0x6c
  406ee6:	9309      	str	r3, [sp, #36]	; 0x24
  406ee8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406eec:	46c8      	mov	r8, r9
  406eee:	9316      	str	r3, [sp, #88]	; 0x58
  406ef0:	9317      	str	r3, [sp, #92]	; 0x5c
  406ef2:	f89a 3000 	ldrb.w	r3, [sl]
  406ef6:	4654      	mov	r4, sl
  406ef8:	b1e3      	cbz	r3, 406f34 <_svfprintf_r+0x90>
  406efa:	2b25      	cmp	r3, #37	; 0x25
  406efc:	d102      	bne.n	406f04 <_svfprintf_r+0x60>
  406efe:	e019      	b.n	406f34 <_svfprintf_r+0x90>
  406f00:	2b25      	cmp	r3, #37	; 0x25
  406f02:	d003      	beq.n	406f0c <_svfprintf_r+0x68>
  406f04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406f08:	2b00      	cmp	r3, #0
  406f0a:	d1f9      	bne.n	406f00 <_svfprintf_r+0x5c>
  406f0c:	eba4 050a 	sub.w	r5, r4, sl
  406f10:	b185      	cbz	r5, 406f34 <_svfprintf_r+0x90>
  406f12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f14:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406f16:	f8c8 a000 	str.w	sl, [r8]
  406f1a:	3301      	adds	r3, #1
  406f1c:	442a      	add	r2, r5
  406f1e:	2b07      	cmp	r3, #7
  406f20:	f8c8 5004 	str.w	r5, [r8, #4]
  406f24:	9227      	str	r2, [sp, #156]	; 0x9c
  406f26:	9326      	str	r3, [sp, #152]	; 0x98
  406f28:	dc7f      	bgt.n	40702a <_svfprintf_r+0x186>
  406f2a:	f108 0808 	add.w	r8, r8, #8
  406f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406f30:	442b      	add	r3, r5
  406f32:	9309      	str	r3, [sp, #36]	; 0x24
  406f34:	7823      	ldrb	r3, [r4, #0]
  406f36:	2b00      	cmp	r3, #0
  406f38:	d07f      	beq.n	40703a <_svfprintf_r+0x196>
  406f3a:	2300      	movs	r3, #0
  406f3c:	461a      	mov	r2, r3
  406f3e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406f42:	4619      	mov	r1, r3
  406f44:	930d      	str	r3, [sp, #52]	; 0x34
  406f46:	469b      	mov	fp, r3
  406f48:	f04f 30ff 	mov.w	r0, #4294967295
  406f4c:	7863      	ldrb	r3, [r4, #1]
  406f4e:	900a      	str	r0, [sp, #40]	; 0x28
  406f50:	f104 0a01 	add.w	sl, r4, #1
  406f54:	f10a 0a01 	add.w	sl, sl, #1
  406f58:	f1a3 0020 	sub.w	r0, r3, #32
  406f5c:	2858      	cmp	r0, #88	; 0x58
  406f5e:	f200 83c1 	bhi.w	4076e4 <_svfprintf_r+0x840>
  406f62:	e8df f010 	tbh	[pc, r0, lsl #1]
  406f66:	0238      	.short	0x0238
  406f68:	03bf03bf 	.word	0x03bf03bf
  406f6c:	03bf0240 	.word	0x03bf0240
  406f70:	03bf03bf 	.word	0x03bf03bf
  406f74:	03bf03bf 	.word	0x03bf03bf
  406f78:	024503bf 	.word	0x024503bf
  406f7c:	03bf0203 	.word	0x03bf0203
  406f80:	026b005d 	.word	0x026b005d
  406f84:	028603bf 	.word	0x028603bf
  406f88:	039d039d 	.word	0x039d039d
  406f8c:	039d039d 	.word	0x039d039d
  406f90:	039d039d 	.word	0x039d039d
  406f94:	039d039d 	.word	0x039d039d
  406f98:	03bf039d 	.word	0x03bf039d
  406f9c:	03bf03bf 	.word	0x03bf03bf
  406fa0:	03bf03bf 	.word	0x03bf03bf
  406fa4:	03bf03bf 	.word	0x03bf03bf
  406fa8:	03bf03bf 	.word	0x03bf03bf
  406fac:	033703bf 	.word	0x033703bf
  406fb0:	03bf0357 	.word	0x03bf0357
  406fb4:	03bf0357 	.word	0x03bf0357
  406fb8:	03bf03bf 	.word	0x03bf03bf
  406fbc:	039803bf 	.word	0x039803bf
  406fc0:	03bf03bf 	.word	0x03bf03bf
  406fc4:	03bf03ad 	.word	0x03bf03ad
  406fc8:	03bf03bf 	.word	0x03bf03bf
  406fcc:	03bf03bf 	.word	0x03bf03bf
  406fd0:	03bf0259 	.word	0x03bf0259
  406fd4:	031e03bf 	.word	0x031e03bf
  406fd8:	03bf03bf 	.word	0x03bf03bf
  406fdc:	03bf03bf 	.word	0x03bf03bf
  406fe0:	03bf03bf 	.word	0x03bf03bf
  406fe4:	03bf03bf 	.word	0x03bf03bf
  406fe8:	03bf03bf 	.word	0x03bf03bf
  406fec:	02db02c6 	.word	0x02db02c6
  406ff0:	03570357 	.word	0x03570357
  406ff4:	028b0357 	.word	0x028b0357
  406ff8:	03bf02db 	.word	0x03bf02db
  406ffc:	029003bf 	.word	0x029003bf
  407000:	029d03bf 	.word	0x029d03bf
  407004:	02b401cc 	.word	0x02b401cc
  407008:	03bf0208 	.word	0x03bf0208
  40700c:	03bf01e1 	.word	0x03bf01e1
  407010:	03bf007e 	.word	0x03bf007e
  407014:	020d03bf 	.word	0x020d03bf
  407018:	980d      	ldr	r0, [sp, #52]	; 0x34
  40701a:	930f      	str	r3, [sp, #60]	; 0x3c
  40701c:	4240      	negs	r0, r0
  40701e:	900d      	str	r0, [sp, #52]	; 0x34
  407020:	f04b 0b04 	orr.w	fp, fp, #4
  407024:	f89a 3000 	ldrb.w	r3, [sl]
  407028:	e794      	b.n	406f54 <_svfprintf_r+0xb0>
  40702a:	aa25      	add	r2, sp, #148	; 0x94
  40702c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40702e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407030:	f004 fed0 	bl	40bdd4 <__ssprint_r>
  407034:	b940      	cbnz	r0, 407048 <_svfprintf_r+0x1a4>
  407036:	46c8      	mov	r8, r9
  407038:	e779      	b.n	406f2e <_svfprintf_r+0x8a>
  40703a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40703c:	b123      	cbz	r3, 407048 <_svfprintf_r+0x1a4>
  40703e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407040:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407042:	aa25      	add	r2, sp, #148	; 0x94
  407044:	f004 fec6 	bl	40bdd4 <__ssprint_r>
  407048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40704a:	899b      	ldrh	r3, [r3, #12]
  40704c:	f013 0f40 	tst.w	r3, #64	; 0x40
  407050:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407052:	bf18      	it	ne
  407054:	f04f 33ff 	movne.w	r3, #4294967295
  407058:	9309      	str	r3, [sp, #36]	; 0x24
  40705a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40705c:	b043      	add	sp, #268	; 0x10c
  40705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407062:	f01b 0f20 	tst.w	fp, #32
  407066:	9311      	str	r3, [sp, #68]	; 0x44
  407068:	f040 81dd 	bne.w	407426 <_svfprintf_r+0x582>
  40706c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40706e:	f01b 0f10 	tst.w	fp, #16
  407072:	4613      	mov	r3, r2
  407074:	f040 856e 	bne.w	407b54 <_svfprintf_r+0xcb0>
  407078:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40707c:	f000 856a 	beq.w	407b54 <_svfprintf_r+0xcb0>
  407080:	8814      	ldrh	r4, [r2, #0]
  407082:	3204      	adds	r2, #4
  407084:	2500      	movs	r5, #0
  407086:	2301      	movs	r3, #1
  407088:	920f      	str	r2, [sp, #60]	; 0x3c
  40708a:	2700      	movs	r7, #0
  40708c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407090:	990a      	ldr	r1, [sp, #40]	; 0x28
  407092:	1c4a      	adds	r2, r1, #1
  407094:	f000 8265 	beq.w	407562 <_svfprintf_r+0x6be>
  407098:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40709c:	9207      	str	r2, [sp, #28]
  40709e:	ea54 0205 	orrs.w	r2, r4, r5
  4070a2:	f040 8264 	bne.w	40756e <_svfprintf_r+0x6ca>
  4070a6:	2900      	cmp	r1, #0
  4070a8:	f040 843c 	bne.w	407924 <_svfprintf_r+0xa80>
  4070ac:	2b00      	cmp	r3, #0
  4070ae:	f040 84d7 	bne.w	407a60 <_svfprintf_r+0xbbc>
  4070b2:	f01b 0301 	ands.w	r3, fp, #1
  4070b6:	930e      	str	r3, [sp, #56]	; 0x38
  4070b8:	f000 8604 	beq.w	407cc4 <_svfprintf_r+0xe20>
  4070bc:	ae42      	add	r6, sp, #264	; 0x108
  4070be:	2330      	movs	r3, #48	; 0x30
  4070c0:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4070c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4070c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4070c8:	4293      	cmp	r3, r2
  4070ca:	bfb8      	it	lt
  4070cc:	4613      	movlt	r3, r2
  4070ce:	9308      	str	r3, [sp, #32]
  4070d0:	2300      	movs	r3, #0
  4070d2:	9312      	str	r3, [sp, #72]	; 0x48
  4070d4:	b117      	cbz	r7, 4070dc <_svfprintf_r+0x238>
  4070d6:	9b08      	ldr	r3, [sp, #32]
  4070d8:	3301      	adds	r3, #1
  4070da:	9308      	str	r3, [sp, #32]
  4070dc:	9b07      	ldr	r3, [sp, #28]
  4070de:	f013 0302 	ands.w	r3, r3, #2
  4070e2:	9310      	str	r3, [sp, #64]	; 0x40
  4070e4:	d002      	beq.n	4070ec <_svfprintf_r+0x248>
  4070e6:	9b08      	ldr	r3, [sp, #32]
  4070e8:	3302      	adds	r3, #2
  4070ea:	9308      	str	r3, [sp, #32]
  4070ec:	9b07      	ldr	r3, [sp, #28]
  4070ee:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4070f2:	f040 830e 	bne.w	407712 <_svfprintf_r+0x86e>
  4070f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4070f8:	9a08      	ldr	r2, [sp, #32]
  4070fa:	eba3 0b02 	sub.w	fp, r3, r2
  4070fe:	f1bb 0f00 	cmp.w	fp, #0
  407102:	f340 8306 	ble.w	407712 <_svfprintf_r+0x86e>
  407106:	f1bb 0f10 	cmp.w	fp, #16
  40710a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40710c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40710e:	dd29      	ble.n	407164 <_svfprintf_r+0x2c0>
  407110:	4643      	mov	r3, r8
  407112:	4621      	mov	r1, r4
  407114:	46a8      	mov	r8, r5
  407116:	2710      	movs	r7, #16
  407118:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40711a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40711c:	e006      	b.n	40712c <_svfprintf_r+0x288>
  40711e:	f1ab 0b10 	sub.w	fp, fp, #16
  407122:	f1bb 0f10 	cmp.w	fp, #16
  407126:	f103 0308 	add.w	r3, r3, #8
  40712a:	dd18      	ble.n	40715e <_svfprintf_r+0x2ba>
  40712c:	3201      	adds	r2, #1
  40712e:	48b7      	ldr	r0, [pc, #732]	; (40740c <_svfprintf_r+0x568>)
  407130:	9226      	str	r2, [sp, #152]	; 0x98
  407132:	3110      	adds	r1, #16
  407134:	2a07      	cmp	r2, #7
  407136:	9127      	str	r1, [sp, #156]	; 0x9c
  407138:	e883 0081 	stmia.w	r3, {r0, r7}
  40713c:	ddef      	ble.n	40711e <_svfprintf_r+0x27a>
  40713e:	aa25      	add	r2, sp, #148	; 0x94
  407140:	4629      	mov	r1, r5
  407142:	4620      	mov	r0, r4
  407144:	f004 fe46 	bl	40bdd4 <__ssprint_r>
  407148:	2800      	cmp	r0, #0
  40714a:	f47f af7d 	bne.w	407048 <_svfprintf_r+0x1a4>
  40714e:	f1ab 0b10 	sub.w	fp, fp, #16
  407152:	f1bb 0f10 	cmp.w	fp, #16
  407156:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407158:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40715a:	464b      	mov	r3, r9
  40715c:	dce6      	bgt.n	40712c <_svfprintf_r+0x288>
  40715e:	4645      	mov	r5, r8
  407160:	460c      	mov	r4, r1
  407162:	4698      	mov	r8, r3
  407164:	3201      	adds	r2, #1
  407166:	4ba9      	ldr	r3, [pc, #676]	; (40740c <_svfprintf_r+0x568>)
  407168:	9226      	str	r2, [sp, #152]	; 0x98
  40716a:	445c      	add	r4, fp
  40716c:	2a07      	cmp	r2, #7
  40716e:	9427      	str	r4, [sp, #156]	; 0x9c
  407170:	e888 0808 	stmia.w	r8, {r3, fp}
  407174:	f300 8498 	bgt.w	407aa8 <_svfprintf_r+0xc04>
  407178:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40717c:	f108 0808 	add.w	r8, r8, #8
  407180:	b177      	cbz	r7, 4071a0 <_svfprintf_r+0x2fc>
  407182:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407184:	3301      	adds	r3, #1
  407186:	3401      	adds	r4, #1
  407188:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40718c:	2201      	movs	r2, #1
  40718e:	2b07      	cmp	r3, #7
  407190:	9427      	str	r4, [sp, #156]	; 0x9c
  407192:	9326      	str	r3, [sp, #152]	; 0x98
  407194:	e888 0006 	stmia.w	r8, {r1, r2}
  407198:	f300 83db 	bgt.w	407952 <_svfprintf_r+0xaae>
  40719c:	f108 0808 	add.w	r8, r8, #8
  4071a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4071a2:	b16b      	cbz	r3, 4071c0 <_svfprintf_r+0x31c>
  4071a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4071a6:	3301      	adds	r3, #1
  4071a8:	3402      	adds	r4, #2
  4071aa:	a91e      	add	r1, sp, #120	; 0x78
  4071ac:	2202      	movs	r2, #2
  4071ae:	2b07      	cmp	r3, #7
  4071b0:	9427      	str	r4, [sp, #156]	; 0x9c
  4071b2:	9326      	str	r3, [sp, #152]	; 0x98
  4071b4:	e888 0006 	stmia.w	r8, {r1, r2}
  4071b8:	f300 83d6 	bgt.w	407968 <_svfprintf_r+0xac4>
  4071bc:	f108 0808 	add.w	r8, r8, #8
  4071c0:	2d80      	cmp	r5, #128	; 0x80
  4071c2:	f000 8315 	beq.w	4077f0 <_svfprintf_r+0x94c>
  4071c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4071c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4071ca:	1a9f      	subs	r7, r3, r2
  4071cc:	2f00      	cmp	r7, #0
  4071ce:	dd36      	ble.n	40723e <_svfprintf_r+0x39a>
  4071d0:	2f10      	cmp	r7, #16
  4071d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4071d4:	4d8e      	ldr	r5, [pc, #568]	; (407410 <_svfprintf_r+0x56c>)
  4071d6:	dd27      	ble.n	407228 <_svfprintf_r+0x384>
  4071d8:	4642      	mov	r2, r8
  4071da:	4621      	mov	r1, r4
  4071dc:	46b0      	mov	r8, r6
  4071de:	f04f 0b10 	mov.w	fp, #16
  4071e2:	462e      	mov	r6, r5
  4071e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4071e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4071e8:	e004      	b.n	4071f4 <_svfprintf_r+0x350>
  4071ea:	3f10      	subs	r7, #16
  4071ec:	2f10      	cmp	r7, #16
  4071ee:	f102 0208 	add.w	r2, r2, #8
  4071f2:	dd15      	ble.n	407220 <_svfprintf_r+0x37c>
  4071f4:	3301      	adds	r3, #1
  4071f6:	3110      	adds	r1, #16
  4071f8:	2b07      	cmp	r3, #7
  4071fa:	9127      	str	r1, [sp, #156]	; 0x9c
  4071fc:	9326      	str	r3, [sp, #152]	; 0x98
  4071fe:	e882 0840 	stmia.w	r2, {r6, fp}
  407202:	ddf2      	ble.n	4071ea <_svfprintf_r+0x346>
  407204:	aa25      	add	r2, sp, #148	; 0x94
  407206:	4629      	mov	r1, r5
  407208:	4620      	mov	r0, r4
  40720a:	f004 fde3 	bl	40bdd4 <__ssprint_r>
  40720e:	2800      	cmp	r0, #0
  407210:	f47f af1a 	bne.w	407048 <_svfprintf_r+0x1a4>
  407214:	3f10      	subs	r7, #16
  407216:	2f10      	cmp	r7, #16
  407218:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40721a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40721c:	464a      	mov	r2, r9
  40721e:	dce9      	bgt.n	4071f4 <_svfprintf_r+0x350>
  407220:	4635      	mov	r5, r6
  407222:	460c      	mov	r4, r1
  407224:	4646      	mov	r6, r8
  407226:	4690      	mov	r8, r2
  407228:	3301      	adds	r3, #1
  40722a:	443c      	add	r4, r7
  40722c:	2b07      	cmp	r3, #7
  40722e:	9427      	str	r4, [sp, #156]	; 0x9c
  407230:	9326      	str	r3, [sp, #152]	; 0x98
  407232:	e888 00a0 	stmia.w	r8, {r5, r7}
  407236:	f300 8381 	bgt.w	40793c <_svfprintf_r+0xa98>
  40723a:	f108 0808 	add.w	r8, r8, #8
  40723e:	9b07      	ldr	r3, [sp, #28]
  407240:	05df      	lsls	r7, r3, #23
  407242:	f100 8268 	bmi.w	407716 <_svfprintf_r+0x872>
  407246:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407248:	990e      	ldr	r1, [sp, #56]	; 0x38
  40724a:	f8c8 6000 	str.w	r6, [r8]
  40724e:	3301      	adds	r3, #1
  407250:	440c      	add	r4, r1
  407252:	2b07      	cmp	r3, #7
  407254:	9427      	str	r4, [sp, #156]	; 0x9c
  407256:	f8c8 1004 	str.w	r1, [r8, #4]
  40725a:	9326      	str	r3, [sp, #152]	; 0x98
  40725c:	f300 834d 	bgt.w	4078fa <_svfprintf_r+0xa56>
  407260:	f108 0808 	add.w	r8, r8, #8
  407264:	9b07      	ldr	r3, [sp, #28]
  407266:	075b      	lsls	r3, r3, #29
  407268:	d53a      	bpl.n	4072e0 <_svfprintf_r+0x43c>
  40726a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40726c:	9a08      	ldr	r2, [sp, #32]
  40726e:	1a9d      	subs	r5, r3, r2
  407270:	2d00      	cmp	r5, #0
  407272:	dd35      	ble.n	4072e0 <_svfprintf_r+0x43c>
  407274:	2d10      	cmp	r5, #16
  407276:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407278:	dd20      	ble.n	4072bc <_svfprintf_r+0x418>
  40727a:	2610      	movs	r6, #16
  40727c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40727e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  407282:	e004      	b.n	40728e <_svfprintf_r+0x3ea>
  407284:	3d10      	subs	r5, #16
  407286:	2d10      	cmp	r5, #16
  407288:	f108 0808 	add.w	r8, r8, #8
  40728c:	dd16      	ble.n	4072bc <_svfprintf_r+0x418>
  40728e:	3301      	adds	r3, #1
  407290:	4a5e      	ldr	r2, [pc, #376]	; (40740c <_svfprintf_r+0x568>)
  407292:	9326      	str	r3, [sp, #152]	; 0x98
  407294:	3410      	adds	r4, #16
  407296:	2b07      	cmp	r3, #7
  407298:	9427      	str	r4, [sp, #156]	; 0x9c
  40729a:	e888 0044 	stmia.w	r8, {r2, r6}
  40729e:	ddf1      	ble.n	407284 <_svfprintf_r+0x3e0>
  4072a0:	aa25      	add	r2, sp, #148	; 0x94
  4072a2:	4659      	mov	r1, fp
  4072a4:	4638      	mov	r0, r7
  4072a6:	f004 fd95 	bl	40bdd4 <__ssprint_r>
  4072aa:	2800      	cmp	r0, #0
  4072ac:	f47f aecc 	bne.w	407048 <_svfprintf_r+0x1a4>
  4072b0:	3d10      	subs	r5, #16
  4072b2:	2d10      	cmp	r5, #16
  4072b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4072b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4072b8:	46c8      	mov	r8, r9
  4072ba:	dce8      	bgt.n	40728e <_svfprintf_r+0x3ea>
  4072bc:	3301      	adds	r3, #1
  4072be:	4a53      	ldr	r2, [pc, #332]	; (40740c <_svfprintf_r+0x568>)
  4072c0:	9326      	str	r3, [sp, #152]	; 0x98
  4072c2:	442c      	add	r4, r5
  4072c4:	2b07      	cmp	r3, #7
  4072c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4072c8:	e888 0024 	stmia.w	r8, {r2, r5}
  4072cc:	dd08      	ble.n	4072e0 <_svfprintf_r+0x43c>
  4072ce:	aa25      	add	r2, sp, #148	; 0x94
  4072d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4072d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4072d4:	f004 fd7e 	bl	40bdd4 <__ssprint_r>
  4072d8:	2800      	cmp	r0, #0
  4072da:	f47f aeb5 	bne.w	407048 <_svfprintf_r+0x1a4>
  4072de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4072e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4072e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4072e4:	9908      	ldr	r1, [sp, #32]
  4072e6:	428a      	cmp	r2, r1
  4072e8:	bfac      	ite	ge
  4072ea:	189b      	addge	r3, r3, r2
  4072ec:	185b      	addlt	r3, r3, r1
  4072ee:	9309      	str	r3, [sp, #36]	; 0x24
  4072f0:	2c00      	cmp	r4, #0
  4072f2:	f040 830d 	bne.w	407910 <_svfprintf_r+0xa6c>
  4072f6:	2300      	movs	r3, #0
  4072f8:	9326      	str	r3, [sp, #152]	; 0x98
  4072fa:	46c8      	mov	r8, r9
  4072fc:	e5f9      	b.n	406ef2 <_svfprintf_r+0x4e>
  4072fe:	9311      	str	r3, [sp, #68]	; 0x44
  407300:	f01b 0320 	ands.w	r3, fp, #32
  407304:	f040 81e3 	bne.w	4076ce <_svfprintf_r+0x82a>
  407308:	f01b 0210 	ands.w	r2, fp, #16
  40730c:	f040 842e 	bne.w	407b6c <_svfprintf_r+0xcc8>
  407310:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  407314:	f000 842a 	beq.w	407b6c <_svfprintf_r+0xcc8>
  407318:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40731a:	4613      	mov	r3, r2
  40731c:	460a      	mov	r2, r1
  40731e:	3204      	adds	r2, #4
  407320:	880c      	ldrh	r4, [r1, #0]
  407322:	920f      	str	r2, [sp, #60]	; 0x3c
  407324:	2500      	movs	r5, #0
  407326:	e6b0      	b.n	40708a <_svfprintf_r+0x1e6>
  407328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40732a:	9311      	str	r3, [sp, #68]	; 0x44
  40732c:	6816      	ldr	r6, [r2, #0]
  40732e:	2400      	movs	r4, #0
  407330:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  407334:	1d15      	adds	r5, r2, #4
  407336:	2e00      	cmp	r6, #0
  407338:	f000 86a7 	beq.w	40808a <_svfprintf_r+0x11e6>
  40733c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40733e:	1c53      	adds	r3, r2, #1
  407340:	f000 8609 	beq.w	407f56 <_svfprintf_r+0x10b2>
  407344:	4621      	mov	r1, r4
  407346:	4630      	mov	r0, r6
  407348:	f003 feea 	bl	40b120 <memchr>
  40734c:	2800      	cmp	r0, #0
  40734e:	f000 86e1 	beq.w	408114 <_svfprintf_r+0x1270>
  407352:	1b83      	subs	r3, r0, r6
  407354:	930e      	str	r3, [sp, #56]	; 0x38
  407356:	940a      	str	r4, [sp, #40]	; 0x28
  407358:	950f      	str	r5, [sp, #60]	; 0x3c
  40735a:	f8cd b01c 	str.w	fp, [sp, #28]
  40735e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407362:	9308      	str	r3, [sp, #32]
  407364:	9412      	str	r4, [sp, #72]	; 0x48
  407366:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40736a:	e6b3      	b.n	4070d4 <_svfprintf_r+0x230>
  40736c:	f89a 3000 	ldrb.w	r3, [sl]
  407370:	2201      	movs	r2, #1
  407372:	212b      	movs	r1, #43	; 0x2b
  407374:	e5ee      	b.n	406f54 <_svfprintf_r+0xb0>
  407376:	f04b 0b20 	orr.w	fp, fp, #32
  40737a:	f89a 3000 	ldrb.w	r3, [sl]
  40737e:	e5e9      	b.n	406f54 <_svfprintf_r+0xb0>
  407380:	9311      	str	r3, [sp, #68]	; 0x44
  407382:	2a00      	cmp	r2, #0
  407384:	f040 8795 	bne.w	4082b2 <_svfprintf_r+0x140e>
  407388:	4b22      	ldr	r3, [pc, #136]	; (407414 <_svfprintf_r+0x570>)
  40738a:	9318      	str	r3, [sp, #96]	; 0x60
  40738c:	f01b 0f20 	tst.w	fp, #32
  407390:	f040 8111 	bne.w	4075b6 <_svfprintf_r+0x712>
  407394:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407396:	f01b 0f10 	tst.w	fp, #16
  40739a:	4613      	mov	r3, r2
  40739c:	f040 83e1 	bne.w	407b62 <_svfprintf_r+0xcbe>
  4073a0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4073a4:	f000 83dd 	beq.w	407b62 <_svfprintf_r+0xcbe>
  4073a8:	3304      	adds	r3, #4
  4073aa:	8814      	ldrh	r4, [r2, #0]
  4073ac:	930f      	str	r3, [sp, #60]	; 0x3c
  4073ae:	2500      	movs	r5, #0
  4073b0:	f01b 0f01 	tst.w	fp, #1
  4073b4:	f000 810c 	beq.w	4075d0 <_svfprintf_r+0x72c>
  4073b8:	ea54 0305 	orrs.w	r3, r4, r5
  4073bc:	f000 8108 	beq.w	4075d0 <_svfprintf_r+0x72c>
  4073c0:	2330      	movs	r3, #48	; 0x30
  4073c2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4073c6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4073ca:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4073ce:	f04b 0b02 	orr.w	fp, fp, #2
  4073d2:	2302      	movs	r3, #2
  4073d4:	e659      	b.n	40708a <_svfprintf_r+0x1e6>
  4073d6:	f89a 3000 	ldrb.w	r3, [sl]
  4073da:	2900      	cmp	r1, #0
  4073dc:	f47f adba 	bne.w	406f54 <_svfprintf_r+0xb0>
  4073e0:	2201      	movs	r2, #1
  4073e2:	2120      	movs	r1, #32
  4073e4:	e5b6      	b.n	406f54 <_svfprintf_r+0xb0>
  4073e6:	f04b 0b01 	orr.w	fp, fp, #1
  4073ea:	f89a 3000 	ldrb.w	r3, [sl]
  4073ee:	e5b1      	b.n	406f54 <_svfprintf_r+0xb0>
  4073f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4073f2:	6823      	ldr	r3, [r4, #0]
  4073f4:	930d      	str	r3, [sp, #52]	; 0x34
  4073f6:	4618      	mov	r0, r3
  4073f8:	2800      	cmp	r0, #0
  4073fa:	4623      	mov	r3, r4
  4073fc:	f103 0304 	add.w	r3, r3, #4
  407400:	f6ff ae0a 	blt.w	407018 <_svfprintf_r+0x174>
  407404:	930f      	str	r3, [sp, #60]	; 0x3c
  407406:	f89a 3000 	ldrb.w	r3, [sl]
  40740a:	e5a3      	b.n	406f54 <_svfprintf_r+0xb0>
  40740c:	0040dfb4 	.word	0x0040dfb4
  407410:	0040dfc4 	.word	0x0040dfc4
  407414:	0040df98 	.word	0x0040df98
  407418:	f04b 0b10 	orr.w	fp, fp, #16
  40741c:	f01b 0f20 	tst.w	fp, #32
  407420:	9311      	str	r3, [sp, #68]	; 0x44
  407422:	f43f ae23 	beq.w	40706c <_svfprintf_r+0x1c8>
  407426:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407428:	3507      	adds	r5, #7
  40742a:	f025 0307 	bic.w	r3, r5, #7
  40742e:	f103 0208 	add.w	r2, r3, #8
  407432:	e9d3 4500 	ldrd	r4, r5, [r3]
  407436:	920f      	str	r2, [sp, #60]	; 0x3c
  407438:	2301      	movs	r3, #1
  40743a:	e626      	b.n	40708a <_svfprintf_r+0x1e6>
  40743c:	f89a 3000 	ldrb.w	r3, [sl]
  407440:	2b2a      	cmp	r3, #42	; 0x2a
  407442:	f10a 0401 	add.w	r4, sl, #1
  407446:	f000 8727 	beq.w	408298 <_svfprintf_r+0x13f4>
  40744a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40744e:	2809      	cmp	r0, #9
  407450:	46a2      	mov	sl, r4
  407452:	f200 86ad 	bhi.w	4081b0 <_svfprintf_r+0x130c>
  407456:	2300      	movs	r3, #0
  407458:	461c      	mov	r4, r3
  40745a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40745e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407462:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407466:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40746a:	2809      	cmp	r0, #9
  40746c:	d9f5      	bls.n	40745a <_svfprintf_r+0x5b6>
  40746e:	940a      	str	r4, [sp, #40]	; 0x28
  407470:	e572      	b.n	406f58 <_svfprintf_r+0xb4>
  407472:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407476:	f89a 3000 	ldrb.w	r3, [sl]
  40747a:	e56b      	b.n	406f54 <_svfprintf_r+0xb0>
  40747c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  407480:	f89a 3000 	ldrb.w	r3, [sl]
  407484:	e566      	b.n	406f54 <_svfprintf_r+0xb0>
  407486:	f89a 3000 	ldrb.w	r3, [sl]
  40748a:	2b6c      	cmp	r3, #108	; 0x6c
  40748c:	bf03      	ittte	eq
  40748e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  407492:	f04b 0b20 	orreq.w	fp, fp, #32
  407496:	f10a 0a01 	addeq.w	sl, sl, #1
  40749a:	f04b 0b10 	orrne.w	fp, fp, #16
  40749e:	e559      	b.n	406f54 <_svfprintf_r+0xb0>
  4074a0:	2a00      	cmp	r2, #0
  4074a2:	f040 8711 	bne.w	4082c8 <_svfprintf_r+0x1424>
  4074a6:	f01b 0f20 	tst.w	fp, #32
  4074aa:	f040 84f9 	bne.w	407ea0 <_svfprintf_r+0xffc>
  4074ae:	f01b 0f10 	tst.w	fp, #16
  4074b2:	f040 84ac 	bne.w	407e0e <_svfprintf_r+0xf6a>
  4074b6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4074ba:	f000 84a8 	beq.w	407e0e <_svfprintf_r+0xf6a>
  4074be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4074c0:	6813      	ldr	r3, [r2, #0]
  4074c2:	3204      	adds	r2, #4
  4074c4:	920f      	str	r2, [sp, #60]	; 0x3c
  4074c6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4074ca:	801a      	strh	r2, [r3, #0]
  4074cc:	e511      	b.n	406ef2 <_svfprintf_r+0x4e>
  4074ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4074d0:	4bb3      	ldr	r3, [pc, #716]	; (4077a0 <_svfprintf_r+0x8fc>)
  4074d2:	680c      	ldr	r4, [r1, #0]
  4074d4:	9318      	str	r3, [sp, #96]	; 0x60
  4074d6:	2230      	movs	r2, #48	; 0x30
  4074d8:	2378      	movs	r3, #120	; 0x78
  4074da:	3104      	adds	r1, #4
  4074dc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4074e0:	9311      	str	r3, [sp, #68]	; 0x44
  4074e2:	f04b 0b02 	orr.w	fp, fp, #2
  4074e6:	910f      	str	r1, [sp, #60]	; 0x3c
  4074e8:	2500      	movs	r5, #0
  4074ea:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4074ee:	2302      	movs	r3, #2
  4074f0:	e5cb      	b.n	40708a <_svfprintf_r+0x1e6>
  4074f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4074f4:	9311      	str	r3, [sp, #68]	; 0x44
  4074f6:	680a      	ldr	r2, [r1, #0]
  4074f8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4074fc:	2300      	movs	r3, #0
  4074fe:	460a      	mov	r2, r1
  407500:	461f      	mov	r7, r3
  407502:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407506:	3204      	adds	r2, #4
  407508:	2301      	movs	r3, #1
  40750a:	9308      	str	r3, [sp, #32]
  40750c:	f8cd b01c 	str.w	fp, [sp, #28]
  407510:	970a      	str	r7, [sp, #40]	; 0x28
  407512:	9712      	str	r7, [sp, #72]	; 0x48
  407514:	920f      	str	r2, [sp, #60]	; 0x3c
  407516:	930e      	str	r3, [sp, #56]	; 0x38
  407518:	ae28      	add	r6, sp, #160	; 0xa0
  40751a:	e5df      	b.n	4070dc <_svfprintf_r+0x238>
  40751c:	9311      	str	r3, [sp, #68]	; 0x44
  40751e:	2a00      	cmp	r2, #0
  407520:	f040 86ea 	bne.w	4082f8 <_svfprintf_r+0x1454>
  407524:	f01b 0f20 	tst.w	fp, #32
  407528:	d15d      	bne.n	4075e6 <_svfprintf_r+0x742>
  40752a:	f01b 0f10 	tst.w	fp, #16
  40752e:	f040 8308 	bne.w	407b42 <_svfprintf_r+0xc9e>
  407532:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407536:	f000 8304 	beq.w	407b42 <_svfprintf_r+0xc9e>
  40753a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40753c:	f9b1 4000 	ldrsh.w	r4, [r1]
  407540:	3104      	adds	r1, #4
  407542:	17e5      	asrs	r5, r4, #31
  407544:	4622      	mov	r2, r4
  407546:	462b      	mov	r3, r5
  407548:	910f      	str	r1, [sp, #60]	; 0x3c
  40754a:	2a00      	cmp	r2, #0
  40754c:	f173 0300 	sbcs.w	r3, r3, #0
  407550:	db58      	blt.n	407604 <_svfprintf_r+0x760>
  407552:	990a      	ldr	r1, [sp, #40]	; 0x28
  407554:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407558:	1c4a      	adds	r2, r1, #1
  40755a:	f04f 0301 	mov.w	r3, #1
  40755e:	f47f ad9b 	bne.w	407098 <_svfprintf_r+0x1f4>
  407562:	ea54 0205 	orrs.w	r2, r4, r5
  407566:	f000 81df 	beq.w	407928 <_svfprintf_r+0xa84>
  40756a:	f8cd b01c 	str.w	fp, [sp, #28]
  40756e:	2b01      	cmp	r3, #1
  407570:	f000 827b 	beq.w	407a6a <_svfprintf_r+0xbc6>
  407574:	2b02      	cmp	r3, #2
  407576:	f040 8206 	bne.w	407986 <_svfprintf_r+0xae2>
  40757a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40757c:	464e      	mov	r6, r9
  40757e:	0923      	lsrs	r3, r4, #4
  407580:	f004 010f 	and.w	r1, r4, #15
  407584:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407588:	092a      	lsrs	r2, r5, #4
  40758a:	461c      	mov	r4, r3
  40758c:	4615      	mov	r5, r2
  40758e:	5c43      	ldrb	r3, [r0, r1]
  407590:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407594:	ea54 0305 	orrs.w	r3, r4, r5
  407598:	d1f1      	bne.n	40757e <_svfprintf_r+0x6da>
  40759a:	eba9 0306 	sub.w	r3, r9, r6
  40759e:	930e      	str	r3, [sp, #56]	; 0x38
  4075a0:	e590      	b.n	4070c4 <_svfprintf_r+0x220>
  4075a2:	9311      	str	r3, [sp, #68]	; 0x44
  4075a4:	2a00      	cmp	r2, #0
  4075a6:	f040 86a3 	bne.w	4082f0 <_svfprintf_r+0x144c>
  4075aa:	4b7e      	ldr	r3, [pc, #504]	; (4077a4 <_svfprintf_r+0x900>)
  4075ac:	9318      	str	r3, [sp, #96]	; 0x60
  4075ae:	f01b 0f20 	tst.w	fp, #32
  4075b2:	f43f aeef 	beq.w	407394 <_svfprintf_r+0x4f0>
  4075b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4075b8:	3507      	adds	r5, #7
  4075ba:	f025 0307 	bic.w	r3, r5, #7
  4075be:	f103 0208 	add.w	r2, r3, #8
  4075c2:	f01b 0f01 	tst.w	fp, #1
  4075c6:	920f      	str	r2, [sp, #60]	; 0x3c
  4075c8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4075cc:	f47f aef4 	bne.w	4073b8 <_svfprintf_r+0x514>
  4075d0:	2302      	movs	r3, #2
  4075d2:	e55a      	b.n	40708a <_svfprintf_r+0x1e6>
  4075d4:	9311      	str	r3, [sp, #68]	; 0x44
  4075d6:	2a00      	cmp	r2, #0
  4075d8:	f040 8686 	bne.w	4082e8 <_svfprintf_r+0x1444>
  4075dc:	f04b 0b10 	orr.w	fp, fp, #16
  4075e0:	f01b 0f20 	tst.w	fp, #32
  4075e4:	d0a1      	beq.n	40752a <_svfprintf_r+0x686>
  4075e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4075e8:	3507      	adds	r5, #7
  4075ea:	f025 0507 	bic.w	r5, r5, #7
  4075ee:	e9d5 2300 	ldrd	r2, r3, [r5]
  4075f2:	2a00      	cmp	r2, #0
  4075f4:	f105 0108 	add.w	r1, r5, #8
  4075f8:	461d      	mov	r5, r3
  4075fa:	f173 0300 	sbcs.w	r3, r3, #0
  4075fe:	910f      	str	r1, [sp, #60]	; 0x3c
  407600:	4614      	mov	r4, r2
  407602:	daa6      	bge.n	407552 <_svfprintf_r+0x6ae>
  407604:	272d      	movs	r7, #45	; 0x2d
  407606:	4264      	negs	r4, r4
  407608:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40760c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407610:	2301      	movs	r3, #1
  407612:	e53d      	b.n	407090 <_svfprintf_r+0x1ec>
  407614:	9311      	str	r3, [sp, #68]	; 0x44
  407616:	2a00      	cmp	r2, #0
  407618:	f040 8662 	bne.w	4082e0 <_svfprintf_r+0x143c>
  40761c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40761e:	3507      	adds	r5, #7
  407620:	f025 0307 	bic.w	r3, r5, #7
  407624:	f103 0208 	add.w	r2, r3, #8
  407628:	920f      	str	r2, [sp, #60]	; 0x3c
  40762a:	681a      	ldr	r2, [r3, #0]
  40762c:	9215      	str	r2, [sp, #84]	; 0x54
  40762e:	685b      	ldr	r3, [r3, #4]
  407630:	9314      	str	r3, [sp, #80]	; 0x50
  407632:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407634:	9d15      	ldr	r5, [sp, #84]	; 0x54
  407636:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40763a:	4628      	mov	r0, r5
  40763c:	4621      	mov	r1, r4
  40763e:	f04f 32ff 	mov.w	r2, #4294967295
  407642:	4b59      	ldr	r3, [pc, #356]	; (4077a8 <_svfprintf_r+0x904>)
  407644:	f005 fa94 	bl	40cb70 <__aeabi_dcmpun>
  407648:	2800      	cmp	r0, #0
  40764a:	f040 834a 	bne.w	407ce2 <_svfprintf_r+0xe3e>
  40764e:	4628      	mov	r0, r5
  407650:	4621      	mov	r1, r4
  407652:	f04f 32ff 	mov.w	r2, #4294967295
  407656:	4b54      	ldr	r3, [pc, #336]	; (4077a8 <_svfprintf_r+0x904>)
  407658:	f005 fa6c 	bl	40cb34 <__aeabi_dcmple>
  40765c:	2800      	cmp	r0, #0
  40765e:	f040 8340 	bne.w	407ce2 <_svfprintf_r+0xe3e>
  407662:	a815      	add	r0, sp, #84	; 0x54
  407664:	c80d      	ldmia	r0, {r0, r2, r3}
  407666:	9914      	ldr	r1, [sp, #80]	; 0x50
  407668:	f005 fa5a 	bl	40cb20 <__aeabi_dcmplt>
  40766c:	2800      	cmp	r0, #0
  40766e:	f040 8530 	bne.w	4080d2 <_svfprintf_r+0x122e>
  407672:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407676:	4e4d      	ldr	r6, [pc, #308]	; (4077ac <_svfprintf_r+0x908>)
  407678:	4b4d      	ldr	r3, [pc, #308]	; (4077b0 <_svfprintf_r+0x90c>)
  40767a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40767e:	9007      	str	r0, [sp, #28]
  407680:	9811      	ldr	r0, [sp, #68]	; 0x44
  407682:	2203      	movs	r2, #3
  407684:	2100      	movs	r1, #0
  407686:	9208      	str	r2, [sp, #32]
  407688:	910a      	str	r1, [sp, #40]	; 0x28
  40768a:	2847      	cmp	r0, #71	; 0x47
  40768c:	bfd8      	it	le
  40768e:	461e      	movle	r6, r3
  407690:	920e      	str	r2, [sp, #56]	; 0x38
  407692:	9112      	str	r1, [sp, #72]	; 0x48
  407694:	e51e      	b.n	4070d4 <_svfprintf_r+0x230>
  407696:	f04b 0b08 	orr.w	fp, fp, #8
  40769a:	f89a 3000 	ldrb.w	r3, [sl]
  40769e:	e459      	b.n	406f54 <_svfprintf_r+0xb0>
  4076a0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4076a4:	2300      	movs	r3, #0
  4076a6:	461c      	mov	r4, r3
  4076a8:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4076ac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4076b0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4076b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4076b8:	2809      	cmp	r0, #9
  4076ba:	d9f5      	bls.n	4076a8 <_svfprintf_r+0x804>
  4076bc:	940d      	str	r4, [sp, #52]	; 0x34
  4076be:	e44b      	b.n	406f58 <_svfprintf_r+0xb4>
  4076c0:	f04b 0b10 	orr.w	fp, fp, #16
  4076c4:	9311      	str	r3, [sp, #68]	; 0x44
  4076c6:	f01b 0320 	ands.w	r3, fp, #32
  4076ca:	f43f ae1d 	beq.w	407308 <_svfprintf_r+0x464>
  4076ce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4076d0:	3507      	adds	r5, #7
  4076d2:	f025 0307 	bic.w	r3, r5, #7
  4076d6:	f103 0208 	add.w	r2, r3, #8
  4076da:	e9d3 4500 	ldrd	r4, r5, [r3]
  4076de:	920f      	str	r2, [sp, #60]	; 0x3c
  4076e0:	2300      	movs	r3, #0
  4076e2:	e4d2      	b.n	40708a <_svfprintf_r+0x1e6>
  4076e4:	9311      	str	r3, [sp, #68]	; 0x44
  4076e6:	2a00      	cmp	r2, #0
  4076e8:	f040 85e7 	bne.w	4082ba <_svfprintf_r+0x1416>
  4076ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4076ee:	2a00      	cmp	r2, #0
  4076f0:	f43f aca3 	beq.w	40703a <_svfprintf_r+0x196>
  4076f4:	2300      	movs	r3, #0
  4076f6:	2101      	movs	r1, #1
  4076f8:	461f      	mov	r7, r3
  4076fa:	9108      	str	r1, [sp, #32]
  4076fc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  407700:	f8cd b01c 	str.w	fp, [sp, #28]
  407704:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407708:	930a      	str	r3, [sp, #40]	; 0x28
  40770a:	9312      	str	r3, [sp, #72]	; 0x48
  40770c:	910e      	str	r1, [sp, #56]	; 0x38
  40770e:	ae28      	add	r6, sp, #160	; 0xa0
  407710:	e4e4      	b.n	4070dc <_svfprintf_r+0x238>
  407712:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407714:	e534      	b.n	407180 <_svfprintf_r+0x2dc>
  407716:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407718:	2b65      	cmp	r3, #101	; 0x65
  40771a:	f340 80a7 	ble.w	40786c <_svfprintf_r+0x9c8>
  40771e:	a815      	add	r0, sp, #84	; 0x54
  407720:	c80d      	ldmia	r0, {r0, r2, r3}
  407722:	9914      	ldr	r1, [sp, #80]	; 0x50
  407724:	f005 f9f2 	bl	40cb0c <__aeabi_dcmpeq>
  407728:	2800      	cmp	r0, #0
  40772a:	f000 8150 	beq.w	4079ce <_svfprintf_r+0xb2a>
  40772e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407730:	4a20      	ldr	r2, [pc, #128]	; (4077b4 <_svfprintf_r+0x910>)
  407732:	f8c8 2000 	str.w	r2, [r8]
  407736:	3301      	adds	r3, #1
  407738:	3401      	adds	r4, #1
  40773a:	2201      	movs	r2, #1
  40773c:	2b07      	cmp	r3, #7
  40773e:	9427      	str	r4, [sp, #156]	; 0x9c
  407740:	9326      	str	r3, [sp, #152]	; 0x98
  407742:	f8c8 2004 	str.w	r2, [r8, #4]
  407746:	f300 836a 	bgt.w	407e1e <_svfprintf_r+0xf7a>
  40774a:	f108 0808 	add.w	r8, r8, #8
  40774e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407750:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407752:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407754:	4293      	cmp	r3, r2
  407756:	db03      	blt.n	407760 <_svfprintf_r+0x8bc>
  407758:	9b07      	ldr	r3, [sp, #28]
  40775a:	07dd      	lsls	r5, r3, #31
  40775c:	f57f ad82 	bpl.w	407264 <_svfprintf_r+0x3c0>
  407760:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407762:	9919      	ldr	r1, [sp, #100]	; 0x64
  407764:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407766:	f8c8 2000 	str.w	r2, [r8]
  40776a:	3301      	adds	r3, #1
  40776c:	440c      	add	r4, r1
  40776e:	2b07      	cmp	r3, #7
  407770:	f8c8 1004 	str.w	r1, [r8, #4]
  407774:	9427      	str	r4, [sp, #156]	; 0x9c
  407776:	9326      	str	r3, [sp, #152]	; 0x98
  407778:	f300 839e 	bgt.w	407eb8 <_svfprintf_r+0x1014>
  40777c:	f108 0808 	add.w	r8, r8, #8
  407780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407782:	1e5e      	subs	r6, r3, #1
  407784:	2e00      	cmp	r6, #0
  407786:	f77f ad6d 	ble.w	407264 <_svfprintf_r+0x3c0>
  40778a:	2e10      	cmp	r6, #16
  40778c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40778e:	4d0a      	ldr	r5, [pc, #40]	; (4077b8 <_svfprintf_r+0x914>)
  407790:	f340 81f5 	ble.w	407b7e <_svfprintf_r+0xcda>
  407794:	4622      	mov	r2, r4
  407796:	2710      	movs	r7, #16
  407798:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40779c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40779e:	e013      	b.n	4077c8 <_svfprintf_r+0x924>
  4077a0:	0040df98 	.word	0x0040df98
  4077a4:	0040df84 	.word	0x0040df84
  4077a8:	7fefffff 	.word	0x7fefffff
  4077ac:	0040df78 	.word	0x0040df78
  4077b0:	0040df74 	.word	0x0040df74
  4077b4:	0040dd94 	.word	0x0040dd94
  4077b8:	0040dfc4 	.word	0x0040dfc4
  4077bc:	f108 0808 	add.w	r8, r8, #8
  4077c0:	3e10      	subs	r6, #16
  4077c2:	2e10      	cmp	r6, #16
  4077c4:	f340 81da 	ble.w	407b7c <_svfprintf_r+0xcd8>
  4077c8:	3301      	adds	r3, #1
  4077ca:	3210      	adds	r2, #16
  4077cc:	2b07      	cmp	r3, #7
  4077ce:	9227      	str	r2, [sp, #156]	; 0x9c
  4077d0:	9326      	str	r3, [sp, #152]	; 0x98
  4077d2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4077d6:	ddf1      	ble.n	4077bc <_svfprintf_r+0x918>
  4077d8:	aa25      	add	r2, sp, #148	; 0x94
  4077da:	4621      	mov	r1, r4
  4077dc:	4658      	mov	r0, fp
  4077de:	f004 faf9 	bl	40bdd4 <__ssprint_r>
  4077e2:	2800      	cmp	r0, #0
  4077e4:	f47f ac30 	bne.w	407048 <_svfprintf_r+0x1a4>
  4077e8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4077ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4077ec:	46c8      	mov	r8, r9
  4077ee:	e7e7      	b.n	4077c0 <_svfprintf_r+0x91c>
  4077f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4077f2:	9a08      	ldr	r2, [sp, #32]
  4077f4:	1a9f      	subs	r7, r3, r2
  4077f6:	2f00      	cmp	r7, #0
  4077f8:	f77f ace5 	ble.w	4071c6 <_svfprintf_r+0x322>
  4077fc:	2f10      	cmp	r7, #16
  4077fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407800:	4db6      	ldr	r5, [pc, #728]	; (407adc <_svfprintf_r+0xc38>)
  407802:	dd27      	ble.n	407854 <_svfprintf_r+0x9b0>
  407804:	4642      	mov	r2, r8
  407806:	4621      	mov	r1, r4
  407808:	46b0      	mov	r8, r6
  40780a:	f04f 0b10 	mov.w	fp, #16
  40780e:	462e      	mov	r6, r5
  407810:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407812:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407814:	e004      	b.n	407820 <_svfprintf_r+0x97c>
  407816:	3f10      	subs	r7, #16
  407818:	2f10      	cmp	r7, #16
  40781a:	f102 0208 	add.w	r2, r2, #8
  40781e:	dd15      	ble.n	40784c <_svfprintf_r+0x9a8>
  407820:	3301      	adds	r3, #1
  407822:	3110      	adds	r1, #16
  407824:	2b07      	cmp	r3, #7
  407826:	9127      	str	r1, [sp, #156]	; 0x9c
  407828:	9326      	str	r3, [sp, #152]	; 0x98
  40782a:	e882 0840 	stmia.w	r2, {r6, fp}
  40782e:	ddf2      	ble.n	407816 <_svfprintf_r+0x972>
  407830:	aa25      	add	r2, sp, #148	; 0x94
  407832:	4629      	mov	r1, r5
  407834:	4620      	mov	r0, r4
  407836:	f004 facd 	bl	40bdd4 <__ssprint_r>
  40783a:	2800      	cmp	r0, #0
  40783c:	f47f ac04 	bne.w	407048 <_svfprintf_r+0x1a4>
  407840:	3f10      	subs	r7, #16
  407842:	2f10      	cmp	r7, #16
  407844:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407846:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407848:	464a      	mov	r2, r9
  40784a:	dce9      	bgt.n	407820 <_svfprintf_r+0x97c>
  40784c:	4635      	mov	r5, r6
  40784e:	460c      	mov	r4, r1
  407850:	4646      	mov	r6, r8
  407852:	4690      	mov	r8, r2
  407854:	3301      	adds	r3, #1
  407856:	443c      	add	r4, r7
  407858:	2b07      	cmp	r3, #7
  40785a:	9427      	str	r4, [sp, #156]	; 0x9c
  40785c:	9326      	str	r3, [sp, #152]	; 0x98
  40785e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407862:	f300 8232 	bgt.w	407cca <_svfprintf_r+0xe26>
  407866:	f108 0808 	add.w	r8, r8, #8
  40786a:	e4ac      	b.n	4071c6 <_svfprintf_r+0x322>
  40786c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40786e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407870:	2b01      	cmp	r3, #1
  407872:	f340 81fe 	ble.w	407c72 <_svfprintf_r+0xdce>
  407876:	3701      	adds	r7, #1
  407878:	3401      	adds	r4, #1
  40787a:	2301      	movs	r3, #1
  40787c:	2f07      	cmp	r7, #7
  40787e:	9427      	str	r4, [sp, #156]	; 0x9c
  407880:	9726      	str	r7, [sp, #152]	; 0x98
  407882:	f8c8 6000 	str.w	r6, [r8]
  407886:	f8c8 3004 	str.w	r3, [r8, #4]
  40788a:	f300 8203 	bgt.w	407c94 <_svfprintf_r+0xdf0>
  40788e:	f108 0808 	add.w	r8, r8, #8
  407892:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407894:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  407896:	f8c8 3000 	str.w	r3, [r8]
  40789a:	3701      	adds	r7, #1
  40789c:	4414      	add	r4, r2
  40789e:	2f07      	cmp	r7, #7
  4078a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4078a2:	9726      	str	r7, [sp, #152]	; 0x98
  4078a4:	f8c8 2004 	str.w	r2, [r8, #4]
  4078a8:	f300 8200 	bgt.w	407cac <_svfprintf_r+0xe08>
  4078ac:	f108 0808 	add.w	r8, r8, #8
  4078b0:	a815      	add	r0, sp, #84	; 0x54
  4078b2:	c80d      	ldmia	r0, {r0, r2, r3}
  4078b4:	9914      	ldr	r1, [sp, #80]	; 0x50
  4078b6:	f005 f929 	bl	40cb0c <__aeabi_dcmpeq>
  4078ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4078bc:	2800      	cmp	r0, #0
  4078be:	f040 8101 	bne.w	407ac4 <_svfprintf_r+0xc20>
  4078c2:	3b01      	subs	r3, #1
  4078c4:	3701      	adds	r7, #1
  4078c6:	3601      	adds	r6, #1
  4078c8:	441c      	add	r4, r3
  4078ca:	2f07      	cmp	r7, #7
  4078cc:	9726      	str	r7, [sp, #152]	; 0x98
  4078ce:	9427      	str	r4, [sp, #156]	; 0x9c
  4078d0:	f8c8 6000 	str.w	r6, [r8]
  4078d4:	f8c8 3004 	str.w	r3, [r8, #4]
  4078d8:	f300 8127 	bgt.w	407b2a <_svfprintf_r+0xc86>
  4078dc:	f108 0808 	add.w	r8, r8, #8
  4078e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4078e2:	f8c8 2004 	str.w	r2, [r8, #4]
  4078e6:	3701      	adds	r7, #1
  4078e8:	4414      	add	r4, r2
  4078ea:	ab21      	add	r3, sp, #132	; 0x84
  4078ec:	2f07      	cmp	r7, #7
  4078ee:	9427      	str	r4, [sp, #156]	; 0x9c
  4078f0:	9726      	str	r7, [sp, #152]	; 0x98
  4078f2:	f8c8 3000 	str.w	r3, [r8]
  4078f6:	f77f acb3 	ble.w	407260 <_svfprintf_r+0x3bc>
  4078fa:	aa25      	add	r2, sp, #148	; 0x94
  4078fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4078fe:	980c      	ldr	r0, [sp, #48]	; 0x30
  407900:	f004 fa68 	bl	40bdd4 <__ssprint_r>
  407904:	2800      	cmp	r0, #0
  407906:	f47f ab9f 	bne.w	407048 <_svfprintf_r+0x1a4>
  40790a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40790c:	46c8      	mov	r8, r9
  40790e:	e4a9      	b.n	407264 <_svfprintf_r+0x3c0>
  407910:	aa25      	add	r2, sp, #148	; 0x94
  407912:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407914:	980c      	ldr	r0, [sp, #48]	; 0x30
  407916:	f004 fa5d 	bl	40bdd4 <__ssprint_r>
  40791a:	2800      	cmp	r0, #0
  40791c:	f43f aceb 	beq.w	4072f6 <_svfprintf_r+0x452>
  407920:	f7ff bb92 	b.w	407048 <_svfprintf_r+0x1a4>
  407924:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407928:	2b01      	cmp	r3, #1
  40792a:	f000 8134 	beq.w	407b96 <_svfprintf_r+0xcf2>
  40792e:	2b02      	cmp	r3, #2
  407930:	d125      	bne.n	40797e <_svfprintf_r+0xada>
  407932:	f8cd b01c 	str.w	fp, [sp, #28]
  407936:	2400      	movs	r4, #0
  407938:	2500      	movs	r5, #0
  40793a:	e61e      	b.n	40757a <_svfprintf_r+0x6d6>
  40793c:	aa25      	add	r2, sp, #148	; 0x94
  40793e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407940:	980c      	ldr	r0, [sp, #48]	; 0x30
  407942:	f004 fa47 	bl	40bdd4 <__ssprint_r>
  407946:	2800      	cmp	r0, #0
  407948:	f47f ab7e 	bne.w	407048 <_svfprintf_r+0x1a4>
  40794c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40794e:	46c8      	mov	r8, r9
  407950:	e475      	b.n	40723e <_svfprintf_r+0x39a>
  407952:	aa25      	add	r2, sp, #148	; 0x94
  407954:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407956:	980c      	ldr	r0, [sp, #48]	; 0x30
  407958:	f004 fa3c 	bl	40bdd4 <__ssprint_r>
  40795c:	2800      	cmp	r0, #0
  40795e:	f47f ab73 	bne.w	407048 <_svfprintf_r+0x1a4>
  407962:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407964:	46c8      	mov	r8, r9
  407966:	e41b      	b.n	4071a0 <_svfprintf_r+0x2fc>
  407968:	aa25      	add	r2, sp, #148	; 0x94
  40796a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40796c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40796e:	f004 fa31 	bl	40bdd4 <__ssprint_r>
  407972:	2800      	cmp	r0, #0
  407974:	f47f ab68 	bne.w	407048 <_svfprintf_r+0x1a4>
  407978:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40797a:	46c8      	mov	r8, r9
  40797c:	e420      	b.n	4071c0 <_svfprintf_r+0x31c>
  40797e:	f8cd b01c 	str.w	fp, [sp, #28]
  407982:	2400      	movs	r4, #0
  407984:	2500      	movs	r5, #0
  407986:	4649      	mov	r1, r9
  407988:	e000      	b.n	40798c <_svfprintf_r+0xae8>
  40798a:	4631      	mov	r1, r6
  40798c:	08e2      	lsrs	r2, r4, #3
  40798e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  407992:	08e8      	lsrs	r0, r5, #3
  407994:	f004 0307 	and.w	r3, r4, #7
  407998:	4605      	mov	r5, r0
  40799a:	4614      	mov	r4, r2
  40799c:	3330      	adds	r3, #48	; 0x30
  40799e:	ea54 0205 	orrs.w	r2, r4, r5
  4079a2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4079a6:	f101 36ff 	add.w	r6, r1, #4294967295
  4079aa:	d1ee      	bne.n	40798a <_svfprintf_r+0xae6>
  4079ac:	9a07      	ldr	r2, [sp, #28]
  4079ae:	07d2      	lsls	r2, r2, #31
  4079b0:	f57f adf3 	bpl.w	40759a <_svfprintf_r+0x6f6>
  4079b4:	2b30      	cmp	r3, #48	; 0x30
  4079b6:	f43f adf0 	beq.w	40759a <_svfprintf_r+0x6f6>
  4079ba:	3902      	subs	r1, #2
  4079bc:	2330      	movs	r3, #48	; 0x30
  4079be:	f806 3c01 	strb.w	r3, [r6, #-1]
  4079c2:	eba9 0301 	sub.w	r3, r9, r1
  4079c6:	930e      	str	r3, [sp, #56]	; 0x38
  4079c8:	460e      	mov	r6, r1
  4079ca:	f7ff bb7b 	b.w	4070c4 <_svfprintf_r+0x220>
  4079ce:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4079d0:	2900      	cmp	r1, #0
  4079d2:	f340 822e 	ble.w	407e32 <_svfprintf_r+0xf8e>
  4079d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4079d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4079da:	4293      	cmp	r3, r2
  4079dc:	bfa8      	it	ge
  4079de:	4613      	movge	r3, r2
  4079e0:	2b00      	cmp	r3, #0
  4079e2:	461f      	mov	r7, r3
  4079e4:	dd0d      	ble.n	407a02 <_svfprintf_r+0xb5e>
  4079e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079e8:	f8c8 6000 	str.w	r6, [r8]
  4079ec:	3301      	adds	r3, #1
  4079ee:	443c      	add	r4, r7
  4079f0:	2b07      	cmp	r3, #7
  4079f2:	9427      	str	r4, [sp, #156]	; 0x9c
  4079f4:	f8c8 7004 	str.w	r7, [r8, #4]
  4079f8:	9326      	str	r3, [sp, #152]	; 0x98
  4079fa:	f300 831f 	bgt.w	40803c <_svfprintf_r+0x1198>
  4079fe:	f108 0808 	add.w	r8, r8, #8
  407a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407a04:	2f00      	cmp	r7, #0
  407a06:	bfa8      	it	ge
  407a08:	1bdb      	subge	r3, r3, r7
  407a0a:	2b00      	cmp	r3, #0
  407a0c:	461f      	mov	r7, r3
  407a0e:	f340 80d6 	ble.w	407bbe <_svfprintf_r+0xd1a>
  407a12:	2f10      	cmp	r7, #16
  407a14:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a16:	4d31      	ldr	r5, [pc, #196]	; (407adc <_svfprintf_r+0xc38>)
  407a18:	f340 81ed 	ble.w	407df6 <_svfprintf_r+0xf52>
  407a1c:	4642      	mov	r2, r8
  407a1e:	4621      	mov	r1, r4
  407a20:	46b0      	mov	r8, r6
  407a22:	f04f 0b10 	mov.w	fp, #16
  407a26:	462e      	mov	r6, r5
  407a28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407a2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407a2c:	e004      	b.n	407a38 <_svfprintf_r+0xb94>
  407a2e:	3208      	adds	r2, #8
  407a30:	3f10      	subs	r7, #16
  407a32:	2f10      	cmp	r7, #16
  407a34:	f340 81db 	ble.w	407dee <_svfprintf_r+0xf4a>
  407a38:	3301      	adds	r3, #1
  407a3a:	3110      	adds	r1, #16
  407a3c:	2b07      	cmp	r3, #7
  407a3e:	9127      	str	r1, [sp, #156]	; 0x9c
  407a40:	9326      	str	r3, [sp, #152]	; 0x98
  407a42:	e882 0840 	stmia.w	r2, {r6, fp}
  407a46:	ddf2      	ble.n	407a2e <_svfprintf_r+0xb8a>
  407a48:	aa25      	add	r2, sp, #148	; 0x94
  407a4a:	4629      	mov	r1, r5
  407a4c:	4620      	mov	r0, r4
  407a4e:	f004 f9c1 	bl	40bdd4 <__ssprint_r>
  407a52:	2800      	cmp	r0, #0
  407a54:	f47f aaf8 	bne.w	407048 <_svfprintf_r+0x1a4>
  407a58:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a5c:	464a      	mov	r2, r9
  407a5e:	e7e7      	b.n	407a30 <_svfprintf_r+0xb8c>
  407a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a62:	930e      	str	r3, [sp, #56]	; 0x38
  407a64:	464e      	mov	r6, r9
  407a66:	f7ff bb2d 	b.w	4070c4 <_svfprintf_r+0x220>
  407a6a:	2d00      	cmp	r5, #0
  407a6c:	bf08      	it	eq
  407a6e:	2c0a      	cmpeq	r4, #10
  407a70:	f0c0 808f 	bcc.w	407b92 <_svfprintf_r+0xcee>
  407a74:	464e      	mov	r6, r9
  407a76:	4620      	mov	r0, r4
  407a78:	4629      	mov	r1, r5
  407a7a:	220a      	movs	r2, #10
  407a7c:	2300      	movs	r3, #0
  407a7e:	f005 f8b5 	bl	40cbec <__aeabi_uldivmod>
  407a82:	3230      	adds	r2, #48	; 0x30
  407a84:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407a88:	4620      	mov	r0, r4
  407a8a:	4629      	mov	r1, r5
  407a8c:	2300      	movs	r3, #0
  407a8e:	220a      	movs	r2, #10
  407a90:	f005 f8ac 	bl	40cbec <__aeabi_uldivmod>
  407a94:	4604      	mov	r4, r0
  407a96:	460d      	mov	r5, r1
  407a98:	ea54 0305 	orrs.w	r3, r4, r5
  407a9c:	d1eb      	bne.n	407a76 <_svfprintf_r+0xbd2>
  407a9e:	eba9 0306 	sub.w	r3, r9, r6
  407aa2:	930e      	str	r3, [sp, #56]	; 0x38
  407aa4:	f7ff bb0e 	b.w	4070c4 <_svfprintf_r+0x220>
  407aa8:	aa25      	add	r2, sp, #148	; 0x94
  407aaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407aac:	980c      	ldr	r0, [sp, #48]	; 0x30
  407aae:	f004 f991 	bl	40bdd4 <__ssprint_r>
  407ab2:	2800      	cmp	r0, #0
  407ab4:	f47f aac8 	bne.w	407048 <_svfprintf_r+0x1a4>
  407ab8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407abc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407abe:	46c8      	mov	r8, r9
  407ac0:	f7ff bb5e 	b.w	407180 <_svfprintf_r+0x2dc>
  407ac4:	1e5e      	subs	r6, r3, #1
  407ac6:	2e00      	cmp	r6, #0
  407ac8:	f77f af0a 	ble.w	4078e0 <_svfprintf_r+0xa3c>
  407acc:	2e10      	cmp	r6, #16
  407ace:	4d03      	ldr	r5, [pc, #12]	; (407adc <_svfprintf_r+0xc38>)
  407ad0:	dd22      	ble.n	407b18 <_svfprintf_r+0xc74>
  407ad2:	4622      	mov	r2, r4
  407ad4:	f04f 0b10 	mov.w	fp, #16
  407ad8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407ada:	e006      	b.n	407aea <_svfprintf_r+0xc46>
  407adc:	0040dfc4 	.word	0x0040dfc4
  407ae0:	3e10      	subs	r6, #16
  407ae2:	2e10      	cmp	r6, #16
  407ae4:	f108 0808 	add.w	r8, r8, #8
  407ae8:	dd15      	ble.n	407b16 <_svfprintf_r+0xc72>
  407aea:	3701      	adds	r7, #1
  407aec:	3210      	adds	r2, #16
  407aee:	2f07      	cmp	r7, #7
  407af0:	9227      	str	r2, [sp, #156]	; 0x9c
  407af2:	9726      	str	r7, [sp, #152]	; 0x98
  407af4:	e888 0820 	stmia.w	r8, {r5, fp}
  407af8:	ddf2      	ble.n	407ae0 <_svfprintf_r+0xc3c>
  407afa:	aa25      	add	r2, sp, #148	; 0x94
  407afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407afe:	4620      	mov	r0, r4
  407b00:	f004 f968 	bl	40bdd4 <__ssprint_r>
  407b04:	2800      	cmp	r0, #0
  407b06:	f47f aa9f 	bne.w	407048 <_svfprintf_r+0x1a4>
  407b0a:	3e10      	subs	r6, #16
  407b0c:	2e10      	cmp	r6, #16
  407b0e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407b10:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407b12:	46c8      	mov	r8, r9
  407b14:	dce9      	bgt.n	407aea <_svfprintf_r+0xc46>
  407b16:	4614      	mov	r4, r2
  407b18:	3701      	adds	r7, #1
  407b1a:	4434      	add	r4, r6
  407b1c:	2f07      	cmp	r7, #7
  407b1e:	9427      	str	r4, [sp, #156]	; 0x9c
  407b20:	9726      	str	r7, [sp, #152]	; 0x98
  407b22:	e888 0060 	stmia.w	r8, {r5, r6}
  407b26:	f77f aed9 	ble.w	4078dc <_svfprintf_r+0xa38>
  407b2a:	aa25      	add	r2, sp, #148	; 0x94
  407b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b30:	f004 f950 	bl	40bdd4 <__ssprint_r>
  407b34:	2800      	cmp	r0, #0
  407b36:	f47f aa87 	bne.w	407048 <_svfprintf_r+0x1a4>
  407b3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407b3c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407b3e:	46c8      	mov	r8, r9
  407b40:	e6ce      	b.n	4078e0 <_svfprintf_r+0xa3c>
  407b42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b44:	6814      	ldr	r4, [r2, #0]
  407b46:	4613      	mov	r3, r2
  407b48:	3304      	adds	r3, #4
  407b4a:	17e5      	asrs	r5, r4, #31
  407b4c:	930f      	str	r3, [sp, #60]	; 0x3c
  407b4e:	4622      	mov	r2, r4
  407b50:	462b      	mov	r3, r5
  407b52:	e4fa      	b.n	40754a <_svfprintf_r+0x6a6>
  407b54:	3204      	adds	r2, #4
  407b56:	681c      	ldr	r4, [r3, #0]
  407b58:	920f      	str	r2, [sp, #60]	; 0x3c
  407b5a:	2301      	movs	r3, #1
  407b5c:	2500      	movs	r5, #0
  407b5e:	f7ff ba94 	b.w	40708a <_svfprintf_r+0x1e6>
  407b62:	681c      	ldr	r4, [r3, #0]
  407b64:	3304      	adds	r3, #4
  407b66:	930f      	str	r3, [sp, #60]	; 0x3c
  407b68:	2500      	movs	r5, #0
  407b6a:	e421      	b.n	4073b0 <_svfprintf_r+0x50c>
  407b6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407b6e:	460a      	mov	r2, r1
  407b70:	3204      	adds	r2, #4
  407b72:	680c      	ldr	r4, [r1, #0]
  407b74:	920f      	str	r2, [sp, #60]	; 0x3c
  407b76:	2500      	movs	r5, #0
  407b78:	f7ff ba87 	b.w	40708a <_svfprintf_r+0x1e6>
  407b7c:	4614      	mov	r4, r2
  407b7e:	3301      	adds	r3, #1
  407b80:	4434      	add	r4, r6
  407b82:	2b07      	cmp	r3, #7
  407b84:	9427      	str	r4, [sp, #156]	; 0x9c
  407b86:	9326      	str	r3, [sp, #152]	; 0x98
  407b88:	e888 0060 	stmia.w	r8, {r5, r6}
  407b8c:	f77f ab68 	ble.w	407260 <_svfprintf_r+0x3bc>
  407b90:	e6b3      	b.n	4078fa <_svfprintf_r+0xa56>
  407b92:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407b96:	f8cd b01c 	str.w	fp, [sp, #28]
  407b9a:	ae42      	add	r6, sp, #264	; 0x108
  407b9c:	3430      	adds	r4, #48	; 0x30
  407b9e:	2301      	movs	r3, #1
  407ba0:	f806 4d41 	strb.w	r4, [r6, #-65]!
  407ba4:	930e      	str	r3, [sp, #56]	; 0x38
  407ba6:	f7ff ba8d 	b.w	4070c4 <_svfprintf_r+0x220>
  407baa:	aa25      	add	r2, sp, #148	; 0x94
  407bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bae:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bb0:	f004 f910 	bl	40bdd4 <__ssprint_r>
  407bb4:	2800      	cmp	r0, #0
  407bb6:	f47f aa47 	bne.w	407048 <_svfprintf_r+0x1a4>
  407bba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407bbc:	46c8      	mov	r8, r9
  407bbe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407bc2:	429a      	cmp	r2, r3
  407bc4:	db44      	blt.n	407c50 <_svfprintf_r+0xdac>
  407bc6:	9b07      	ldr	r3, [sp, #28]
  407bc8:	07d9      	lsls	r1, r3, #31
  407bca:	d441      	bmi.n	407c50 <_svfprintf_r+0xdac>
  407bcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407bce:	9812      	ldr	r0, [sp, #72]	; 0x48
  407bd0:	1a9a      	subs	r2, r3, r2
  407bd2:	1a1d      	subs	r5, r3, r0
  407bd4:	4295      	cmp	r5, r2
  407bd6:	bfa8      	it	ge
  407bd8:	4615      	movge	r5, r2
  407bda:	2d00      	cmp	r5, #0
  407bdc:	dd0e      	ble.n	407bfc <_svfprintf_r+0xd58>
  407bde:	9926      	ldr	r1, [sp, #152]	; 0x98
  407be0:	f8c8 5004 	str.w	r5, [r8, #4]
  407be4:	3101      	adds	r1, #1
  407be6:	4406      	add	r6, r0
  407be8:	442c      	add	r4, r5
  407bea:	2907      	cmp	r1, #7
  407bec:	f8c8 6000 	str.w	r6, [r8]
  407bf0:	9427      	str	r4, [sp, #156]	; 0x9c
  407bf2:	9126      	str	r1, [sp, #152]	; 0x98
  407bf4:	f300 823b 	bgt.w	40806e <_svfprintf_r+0x11ca>
  407bf8:	f108 0808 	add.w	r8, r8, #8
  407bfc:	2d00      	cmp	r5, #0
  407bfe:	bfac      	ite	ge
  407c00:	1b56      	subge	r6, r2, r5
  407c02:	4616      	movlt	r6, r2
  407c04:	2e00      	cmp	r6, #0
  407c06:	f77f ab2d 	ble.w	407264 <_svfprintf_r+0x3c0>
  407c0a:	2e10      	cmp	r6, #16
  407c0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407c0e:	4db0      	ldr	r5, [pc, #704]	; (407ed0 <_svfprintf_r+0x102c>)
  407c10:	ddb5      	ble.n	407b7e <_svfprintf_r+0xcda>
  407c12:	4622      	mov	r2, r4
  407c14:	2710      	movs	r7, #16
  407c16:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407c1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407c1c:	e004      	b.n	407c28 <_svfprintf_r+0xd84>
  407c1e:	f108 0808 	add.w	r8, r8, #8
  407c22:	3e10      	subs	r6, #16
  407c24:	2e10      	cmp	r6, #16
  407c26:	dda9      	ble.n	407b7c <_svfprintf_r+0xcd8>
  407c28:	3301      	adds	r3, #1
  407c2a:	3210      	adds	r2, #16
  407c2c:	2b07      	cmp	r3, #7
  407c2e:	9227      	str	r2, [sp, #156]	; 0x9c
  407c30:	9326      	str	r3, [sp, #152]	; 0x98
  407c32:	e888 00a0 	stmia.w	r8, {r5, r7}
  407c36:	ddf2      	ble.n	407c1e <_svfprintf_r+0xd7a>
  407c38:	aa25      	add	r2, sp, #148	; 0x94
  407c3a:	4621      	mov	r1, r4
  407c3c:	4658      	mov	r0, fp
  407c3e:	f004 f8c9 	bl	40bdd4 <__ssprint_r>
  407c42:	2800      	cmp	r0, #0
  407c44:	f47f aa00 	bne.w	407048 <_svfprintf_r+0x1a4>
  407c48:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407c4c:	46c8      	mov	r8, r9
  407c4e:	e7e8      	b.n	407c22 <_svfprintf_r+0xd7e>
  407c50:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407c52:	9819      	ldr	r0, [sp, #100]	; 0x64
  407c54:	991a      	ldr	r1, [sp, #104]	; 0x68
  407c56:	f8c8 1000 	str.w	r1, [r8]
  407c5a:	3301      	adds	r3, #1
  407c5c:	4404      	add	r4, r0
  407c5e:	2b07      	cmp	r3, #7
  407c60:	9427      	str	r4, [sp, #156]	; 0x9c
  407c62:	f8c8 0004 	str.w	r0, [r8, #4]
  407c66:	9326      	str	r3, [sp, #152]	; 0x98
  407c68:	f300 81f5 	bgt.w	408056 <_svfprintf_r+0x11b2>
  407c6c:	f108 0808 	add.w	r8, r8, #8
  407c70:	e7ac      	b.n	407bcc <_svfprintf_r+0xd28>
  407c72:	9b07      	ldr	r3, [sp, #28]
  407c74:	07da      	lsls	r2, r3, #31
  407c76:	f53f adfe 	bmi.w	407876 <_svfprintf_r+0x9d2>
  407c7a:	3701      	adds	r7, #1
  407c7c:	3401      	adds	r4, #1
  407c7e:	2301      	movs	r3, #1
  407c80:	2f07      	cmp	r7, #7
  407c82:	9427      	str	r4, [sp, #156]	; 0x9c
  407c84:	9726      	str	r7, [sp, #152]	; 0x98
  407c86:	f8c8 6000 	str.w	r6, [r8]
  407c8a:	f8c8 3004 	str.w	r3, [r8, #4]
  407c8e:	f77f ae25 	ble.w	4078dc <_svfprintf_r+0xa38>
  407c92:	e74a      	b.n	407b2a <_svfprintf_r+0xc86>
  407c94:	aa25      	add	r2, sp, #148	; 0x94
  407c96:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c98:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c9a:	f004 f89b 	bl	40bdd4 <__ssprint_r>
  407c9e:	2800      	cmp	r0, #0
  407ca0:	f47f a9d2 	bne.w	407048 <_svfprintf_r+0x1a4>
  407ca4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407ca6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407ca8:	46c8      	mov	r8, r9
  407caa:	e5f2      	b.n	407892 <_svfprintf_r+0x9ee>
  407cac:	aa25      	add	r2, sp, #148	; 0x94
  407cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
  407cb2:	f004 f88f 	bl	40bdd4 <__ssprint_r>
  407cb6:	2800      	cmp	r0, #0
  407cb8:	f47f a9c6 	bne.w	407048 <_svfprintf_r+0x1a4>
  407cbc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407cbe:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407cc0:	46c8      	mov	r8, r9
  407cc2:	e5f5      	b.n	4078b0 <_svfprintf_r+0xa0c>
  407cc4:	464e      	mov	r6, r9
  407cc6:	f7ff b9fd 	b.w	4070c4 <_svfprintf_r+0x220>
  407cca:	aa25      	add	r2, sp, #148	; 0x94
  407ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407cce:	980c      	ldr	r0, [sp, #48]	; 0x30
  407cd0:	f004 f880 	bl	40bdd4 <__ssprint_r>
  407cd4:	2800      	cmp	r0, #0
  407cd6:	f47f a9b7 	bne.w	407048 <_svfprintf_r+0x1a4>
  407cda:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407cdc:	46c8      	mov	r8, r9
  407cde:	f7ff ba72 	b.w	4071c6 <_svfprintf_r+0x322>
  407ce2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  407ce4:	4622      	mov	r2, r4
  407ce6:	4620      	mov	r0, r4
  407ce8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  407cea:	4623      	mov	r3, r4
  407cec:	4621      	mov	r1, r4
  407cee:	f004 ff3f 	bl	40cb70 <__aeabi_dcmpun>
  407cf2:	2800      	cmp	r0, #0
  407cf4:	f040 8286 	bne.w	408204 <_svfprintf_r+0x1360>
  407cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407cfa:	3301      	adds	r3, #1
  407cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407cfe:	f023 0320 	bic.w	r3, r3, #32
  407d02:	930e      	str	r3, [sp, #56]	; 0x38
  407d04:	f000 81e2 	beq.w	4080cc <_svfprintf_r+0x1228>
  407d08:	2b47      	cmp	r3, #71	; 0x47
  407d0a:	f000 811e 	beq.w	407f4a <_svfprintf_r+0x10a6>
  407d0e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  407d12:	9307      	str	r3, [sp, #28]
  407d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407d16:	1e1f      	subs	r7, r3, #0
  407d18:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407d1a:	9308      	str	r3, [sp, #32]
  407d1c:	bfbb      	ittet	lt
  407d1e:	463b      	movlt	r3, r7
  407d20:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  407d24:	2300      	movge	r3, #0
  407d26:	232d      	movlt	r3, #45	; 0x2d
  407d28:	9310      	str	r3, [sp, #64]	; 0x40
  407d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407d2c:	2b66      	cmp	r3, #102	; 0x66
  407d2e:	f000 81bb 	beq.w	4080a8 <_svfprintf_r+0x1204>
  407d32:	2b46      	cmp	r3, #70	; 0x46
  407d34:	f000 80df 	beq.w	407ef6 <_svfprintf_r+0x1052>
  407d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d3a:	9a08      	ldr	r2, [sp, #32]
  407d3c:	2b45      	cmp	r3, #69	; 0x45
  407d3e:	bf0c      	ite	eq
  407d40:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  407d42:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  407d44:	a823      	add	r0, sp, #140	; 0x8c
  407d46:	a920      	add	r1, sp, #128	; 0x80
  407d48:	bf08      	it	eq
  407d4a:	1c5d      	addeq	r5, r3, #1
  407d4c:	9004      	str	r0, [sp, #16]
  407d4e:	9103      	str	r1, [sp, #12]
  407d50:	a81f      	add	r0, sp, #124	; 0x7c
  407d52:	2102      	movs	r1, #2
  407d54:	463b      	mov	r3, r7
  407d56:	9002      	str	r0, [sp, #8]
  407d58:	9501      	str	r5, [sp, #4]
  407d5a:	9100      	str	r1, [sp, #0]
  407d5c:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d5e:	f001 faa3 	bl	4092a8 <_dtoa_r>
  407d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407d64:	2b67      	cmp	r3, #103	; 0x67
  407d66:	4606      	mov	r6, r0
  407d68:	f040 81e0 	bne.w	40812c <_svfprintf_r+0x1288>
  407d6c:	f01b 0f01 	tst.w	fp, #1
  407d70:	f000 8246 	beq.w	408200 <_svfprintf_r+0x135c>
  407d74:	1974      	adds	r4, r6, r5
  407d76:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407d78:	9808      	ldr	r0, [sp, #32]
  407d7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407d7c:	4639      	mov	r1, r7
  407d7e:	f004 fec5 	bl	40cb0c <__aeabi_dcmpeq>
  407d82:	2800      	cmp	r0, #0
  407d84:	f040 8165 	bne.w	408052 <_svfprintf_r+0x11ae>
  407d88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407d8a:	42a3      	cmp	r3, r4
  407d8c:	d206      	bcs.n	407d9c <_svfprintf_r+0xef8>
  407d8e:	2130      	movs	r1, #48	; 0x30
  407d90:	1c5a      	adds	r2, r3, #1
  407d92:	9223      	str	r2, [sp, #140]	; 0x8c
  407d94:	7019      	strb	r1, [r3, #0]
  407d96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407d98:	429c      	cmp	r4, r3
  407d9a:	d8f9      	bhi.n	407d90 <_svfprintf_r+0xeec>
  407d9c:	1b9b      	subs	r3, r3, r6
  407d9e:	9313      	str	r3, [sp, #76]	; 0x4c
  407da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407da2:	2b47      	cmp	r3, #71	; 0x47
  407da4:	f000 80e9 	beq.w	407f7a <_svfprintf_r+0x10d6>
  407da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407daa:	2b65      	cmp	r3, #101	; 0x65
  407dac:	f340 81cd 	ble.w	40814a <_svfprintf_r+0x12a6>
  407db0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407db2:	2b66      	cmp	r3, #102	; 0x66
  407db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407db6:	9312      	str	r3, [sp, #72]	; 0x48
  407db8:	f000 819e 	beq.w	4080f8 <_svfprintf_r+0x1254>
  407dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407dbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407dc0:	4619      	mov	r1, r3
  407dc2:	4291      	cmp	r1, r2
  407dc4:	f300 818a 	bgt.w	4080dc <_svfprintf_r+0x1238>
  407dc8:	f01b 0f01 	tst.w	fp, #1
  407dcc:	f040 8213 	bne.w	4081f6 <_svfprintf_r+0x1352>
  407dd0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407dd4:	9308      	str	r3, [sp, #32]
  407dd6:	2367      	movs	r3, #103	; 0x67
  407dd8:	920e      	str	r2, [sp, #56]	; 0x38
  407dda:	9311      	str	r3, [sp, #68]	; 0x44
  407ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407dde:	2b00      	cmp	r3, #0
  407de0:	f040 80c4 	bne.w	407f6c <_svfprintf_r+0x10c8>
  407de4:	930a      	str	r3, [sp, #40]	; 0x28
  407de6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407dea:	f7ff b973 	b.w	4070d4 <_svfprintf_r+0x230>
  407dee:	4635      	mov	r5, r6
  407df0:	460c      	mov	r4, r1
  407df2:	4646      	mov	r6, r8
  407df4:	4690      	mov	r8, r2
  407df6:	3301      	adds	r3, #1
  407df8:	443c      	add	r4, r7
  407dfa:	2b07      	cmp	r3, #7
  407dfc:	9427      	str	r4, [sp, #156]	; 0x9c
  407dfe:	9326      	str	r3, [sp, #152]	; 0x98
  407e00:	e888 00a0 	stmia.w	r8, {r5, r7}
  407e04:	f73f aed1 	bgt.w	407baa <_svfprintf_r+0xd06>
  407e08:	f108 0808 	add.w	r8, r8, #8
  407e0c:	e6d7      	b.n	407bbe <_svfprintf_r+0xd1a>
  407e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407e10:	6813      	ldr	r3, [r2, #0]
  407e12:	3204      	adds	r2, #4
  407e14:	920f      	str	r2, [sp, #60]	; 0x3c
  407e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407e18:	601a      	str	r2, [r3, #0]
  407e1a:	f7ff b86a 	b.w	406ef2 <_svfprintf_r+0x4e>
  407e1e:	aa25      	add	r2, sp, #148	; 0x94
  407e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e22:	980c      	ldr	r0, [sp, #48]	; 0x30
  407e24:	f003 ffd6 	bl	40bdd4 <__ssprint_r>
  407e28:	2800      	cmp	r0, #0
  407e2a:	f47f a90d 	bne.w	407048 <_svfprintf_r+0x1a4>
  407e2e:	46c8      	mov	r8, r9
  407e30:	e48d      	b.n	40774e <_svfprintf_r+0x8aa>
  407e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407e34:	4a27      	ldr	r2, [pc, #156]	; (407ed4 <_svfprintf_r+0x1030>)
  407e36:	f8c8 2000 	str.w	r2, [r8]
  407e3a:	3301      	adds	r3, #1
  407e3c:	3401      	adds	r4, #1
  407e3e:	2201      	movs	r2, #1
  407e40:	2b07      	cmp	r3, #7
  407e42:	9427      	str	r4, [sp, #156]	; 0x9c
  407e44:	9326      	str	r3, [sp, #152]	; 0x98
  407e46:	f8c8 2004 	str.w	r2, [r8, #4]
  407e4a:	dc72      	bgt.n	407f32 <_svfprintf_r+0x108e>
  407e4c:	f108 0808 	add.w	r8, r8, #8
  407e50:	b929      	cbnz	r1, 407e5e <_svfprintf_r+0xfba>
  407e52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407e54:	b91b      	cbnz	r3, 407e5e <_svfprintf_r+0xfba>
  407e56:	9b07      	ldr	r3, [sp, #28]
  407e58:	07d8      	lsls	r0, r3, #31
  407e5a:	f57f aa03 	bpl.w	407264 <_svfprintf_r+0x3c0>
  407e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407e60:	9819      	ldr	r0, [sp, #100]	; 0x64
  407e62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407e64:	f8c8 2000 	str.w	r2, [r8]
  407e68:	3301      	adds	r3, #1
  407e6a:	4602      	mov	r2, r0
  407e6c:	4422      	add	r2, r4
  407e6e:	2b07      	cmp	r3, #7
  407e70:	9227      	str	r2, [sp, #156]	; 0x9c
  407e72:	f8c8 0004 	str.w	r0, [r8, #4]
  407e76:	9326      	str	r3, [sp, #152]	; 0x98
  407e78:	f300 818d 	bgt.w	408196 <_svfprintf_r+0x12f2>
  407e7c:	f108 0808 	add.w	r8, r8, #8
  407e80:	2900      	cmp	r1, #0
  407e82:	f2c0 8165 	blt.w	408150 <_svfprintf_r+0x12ac>
  407e86:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407e88:	f8c8 6000 	str.w	r6, [r8]
  407e8c:	3301      	adds	r3, #1
  407e8e:	188c      	adds	r4, r1, r2
  407e90:	2b07      	cmp	r3, #7
  407e92:	9427      	str	r4, [sp, #156]	; 0x9c
  407e94:	9326      	str	r3, [sp, #152]	; 0x98
  407e96:	f8c8 1004 	str.w	r1, [r8, #4]
  407e9a:	f77f a9e1 	ble.w	407260 <_svfprintf_r+0x3bc>
  407e9e:	e52c      	b.n	4078fa <_svfprintf_r+0xa56>
  407ea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
  407ea4:	6813      	ldr	r3, [r2, #0]
  407ea6:	17cd      	asrs	r5, r1, #31
  407ea8:	4608      	mov	r0, r1
  407eaa:	3204      	adds	r2, #4
  407eac:	4629      	mov	r1, r5
  407eae:	920f      	str	r2, [sp, #60]	; 0x3c
  407eb0:	e9c3 0100 	strd	r0, r1, [r3]
  407eb4:	f7ff b81d 	b.w	406ef2 <_svfprintf_r+0x4e>
  407eb8:	aa25      	add	r2, sp, #148	; 0x94
  407eba:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407ebc:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ebe:	f003 ff89 	bl	40bdd4 <__ssprint_r>
  407ec2:	2800      	cmp	r0, #0
  407ec4:	f47f a8c0 	bne.w	407048 <_svfprintf_r+0x1a4>
  407ec8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407eca:	46c8      	mov	r8, r9
  407ecc:	e458      	b.n	407780 <_svfprintf_r+0x8dc>
  407ece:	bf00      	nop
  407ed0:	0040dfc4 	.word	0x0040dfc4
  407ed4:	0040dd94 	.word	0x0040dd94
  407ed8:	2140      	movs	r1, #64	; 0x40
  407eda:	980c      	ldr	r0, [sp, #48]	; 0x30
  407edc:	f002 fe58 	bl	40ab90 <_malloc_r>
  407ee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407ee2:	6010      	str	r0, [r2, #0]
  407ee4:	6110      	str	r0, [r2, #16]
  407ee6:	2800      	cmp	r0, #0
  407ee8:	f000 81f2 	beq.w	4082d0 <_svfprintf_r+0x142c>
  407eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407eee:	2340      	movs	r3, #64	; 0x40
  407ef0:	6153      	str	r3, [r2, #20]
  407ef2:	f7fe bfee 	b.w	406ed2 <_svfprintf_r+0x2e>
  407ef6:	a823      	add	r0, sp, #140	; 0x8c
  407ef8:	a920      	add	r1, sp, #128	; 0x80
  407efa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407efc:	9004      	str	r0, [sp, #16]
  407efe:	9103      	str	r1, [sp, #12]
  407f00:	a81f      	add	r0, sp, #124	; 0x7c
  407f02:	2103      	movs	r1, #3
  407f04:	9002      	str	r0, [sp, #8]
  407f06:	9a08      	ldr	r2, [sp, #32]
  407f08:	9401      	str	r4, [sp, #4]
  407f0a:	463b      	mov	r3, r7
  407f0c:	9100      	str	r1, [sp, #0]
  407f0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407f10:	f001 f9ca 	bl	4092a8 <_dtoa_r>
  407f14:	4625      	mov	r5, r4
  407f16:	4606      	mov	r6, r0
  407f18:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407f1a:	2b46      	cmp	r3, #70	; 0x46
  407f1c:	eb06 0405 	add.w	r4, r6, r5
  407f20:	f47f af29 	bne.w	407d76 <_svfprintf_r+0xed2>
  407f24:	7833      	ldrb	r3, [r6, #0]
  407f26:	2b30      	cmp	r3, #48	; 0x30
  407f28:	f000 8178 	beq.w	40821c <_svfprintf_r+0x1378>
  407f2c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407f2e:	442c      	add	r4, r5
  407f30:	e721      	b.n	407d76 <_svfprintf_r+0xed2>
  407f32:	aa25      	add	r2, sp, #148	; 0x94
  407f34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407f36:	980c      	ldr	r0, [sp, #48]	; 0x30
  407f38:	f003 ff4c 	bl	40bdd4 <__ssprint_r>
  407f3c:	2800      	cmp	r0, #0
  407f3e:	f47f a883 	bne.w	407048 <_svfprintf_r+0x1a4>
  407f42:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407f44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407f46:	46c8      	mov	r8, r9
  407f48:	e782      	b.n	407e50 <_svfprintf_r+0xfac>
  407f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f4c:	2b00      	cmp	r3, #0
  407f4e:	bf08      	it	eq
  407f50:	2301      	moveq	r3, #1
  407f52:	930a      	str	r3, [sp, #40]	; 0x28
  407f54:	e6db      	b.n	407d0e <_svfprintf_r+0xe6a>
  407f56:	4630      	mov	r0, r6
  407f58:	940a      	str	r4, [sp, #40]	; 0x28
  407f5a:	f7fe fcd1 	bl	406900 <strlen>
  407f5e:	950f      	str	r5, [sp, #60]	; 0x3c
  407f60:	900e      	str	r0, [sp, #56]	; 0x38
  407f62:	f8cd b01c 	str.w	fp, [sp, #28]
  407f66:	4603      	mov	r3, r0
  407f68:	f7ff b9f9 	b.w	40735e <_svfprintf_r+0x4ba>
  407f6c:	272d      	movs	r7, #45	; 0x2d
  407f6e:	2300      	movs	r3, #0
  407f70:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407f74:	930a      	str	r3, [sp, #40]	; 0x28
  407f76:	f7ff b8ae 	b.w	4070d6 <_svfprintf_r+0x232>
  407f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407f7c:	9312      	str	r3, [sp, #72]	; 0x48
  407f7e:	461a      	mov	r2, r3
  407f80:	3303      	adds	r3, #3
  407f82:	db04      	blt.n	407f8e <_svfprintf_r+0x10ea>
  407f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f86:	4619      	mov	r1, r3
  407f88:	4291      	cmp	r1, r2
  407f8a:	f6bf af17 	bge.w	407dbc <_svfprintf_r+0xf18>
  407f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407f90:	3b02      	subs	r3, #2
  407f92:	9311      	str	r3, [sp, #68]	; 0x44
  407f94:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407f98:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f9e:	3b01      	subs	r3, #1
  407fa0:	2b00      	cmp	r3, #0
  407fa2:	931f      	str	r3, [sp, #124]	; 0x7c
  407fa4:	bfbd      	ittte	lt
  407fa6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407fa8:	f1c3 0301 	rsblt	r3, r3, #1
  407fac:	222d      	movlt	r2, #45	; 0x2d
  407fae:	222b      	movge	r2, #43	; 0x2b
  407fb0:	2b09      	cmp	r3, #9
  407fb2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  407fb6:	f340 8116 	ble.w	4081e6 <_svfprintf_r+0x1342>
  407fba:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407fbe:	4620      	mov	r0, r4
  407fc0:	4dab      	ldr	r5, [pc, #684]	; (408270 <_svfprintf_r+0x13cc>)
  407fc2:	e000      	b.n	407fc6 <_svfprintf_r+0x1122>
  407fc4:	4610      	mov	r0, r2
  407fc6:	fb85 1203 	smull	r1, r2, r5, r3
  407fca:	17d9      	asrs	r1, r3, #31
  407fcc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407fd0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407fd4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407fd8:	3230      	adds	r2, #48	; 0x30
  407fda:	2909      	cmp	r1, #9
  407fdc:	f800 2c01 	strb.w	r2, [r0, #-1]
  407fe0:	460b      	mov	r3, r1
  407fe2:	f100 32ff 	add.w	r2, r0, #4294967295
  407fe6:	dced      	bgt.n	407fc4 <_svfprintf_r+0x1120>
  407fe8:	3330      	adds	r3, #48	; 0x30
  407fea:	3802      	subs	r0, #2
  407fec:	b2d9      	uxtb	r1, r3
  407fee:	4284      	cmp	r4, r0
  407ff0:	f802 1c01 	strb.w	r1, [r2, #-1]
  407ff4:	f240 8165 	bls.w	4082c2 <_svfprintf_r+0x141e>
  407ff8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407ffc:	4613      	mov	r3, r2
  407ffe:	e001      	b.n	408004 <_svfprintf_r+0x1160>
  408000:	f813 1b01 	ldrb.w	r1, [r3], #1
  408004:	f800 1b01 	strb.w	r1, [r0], #1
  408008:	42a3      	cmp	r3, r4
  40800a:	d1f9      	bne.n	408000 <_svfprintf_r+0x115c>
  40800c:	3301      	adds	r3, #1
  40800e:	1a9b      	subs	r3, r3, r2
  408010:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  408014:	4413      	add	r3, r2
  408016:	aa21      	add	r2, sp, #132	; 0x84
  408018:	1a9b      	subs	r3, r3, r2
  40801a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40801c:	931b      	str	r3, [sp, #108]	; 0x6c
  40801e:	2a01      	cmp	r2, #1
  408020:	4413      	add	r3, r2
  408022:	930e      	str	r3, [sp, #56]	; 0x38
  408024:	f340 8119 	ble.w	40825a <_svfprintf_r+0x13b6>
  408028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40802a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40802c:	4413      	add	r3, r2
  40802e:	930e      	str	r3, [sp, #56]	; 0x38
  408030:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  408034:	9308      	str	r3, [sp, #32]
  408036:	2300      	movs	r3, #0
  408038:	9312      	str	r3, [sp, #72]	; 0x48
  40803a:	e6cf      	b.n	407ddc <_svfprintf_r+0xf38>
  40803c:	aa25      	add	r2, sp, #148	; 0x94
  40803e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408040:	980c      	ldr	r0, [sp, #48]	; 0x30
  408042:	f003 fec7 	bl	40bdd4 <__ssprint_r>
  408046:	2800      	cmp	r0, #0
  408048:	f47e affe 	bne.w	407048 <_svfprintf_r+0x1a4>
  40804c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40804e:	46c8      	mov	r8, r9
  408050:	e4d7      	b.n	407a02 <_svfprintf_r+0xb5e>
  408052:	4623      	mov	r3, r4
  408054:	e6a2      	b.n	407d9c <_svfprintf_r+0xef8>
  408056:	aa25      	add	r2, sp, #148	; 0x94
  408058:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40805a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40805c:	f003 feba 	bl	40bdd4 <__ssprint_r>
  408060:	2800      	cmp	r0, #0
  408062:	f47e aff1 	bne.w	407048 <_svfprintf_r+0x1a4>
  408066:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408068:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40806a:	46c8      	mov	r8, r9
  40806c:	e5ae      	b.n	407bcc <_svfprintf_r+0xd28>
  40806e:	aa25      	add	r2, sp, #148	; 0x94
  408070:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408072:	980c      	ldr	r0, [sp, #48]	; 0x30
  408074:	f003 feae 	bl	40bdd4 <__ssprint_r>
  408078:	2800      	cmp	r0, #0
  40807a:	f47e afe5 	bne.w	407048 <_svfprintf_r+0x1a4>
  40807e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  408080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  408082:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  408084:	1a9a      	subs	r2, r3, r2
  408086:	46c8      	mov	r8, r9
  408088:	e5b8      	b.n	407bfc <_svfprintf_r+0xd58>
  40808a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40808c:	9612      	str	r6, [sp, #72]	; 0x48
  40808e:	2b06      	cmp	r3, #6
  408090:	bf28      	it	cs
  408092:	2306      	movcs	r3, #6
  408094:	960a      	str	r6, [sp, #40]	; 0x28
  408096:	4637      	mov	r7, r6
  408098:	9308      	str	r3, [sp, #32]
  40809a:	950f      	str	r5, [sp, #60]	; 0x3c
  40809c:	f8cd b01c 	str.w	fp, [sp, #28]
  4080a0:	930e      	str	r3, [sp, #56]	; 0x38
  4080a2:	4e74      	ldr	r6, [pc, #464]	; (408274 <_svfprintf_r+0x13d0>)
  4080a4:	f7ff b816 	b.w	4070d4 <_svfprintf_r+0x230>
  4080a8:	a823      	add	r0, sp, #140	; 0x8c
  4080aa:	a920      	add	r1, sp, #128	; 0x80
  4080ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4080ae:	9004      	str	r0, [sp, #16]
  4080b0:	9103      	str	r1, [sp, #12]
  4080b2:	a81f      	add	r0, sp, #124	; 0x7c
  4080b4:	2103      	movs	r1, #3
  4080b6:	9002      	str	r0, [sp, #8]
  4080b8:	9a08      	ldr	r2, [sp, #32]
  4080ba:	9501      	str	r5, [sp, #4]
  4080bc:	463b      	mov	r3, r7
  4080be:	9100      	str	r1, [sp, #0]
  4080c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4080c2:	f001 f8f1 	bl	4092a8 <_dtoa_r>
  4080c6:	4606      	mov	r6, r0
  4080c8:	1944      	adds	r4, r0, r5
  4080ca:	e72b      	b.n	407f24 <_svfprintf_r+0x1080>
  4080cc:	2306      	movs	r3, #6
  4080ce:	930a      	str	r3, [sp, #40]	; 0x28
  4080d0:	e61d      	b.n	407d0e <_svfprintf_r+0xe6a>
  4080d2:	272d      	movs	r7, #45	; 0x2d
  4080d4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4080d8:	f7ff bacd 	b.w	407676 <_svfprintf_r+0x7d2>
  4080dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4080de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4080e0:	4413      	add	r3, r2
  4080e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4080e4:	930e      	str	r3, [sp, #56]	; 0x38
  4080e6:	2a00      	cmp	r2, #0
  4080e8:	f340 80b0 	ble.w	40824c <_svfprintf_r+0x13a8>
  4080ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4080f0:	9308      	str	r3, [sp, #32]
  4080f2:	2367      	movs	r3, #103	; 0x67
  4080f4:	9311      	str	r3, [sp, #68]	; 0x44
  4080f6:	e671      	b.n	407ddc <_svfprintf_r+0xf38>
  4080f8:	2b00      	cmp	r3, #0
  4080fa:	f340 80c3 	ble.w	408284 <_svfprintf_r+0x13e0>
  4080fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408100:	2a00      	cmp	r2, #0
  408102:	f040 8099 	bne.w	408238 <_svfprintf_r+0x1394>
  408106:	f01b 0f01 	tst.w	fp, #1
  40810a:	f040 8095 	bne.w	408238 <_svfprintf_r+0x1394>
  40810e:	9308      	str	r3, [sp, #32]
  408110:	930e      	str	r3, [sp, #56]	; 0x38
  408112:	e663      	b.n	407ddc <_svfprintf_r+0xf38>
  408114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408116:	9308      	str	r3, [sp, #32]
  408118:	930e      	str	r3, [sp, #56]	; 0x38
  40811a:	900a      	str	r0, [sp, #40]	; 0x28
  40811c:	950f      	str	r5, [sp, #60]	; 0x3c
  40811e:	f8cd b01c 	str.w	fp, [sp, #28]
  408122:	9012      	str	r0, [sp, #72]	; 0x48
  408124:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  408128:	f7fe bfd4 	b.w	4070d4 <_svfprintf_r+0x230>
  40812c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40812e:	2b47      	cmp	r3, #71	; 0x47
  408130:	f47f ae20 	bne.w	407d74 <_svfprintf_r+0xed0>
  408134:	f01b 0f01 	tst.w	fp, #1
  408138:	f47f aeee 	bne.w	407f18 <_svfprintf_r+0x1074>
  40813c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40813e:	1b9b      	subs	r3, r3, r6
  408140:	9313      	str	r3, [sp, #76]	; 0x4c
  408142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408144:	2b47      	cmp	r3, #71	; 0x47
  408146:	f43f af18 	beq.w	407f7a <_svfprintf_r+0x10d6>
  40814a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40814c:	9312      	str	r3, [sp, #72]	; 0x48
  40814e:	e721      	b.n	407f94 <_svfprintf_r+0x10f0>
  408150:	424f      	negs	r7, r1
  408152:	3110      	adds	r1, #16
  408154:	4d48      	ldr	r5, [pc, #288]	; (408278 <_svfprintf_r+0x13d4>)
  408156:	da2f      	bge.n	4081b8 <_svfprintf_r+0x1314>
  408158:	2410      	movs	r4, #16
  40815a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40815e:	e004      	b.n	40816a <_svfprintf_r+0x12c6>
  408160:	f108 0808 	add.w	r8, r8, #8
  408164:	3f10      	subs	r7, #16
  408166:	2f10      	cmp	r7, #16
  408168:	dd26      	ble.n	4081b8 <_svfprintf_r+0x1314>
  40816a:	3301      	adds	r3, #1
  40816c:	3210      	adds	r2, #16
  40816e:	2b07      	cmp	r3, #7
  408170:	9227      	str	r2, [sp, #156]	; 0x9c
  408172:	9326      	str	r3, [sp, #152]	; 0x98
  408174:	f8c8 5000 	str.w	r5, [r8]
  408178:	f8c8 4004 	str.w	r4, [r8, #4]
  40817c:	ddf0      	ble.n	408160 <_svfprintf_r+0x12bc>
  40817e:	aa25      	add	r2, sp, #148	; 0x94
  408180:	990b      	ldr	r1, [sp, #44]	; 0x2c
  408182:	4658      	mov	r0, fp
  408184:	f003 fe26 	bl	40bdd4 <__ssprint_r>
  408188:	2800      	cmp	r0, #0
  40818a:	f47e af5d 	bne.w	407048 <_svfprintf_r+0x1a4>
  40818e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  408190:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408192:	46c8      	mov	r8, r9
  408194:	e7e6      	b.n	408164 <_svfprintf_r+0x12c0>
  408196:	aa25      	add	r2, sp, #148	; 0x94
  408198:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40819a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40819c:	f003 fe1a 	bl	40bdd4 <__ssprint_r>
  4081a0:	2800      	cmp	r0, #0
  4081a2:	f47e af51 	bne.w	407048 <_svfprintf_r+0x1a4>
  4081a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4081a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4081aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4081ac:	46c8      	mov	r8, r9
  4081ae:	e667      	b.n	407e80 <_svfprintf_r+0xfdc>
  4081b0:	2000      	movs	r0, #0
  4081b2:	900a      	str	r0, [sp, #40]	; 0x28
  4081b4:	f7fe bed0 	b.w	406f58 <_svfprintf_r+0xb4>
  4081b8:	3301      	adds	r3, #1
  4081ba:	443a      	add	r2, r7
  4081bc:	2b07      	cmp	r3, #7
  4081be:	e888 00a0 	stmia.w	r8, {r5, r7}
  4081c2:	9227      	str	r2, [sp, #156]	; 0x9c
  4081c4:	9326      	str	r3, [sp, #152]	; 0x98
  4081c6:	f108 0808 	add.w	r8, r8, #8
  4081ca:	f77f ae5c 	ble.w	407e86 <_svfprintf_r+0xfe2>
  4081ce:	aa25      	add	r2, sp, #148	; 0x94
  4081d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4081d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4081d4:	f003 fdfe 	bl	40bdd4 <__ssprint_r>
  4081d8:	2800      	cmp	r0, #0
  4081da:	f47e af35 	bne.w	407048 <_svfprintf_r+0x1a4>
  4081de:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4081e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4081e2:	46c8      	mov	r8, r9
  4081e4:	e64f      	b.n	407e86 <_svfprintf_r+0xfe2>
  4081e6:	3330      	adds	r3, #48	; 0x30
  4081e8:	2230      	movs	r2, #48	; 0x30
  4081ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4081ee:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4081f2:	ab22      	add	r3, sp, #136	; 0x88
  4081f4:	e70f      	b.n	408016 <_svfprintf_r+0x1172>
  4081f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4081f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4081fa:	4413      	add	r3, r2
  4081fc:	930e      	str	r3, [sp, #56]	; 0x38
  4081fe:	e775      	b.n	4080ec <_svfprintf_r+0x1248>
  408200:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408202:	e5cb      	b.n	407d9c <_svfprintf_r+0xef8>
  408204:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408206:	4e1d      	ldr	r6, [pc, #116]	; (40827c <_svfprintf_r+0x13d8>)
  408208:	2b00      	cmp	r3, #0
  40820a:	bfb6      	itet	lt
  40820c:	272d      	movlt	r7, #45	; 0x2d
  40820e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  408212:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  408216:	4b1a      	ldr	r3, [pc, #104]	; (408280 <_svfprintf_r+0x13dc>)
  408218:	f7ff ba2f 	b.w	40767a <_svfprintf_r+0x7d6>
  40821c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40821e:	9808      	ldr	r0, [sp, #32]
  408220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408222:	4639      	mov	r1, r7
  408224:	f004 fc72 	bl	40cb0c <__aeabi_dcmpeq>
  408228:	2800      	cmp	r0, #0
  40822a:	f47f ae7f 	bne.w	407f2c <_svfprintf_r+0x1088>
  40822e:	f1c5 0501 	rsb	r5, r5, #1
  408232:	951f      	str	r5, [sp, #124]	; 0x7c
  408234:	442c      	add	r4, r5
  408236:	e59e      	b.n	407d76 <_svfprintf_r+0xed2>
  408238:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40823a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40823c:	4413      	add	r3, r2
  40823e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408240:	441a      	add	r2, r3
  408242:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  408246:	920e      	str	r2, [sp, #56]	; 0x38
  408248:	9308      	str	r3, [sp, #32]
  40824a:	e5c7      	b.n	407ddc <_svfprintf_r+0xf38>
  40824c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40824e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  408250:	f1c3 0301 	rsb	r3, r3, #1
  408254:	441a      	add	r2, r3
  408256:	4613      	mov	r3, r2
  408258:	e7d0      	b.n	4081fc <_svfprintf_r+0x1358>
  40825a:	f01b 0301 	ands.w	r3, fp, #1
  40825e:	9312      	str	r3, [sp, #72]	; 0x48
  408260:	f47f aee2 	bne.w	408028 <_svfprintf_r+0x1184>
  408264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40826a:	9308      	str	r3, [sp, #32]
  40826c:	e5b6      	b.n	407ddc <_svfprintf_r+0xf38>
  40826e:	bf00      	nop
  408270:	66666667 	.word	0x66666667
  408274:	0040dfac 	.word	0x0040dfac
  408278:	0040dfc4 	.word	0x0040dfc4
  40827c:	0040df80 	.word	0x0040df80
  408280:	0040df7c 	.word	0x0040df7c
  408284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408286:	b913      	cbnz	r3, 40828e <_svfprintf_r+0x13ea>
  408288:	f01b 0f01 	tst.w	fp, #1
  40828c:	d002      	beq.n	408294 <_svfprintf_r+0x13f0>
  40828e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408290:	3301      	adds	r3, #1
  408292:	e7d4      	b.n	40823e <_svfprintf_r+0x139a>
  408294:	2301      	movs	r3, #1
  408296:	e73a      	b.n	40810e <_svfprintf_r+0x126a>
  408298:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40829a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40829e:	6828      	ldr	r0, [r5, #0]
  4082a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4082a4:	900a      	str	r0, [sp, #40]	; 0x28
  4082a6:	4628      	mov	r0, r5
  4082a8:	3004      	adds	r0, #4
  4082aa:	46a2      	mov	sl, r4
  4082ac:	900f      	str	r0, [sp, #60]	; 0x3c
  4082ae:	f7fe be51 	b.w	406f54 <_svfprintf_r+0xb0>
  4082b2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4082b6:	f7ff b867 	b.w	407388 <_svfprintf_r+0x4e4>
  4082ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4082be:	f7ff ba15 	b.w	4076ec <_svfprintf_r+0x848>
  4082c2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4082c6:	e6a6      	b.n	408016 <_svfprintf_r+0x1172>
  4082c8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4082cc:	f7ff b8eb 	b.w	4074a6 <_svfprintf_r+0x602>
  4082d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4082d2:	230c      	movs	r3, #12
  4082d4:	6013      	str	r3, [r2, #0]
  4082d6:	f04f 33ff 	mov.w	r3, #4294967295
  4082da:	9309      	str	r3, [sp, #36]	; 0x24
  4082dc:	f7fe bebd 	b.w	40705a <_svfprintf_r+0x1b6>
  4082e0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4082e4:	f7ff b99a 	b.w	40761c <_svfprintf_r+0x778>
  4082e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4082ec:	f7ff b976 	b.w	4075dc <_svfprintf_r+0x738>
  4082f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4082f4:	f7ff b959 	b.w	4075aa <_svfprintf_r+0x706>
  4082f8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4082fc:	f7ff b912 	b.w	407524 <_svfprintf_r+0x680>

00408300 <__sprint_r.part.0>:
  408300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408304:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  408306:	049c      	lsls	r4, r3, #18
  408308:	4693      	mov	fp, r2
  40830a:	d52f      	bpl.n	40836c <__sprint_r.part.0+0x6c>
  40830c:	6893      	ldr	r3, [r2, #8]
  40830e:	6812      	ldr	r2, [r2, #0]
  408310:	b353      	cbz	r3, 408368 <__sprint_r.part.0+0x68>
  408312:	460e      	mov	r6, r1
  408314:	4607      	mov	r7, r0
  408316:	f102 0908 	add.w	r9, r2, #8
  40831a:	e919 0420 	ldmdb	r9, {r5, sl}
  40831e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  408322:	d017      	beq.n	408354 <__sprint_r.part.0+0x54>
  408324:	3d04      	subs	r5, #4
  408326:	2400      	movs	r4, #0
  408328:	e001      	b.n	40832e <__sprint_r.part.0+0x2e>
  40832a:	45a0      	cmp	r8, r4
  40832c:	d010      	beq.n	408350 <__sprint_r.part.0+0x50>
  40832e:	4632      	mov	r2, r6
  408330:	f855 1f04 	ldr.w	r1, [r5, #4]!
  408334:	4638      	mov	r0, r7
  408336:	f002 f87b 	bl	40a430 <_fputwc_r>
  40833a:	1c43      	adds	r3, r0, #1
  40833c:	f104 0401 	add.w	r4, r4, #1
  408340:	d1f3      	bne.n	40832a <__sprint_r.part.0+0x2a>
  408342:	2300      	movs	r3, #0
  408344:	f8cb 3008 	str.w	r3, [fp, #8]
  408348:	f8cb 3004 	str.w	r3, [fp, #4]
  40834c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408350:	f8db 3008 	ldr.w	r3, [fp, #8]
  408354:	f02a 0a03 	bic.w	sl, sl, #3
  408358:	eba3 030a 	sub.w	r3, r3, sl
  40835c:	f8cb 3008 	str.w	r3, [fp, #8]
  408360:	f109 0908 	add.w	r9, r9, #8
  408364:	2b00      	cmp	r3, #0
  408366:	d1d8      	bne.n	40831a <__sprint_r.part.0+0x1a>
  408368:	2000      	movs	r0, #0
  40836a:	e7ea      	b.n	408342 <__sprint_r.part.0+0x42>
  40836c:	f002 f9ca 	bl	40a704 <__sfvwrite_r>
  408370:	2300      	movs	r3, #0
  408372:	f8cb 3008 	str.w	r3, [fp, #8]
  408376:	f8cb 3004 	str.w	r3, [fp, #4]
  40837a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40837e:	bf00      	nop

00408380 <_vfiprintf_r>:
  408380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408384:	b0ad      	sub	sp, #180	; 0xb4
  408386:	461d      	mov	r5, r3
  408388:	468b      	mov	fp, r1
  40838a:	4690      	mov	r8, r2
  40838c:	9307      	str	r3, [sp, #28]
  40838e:	9006      	str	r0, [sp, #24]
  408390:	b118      	cbz	r0, 40839a <_vfiprintf_r+0x1a>
  408392:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408394:	2b00      	cmp	r3, #0
  408396:	f000 80f3 	beq.w	408580 <_vfiprintf_r+0x200>
  40839a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40839e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4083a2:	07df      	lsls	r7, r3, #31
  4083a4:	b281      	uxth	r1, r0
  4083a6:	d402      	bmi.n	4083ae <_vfiprintf_r+0x2e>
  4083a8:	058e      	lsls	r6, r1, #22
  4083aa:	f140 80fc 	bpl.w	4085a6 <_vfiprintf_r+0x226>
  4083ae:	048c      	lsls	r4, r1, #18
  4083b0:	d40a      	bmi.n	4083c8 <_vfiprintf_r+0x48>
  4083b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4083b6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4083ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4083be:	f8ab 100c 	strh.w	r1, [fp, #12]
  4083c2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4083c6:	b289      	uxth	r1, r1
  4083c8:	0708      	lsls	r0, r1, #28
  4083ca:	f140 80b3 	bpl.w	408534 <_vfiprintf_r+0x1b4>
  4083ce:	f8db 3010 	ldr.w	r3, [fp, #16]
  4083d2:	2b00      	cmp	r3, #0
  4083d4:	f000 80ae 	beq.w	408534 <_vfiprintf_r+0x1b4>
  4083d8:	f001 031a 	and.w	r3, r1, #26
  4083dc:	2b0a      	cmp	r3, #10
  4083de:	f000 80b5 	beq.w	40854c <_vfiprintf_r+0x1cc>
  4083e2:	2300      	movs	r3, #0
  4083e4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4083e8:	930b      	str	r3, [sp, #44]	; 0x2c
  4083ea:	9311      	str	r3, [sp, #68]	; 0x44
  4083ec:	9310      	str	r3, [sp, #64]	; 0x40
  4083ee:	9303      	str	r3, [sp, #12]
  4083f0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4083f4:	46ca      	mov	sl, r9
  4083f6:	f8cd b010 	str.w	fp, [sp, #16]
  4083fa:	f898 3000 	ldrb.w	r3, [r8]
  4083fe:	4644      	mov	r4, r8
  408400:	b1fb      	cbz	r3, 408442 <_vfiprintf_r+0xc2>
  408402:	2b25      	cmp	r3, #37	; 0x25
  408404:	d102      	bne.n	40840c <_vfiprintf_r+0x8c>
  408406:	e01c      	b.n	408442 <_vfiprintf_r+0xc2>
  408408:	2b25      	cmp	r3, #37	; 0x25
  40840a:	d003      	beq.n	408414 <_vfiprintf_r+0x94>
  40840c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  408410:	2b00      	cmp	r3, #0
  408412:	d1f9      	bne.n	408408 <_vfiprintf_r+0x88>
  408414:	eba4 0508 	sub.w	r5, r4, r8
  408418:	b19d      	cbz	r5, 408442 <_vfiprintf_r+0xc2>
  40841a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40841c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40841e:	f8ca 8000 	str.w	r8, [sl]
  408422:	3301      	adds	r3, #1
  408424:	442a      	add	r2, r5
  408426:	2b07      	cmp	r3, #7
  408428:	f8ca 5004 	str.w	r5, [sl, #4]
  40842c:	9211      	str	r2, [sp, #68]	; 0x44
  40842e:	9310      	str	r3, [sp, #64]	; 0x40
  408430:	dd7a      	ble.n	408528 <_vfiprintf_r+0x1a8>
  408432:	2a00      	cmp	r2, #0
  408434:	f040 84b0 	bne.w	408d98 <_vfiprintf_r+0xa18>
  408438:	9b03      	ldr	r3, [sp, #12]
  40843a:	9210      	str	r2, [sp, #64]	; 0x40
  40843c:	442b      	add	r3, r5
  40843e:	46ca      	mov	sl, r9
  408440:	9303      	str	r3, [sp, #12]
  408442:	7823      	ldrb	r3, [r4, #0]
  408444:	2b00      	cmp	r3, #0
  408446:	f000 83e0 	beq.w	408c0a <_vfiprintf_r+0x88a>
  40844a:	2000      	movs	r0, #0
  40844c:	f04f 0300 	mov.w	r3, #0
  408450:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  408454:	f104 0801 	add.w	r8, r4, #1
  408458:	7862      	ldrb	r2, [r4, #1]
  40845a:	4605      	mov	r5, r0
  40845c:	4606      	mov	r6, r0
  40845e:	4603      	mov	r3, r0
  408460:	f04f 34ff 	mov.w	r4, #4294967295
  408464:	f108 0801 	add.w	r8, r8, #1
  408468:	f1a2 0120 	sub.w	r1, r2, #32
  40846c:	2958      	cmp	r1, #88	; 0x58
  40846e:	f200 82de 	bhi.w	408a2e <_vfiprintf_r+0x6ae>
  408472:	e8df f011 	tbh	[pc, r1, lsl #1]
  408476:	0221      	.short	0x0221
  408478:	02dc02dc 	.word	0x02dc02dc
  40847c:	02dc0229 	.word	0x02dc0229
  408480:	02dc02dc 	.word	0x02dc02dc
  408484:	02dc02dc 	.word	0x02dc02dc
  408488:	028902dc 	.word	0x028902dc
  40848c:	02dc0295 	.word	0x02dc0295
  408490:	02bd00a2 	.word	0x02bd00a2
  408494:	019f02dc 	.word	0x019f02dc
  408498:	01a401a4 	.word	0x01a401a4
  40849c:	01a401a4 	.word	0x01a401a4
  4084a0:	01a401a4 	.word	0x01a401a4
  4084a4:	01a401a4 	.word	0x01a401a4
  4084a8:	02dc01a4 	.word	0x02dc01a4
  4084ac:	02dc02dc 	.word	0x02dc02dc
  4084b0:	02dc02dc 	.word	0x02dc02dc
  4084b4:	02dc02dc 	.word	0x02dc02dc
  4084b8:	02dc02dc 	.word	0x02dc02dc
  4084bc:	01b202dc 	.word	0x01b202dc
  4084c0:	02dc02dc 	.word	0x02dc02dc
  4084c4:	02dc02dc 	.word	0x02dc02dc
  4084c8:	02dc02dc 	.word	0x02dc02dc
  4084cc:	02dc02dc 	.word	0x02dc02dc
  4084d0:	02dc02dc 	.word	0x02dc02dc
  4084d4:	02dc0197 	.word	0x02dc0197
  4084d8:	02dc02dc 	.word	0x02dc02dc
  4084dc:	02dc02dc 	.word	0x02dc02dc
  4084e0:	02dc019b 	.word	0x02dc019b
  4084e4:	025302dc 	.word	0x025302dc
  4084e8:	02dc02dc 	.word	0x02dc02dc
  4084ec:	02dc02dc 	.word	0x02dc02dc
  4084f0:	02dc02dc 	.word	0x02dc02dc
  4084f4:	02dc02dc 	.word	0x02dc02dc
  4084f8:	02dc02dc 	.word	0x02dc02dc
  4084fc:	021b025a 	.word	0x021b025a
  408500:	02dc02dc 	.word	0x02dc02dc
  408504:	026e02dc 	.word	0x026e02dc
  408508:	02dc021b 	.word	0x02dc021b
  40850c:	027302dc 	.word	0x027302dc
  408510:	01f502dc 	.word	0x01f502dc
  408514:	02090182 	.word	0x02090182
  408518:	02dc02d7 	.word	0x02dc02d7
  40851c:	02dc029a 	.word	0x02dc029a
  408520:	02dc00a7 	.word	0x02dc00a7
  408524:	022e02dc 	.word	0x022e02dc
  408528:	f10a 0a08 	add.w	sl, sl, #8
  40852c:	9b03      	ldr	r3, [sp, #12]
  40852e:	442b      	add	r3, r5
  408530:	9303      	str	r3, [sp, #12]
  408532:	e786      	b.n	408442 <_vfiprintf_r+0xc2>
  408534:	4659      	mov	r1, fp
  408536:	9806      	ldr	r0, [sp, #24]
  408538:	f000 fdac 	bl	409094 <__swsetup_r>
  40853c:	bb18      	cbnz	r0, 408586 <_vfiprintf_r+0x206>
  40853e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  408542:	f001 031a 	and.w	r3, r1, #26
  408546:	2b0a      	cmp	r3, #10
  408548:	f47f af4b 	bne.w	4083e2 <_vfiprintf_r+0x62>
  40854c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  408550:	2b00      	cmp	r3, #0
  408552:	f6ff af46 	blt.w	4083e2 <_vfiprintf_r+0x62>
  408556:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40855a:	07db      	lsls	r3, r3, #31
  40855c:	d405      	bmi.n	40856a <_vfiprintf_r+0x1ea>
  40855e:	058f      	lsls	r7, r1, #22
  408560:	d403      	bmi.n	40856a <_vfiprintf_r+0x1ea>
  408562:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408566:	f002 fa91 	bl	40aa8c <__retarget_lock_release_recursive>
  40856a:	462b      	mov	r3, r5
  40856c:	4642      	mov	r2, r8
  40856e:	4659      	mov	r1, fp
  408570:	9806      	ldr	r0, [sp, #24]
  408572:	f000 fd4d 	bl	409010 <__sbprintf>
  408576:	9003      	str	r0, [sp, #12]
  408578:	9803      	ldr	r0, [sp, #12]
  40857a:	b02d      	add	sp, #180	; 0xb4
  40857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408580:	f001 feb4 	bl	40a2ec <__sinit>
  408584:	e709      	b.n	40839a <_vfiprintf_r+0x1a>
  408586:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40858a:	07d9      	lsls	r1, r3, #31
  40858c:	d404      	bmi.n	408598 <_vfiprintf_r+0x218>
  40858e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408592:	059a      	lsls	r2, r3, #22
  408594:	f140 84aa 	bpl.w	408eec <_vfiprintf_r+0xb6c>
  408598:	f04f 33ff 	mov.w	r3, #4294967295
  40859c:	9303      	str	r3, [sp, #12]
  40859e:	9803      	ldr	r0, [sp, #12]
  4085a0:	b02d      	add	sp, #180	; 0xb4
  4085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4085a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4085aa:	f002 fa6d 	bl	40aa88 <__retarget_lock_acquire_recursive>
  4085ae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4085b2:	b281      	uxth	r1, r0
  4085b4:	e6fb      	b.n	4083ae <_vfiprintf_r+0x2e>
  4085b6:	4276      	negs	r6, r6
  4085b8:	9207      	str	r2, [sp, #28]
  4085ba:	f043 0304 	orr.w	r3, r3, #4
  4085be:	f898 2000 	ldrb.w	r2, [r8]
  4085c2:	e74f      	b.n	408464 <_vfiprintf_r+0xe4>
  4085c4:	9608      	str	r6, [sp, #32]
  4085c6:	069e      	lsls	r6, r3, #26
  4085c8:	f100 8450 	bmi.w	408e6c <_vfiprintf_r+0xaec>
  4085cc:	9907      	ldr	r1, [sp, #28]
  4085ce:	06dd      	lsls	r5, r3, #27
  4085d0:	460a      	mov	r2, r1
  4085d2:	f100 83ef 	bmi.w	408db4 <_vfiprintf_r+0xa34>
  4085d6:	0658      	lsls	r0, r3, #25
  4085d8:	f140 83ec 	bpl.w	408db4 <_vfiprintf_r+0xa34>
  4085dc:	880e      	ldrh	r6, [r1, #0]
  4085de:	3104      	adds	r1, #4
  4085e0:	2700      	movs	r7, #0
  4085e2:	2201      	movs	r2, #1
  4085e4:	9107      	str	r1, [sp, #28]
  4085e6:	f04f 0100 	mov.w	r1, #0
  4085ea:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4085ee:	2500      	movs	r5, #0
  4085f0:	1c61      	adds	r1, r4, #1
  4085f2:	f000 8116 	beq.w	408822 <_vfiprintf_r+0x4a2>
  4085f6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4085fa:	9102      	str	r1, [sp, #8]
  4085fc:	ea56 0107 	orrs.w	r1, r6, r7
  408600:	f040 8114 	bne.w	40882c <_vfiprintf_r+0x4ac>
  408604:	2c00      	cmp	r4, #0
  408606:	f040 835c 	bne.w	408cc2 <_vfiprintf_r+0x942>
  40860a:	2a00      	cmp	r2, #0
  40860c:	f040 83b7 	bne.w	408d7e <_vfiprintf_r+0x9fe>
  408610:	f013 0301 	ands.w	r3, r3, #1
  408614:	9305      	str	r3, [sp, #20]
  408616:	f000 8457 	beq.w	408ec8 <_vfiprintf_r+0xb48>
  40861a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40861e:	2330      	movs	r3, #48	; 0x30
  408620:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  408624:	9b05      	ldr	r3, [sp, #20]
  408626:	42a3      	cmp	r3, r4
  408628:	bfb8      	it	lt
  40862a:	4623      	movlt	r3, r4
  40862c:	9301      	str	r3, [sp, #4]
  40862e:	b10d      	cbz	r5, 408634 <_vfiprintf_r+0x2b4>
  408630:	3301      	adds	r3, #1
  408632:	9301      	str	r3, [sp, #4]
  408634:	9b02      	ldr	r3, [sp, #8]
  408636:	f013 0302 	ands.w	r3, r3, #2
  40863a:	9309      	str	r3, [sp, #36]	; 0x24
  40863c:	d002      	beq.n	408644 <_vfiprintf_r+0x2c4>
  40863e:	9b01      	ldr	r3, [sp, #4]
  408640:	3302      	adds	r3, #2
  408642:	9301      	str	r3, [sp, #4]
  408644:	9b02      	ldr	r3, [sp, #8]
  408646:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40864a:	930a      	str	r3, [sp, #40]	; 0x28
  40864c:	f040 8217 	bne.w	408a7e <_vfiprintf_r+0x6fe>
  408650:	9b08      	ldr	r3, [sp, #32]
  408652:	9a01      	ldr	r2, [sp, #4]
  408654:	1a9d      	subs	r5, r3, r2
  408656:	2d00      	cmp	r5, #0
  408658:	f340 8211 	ble.w	408a7e <_vfiprintf_r+0x6fe>
  40865c:	2d10      	cmp	r5, #16
  40865e:	f340 8490 	ble.w	408f82 <_vfiprintf_r+0xc02>
  408662:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408664:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408666:	4ec4      	ldr	r6, [pc, #784]	; (408978 <_vfiprintf_r+0x5f8>)
  408668:	46d6      	mov	lr, sl
  40866a:	2710      	movs	r7, #16
  40866c:	46a2      	mov	sl, r4
  40866e:	4619      	mov	r1, r3
  408670:	9c06      	ldr	r4, [sp, #24]
  408672:	e007      	b.n	408684 <_vfiprintf_r+0x304>
  408674:	f101 0c02 	add.w	ip, r1, #2
  408678:	f10e 0e08 	add.w	lr, lr, #8
  40867c:	4601      	mov	r1, r0
  40867e:	3d10      	subs	r5, #16
  408680:	2d10      	cmp	r5, #16
  408682:	dd11      	ble.n	4086a8 <_vfiprintf_r+0x328>
  408684:	1c48      	adds	r0, r1, #1
  408686:	3210      	adds	r2, #16
  408688:	2807      	cmp	r0, #7
  40868a:	9211      	str	r2, [sp, #68]	; 0x44
  40868c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  408690:	9010      	str	r0, [sp, #64]	; 0x40
  408692:	ddef      	ble.n	408674 <_vfiprintf_r+0x2f4>
  408694:	2a00      	cmp	r2, #0
  408696:	f040 81e4 	bne.w	408a62 <_vfiprintf_r+0x6e2>
  40869a:	3d10      	subs	r5, #16
  40869c:	2d10      	cmp	r5, #16
  40869e:	4611      	mov	r1, r2
  4086a0:	f04f 0c01 	mov.w	ip, #1
  4086a4:	46ce      	mov	lr, r9
  4086a6:	dced      	bgt.n	408684 <_vfiprintf_r+0x304>
  4086a8:	4654      	mov	r4, sl
  4086aa:	4661      	mov	r1, ip
  4086ac:	46f2      	mov	sl, lr
  4086ae:	442a      	add	r2, r5
  4086b0:	2907      	cmp	r1, #7
  4086b2:	9211      	str	r2, [sp, #68]	; 0x44
  4086b4:	f8ca 6000 	str.w	r6, [sl]
  4086b8:	f8ca 5004 	str.w	r5, [sl, #4]
  4086bc:	9110      	str	r1, [sp, #64]	; 0x40
  4086be:	f300 82ec 	bgt.w	408c9a <_vfiprintf_r+0x91a>
  4086c2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4086c6:	f10a 0a08 	add.w	sl, sl, #8
  4086ca:	1c48      	adds	r0, r1, #1
  4086cc:	2d00      	cmp	r5, #0
  4086ce:	f040 81de 	bne.w	408a8e <_vfiprintf_r+0x70e>
  4086d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4086d4:	2b00      	cmp	r3, #0
  4086d6:	f000 81f8 	beq.w	408aca <_vfiprintf_r+0x74a>
  4086da:	3202      	adds	r2, #2
  4086dc:	a90e      	add	r1, sp, #56	; 0x38
  4086de:	2302      	movs	r3, #2
  4086e0:	2807      	cmp	r0, #7
  4086e2:	9211      	str	r2, [sp, #68]	; 0x44
  4086e4:	9010      	str	r0, [sp, #64]	; 0x40
  4086e6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4086ea:	f340 81ea 	ble.w	408ac2 <_vfiprintf_r+0x742>
  4086ee:	2a00      	cmp	r2, #0
  4086f0:	f040 838c 	bne.w	408e0c <_vfiprintf_r+0xa8c>
  4086f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086f6:	2b80      	cmp	r3, #128	; 0x80
  4086f8:	f04f 0001 	mov.w	r0, #1
  4086fc:	4611      	mov	r1, r2
  4086fe:	46ca      	mov	sl, r9
  408700:	f040 81e7 	bne.w	408ad2 <_vfiprintf_r+0x752>
  408704:	9b08      	ldr	r3, [sp, #32]
  408706:	9d01      	ldr	r5, [sp, #4]
  408708:	1b5e      	subs	r6, r3, r5
  40870a:	2e00      	cmp	r6, #0
  40870c:	f340 81e1 	ble.w	408ad2 <_vfiprintf_r+0x752>
  408710:	2e10      	cmp	r6, #16
  408712:	4d9a      	ldr	r5, [pc, #616]	; (40897c <_vfiprintf_r+0x5fc>)
  408714:	f340 8450 	ble.w	408fb8 <_vfiprintf_r+0xc38>
  408718:	46d4      	mov	ip, sl
  40871a:	2710      	movs	r7, #16
  40871c:	46a2      	mov	sl, r4
  40871e:	9c06      	ldr	r4, [sp, #24]
  408720:	e007      	b.n	408732 <_vfiprintf_r+0x3b2>
  408722:	f101 0e02 	add.w	lr, r1, #2
  408726:	f10c 0c08 	add.w	ip, ip, #8
  40872a:	4601      	mov	r1, r0
  40872c:	3e10      	subs	r6, #16
  40872e:	2e10      	cmp	r6, #16
  408730:	dd11      	ble.n	408756 <_vfiprintf_r+0x3d6>
  408732:	1c48      	adds	r0, r1, #1
  408734:	3210      	adds	r2, #16
  408736:	2807      	cmp	r0, #7
  408738:	9211      	str	r2, [sp, #68]	; 0x44
  40873a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40873e:	9010      	str	r0, [sp, #64]	; 0x40
  408740:	ddef      	ble.n	408722 <_vfiprintf_r+0x3a2>
  408742:	2a00      	cmp	r2, #0
  408744:	f040 829d 	bne.w	408c82 <_vfiprintf_r+0x902>
  408748:	3e10      	subs	r6, #16
  40874a:	2e10      	cmp	r6, #16
  40874c:	f04f 0e01 	mov.w	lr, #1
  408750:	4611      	mov	r1, r2
  408752:	46cc      	mov	ip, r9
  408754:	dced      	bgt.n	408732 <_vfiprintf_r+0x3b2>
  408756:	4654      	mov	r4, sl
  408758:	46e2      	mov	sl, ip
  40875a:	4432      	add	r2, r6
  40875c:	f1be 0f07 	cmp.w	lr, #7
  408760:	9211      	str	r2, [sp, #68]	; 0x44
  408762:	e88a 0060 	stmia.w	sl, {r5, r6}
  408766:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40876a:	f300 8369 	bgt.w	408e40 <_vfiprintf_r+0xac0>
  40876e:	f10a 0a08 	add.w	sl, sl, #8
  408772:	f10e 0001 	add.w	r0, lr, #1
  408776:	4671      	mov	r1, lr
  408778:	e1ab      	b.n	408ad2 <_vfiprintf_r+0x752>
  40877a:	9608      	str	r6, [sp, #32]
  40877c:	f013 0220 	ands.w	r2, r3, #32
  408780:	f040 838c 	bne.w	408e9c <_vfiprintf_r+0xb1c>
  408784:	f013 0110 	ands.w	r1, r3, #16
  408788:	f040 831a 	bne.w	408dc0 <_vfiprintf_r+0xa40>
  40878c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  408790:	f000 8316 	beq.w	408dc0 <_vfiprintf_r+0xa40>
  408794:	9807      	ldr	r0, [sp, #28]
  408796:	460a      	mov	r2, r1
  408798:	4601      	mov	r1, r0
  40879a:	3104      	adds	r1, #4
  40879c:	8806      	ldrh	r6, [r0, #0]
  40879e:	9107      	str	r1, [sp, #28]
  4087a0:	2700      	movs	r7, #0
  4087a2:	e720      	b.n	4085e6 <_vfiprintf_r+0x266>
  4087a4:	9608      	str	r6, [sp, #32]
  4087a6:	f043 0310 	orr.w	r3, r3, #16
  4087aa:	e7e7      	b.n	40877c <_vfiprintf_r+0x3fc>
  4087ac:	9608      	str	r6, [sp, #32]
  4087ae:	f043 0310 	orr.w	r3, r3, #16
  4087b2:	e708      	b.n	4085c6 <_vfiprintf_r+0x246>
  4087b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4087b8:	f898 2000 	ldrb.w	r2, [r8]
  4087bc:	e652      	b.n	408464 <_vfiprintf_r+0xe4>
  4087be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4087c2:	2600      	movs	r6, #0
  4087c4:	f818 2b01 	ldrb.w	r2, [r8], #1
  4087c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4087cc:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4087d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4087d4:	2909      	cmp	r1, #9
  4087d6:	d9f5      	bls.n	4087c4 <_vfiprintf_r+0x444>
  4087d8:	e646      	b.n	408468 <_vfiprintf_r+0xe8>
  4087da:	9608      	str	r6, [sp, #32]
  4087dc:	2800      	cmp	r0, #0
  4087de:	f040 8408 	bne.w	408ff2 <_vfiprintf_r+0xc72>
  4087e2:	f043 0310 	orr.w	r3, r3, #16
  4087e6:	069e      	lsls	r6, r3, #26
  4087e8:	f100 834c 	bmi.w	408e84 <_vfiprintf_r+0xb04>
  4087ec:	06dd      	lsls	r5, r3, #27
  4087ee:	f100 82f3 	bmi.w	408dd8 <_vfiprintf_r+0xa58>
  4087f2:	0658      	lsls	r0, r3, #25
  4087f4:	f140 82f0 	bpl.w	408dd8 <_vfiprintf_r+0xa58>
  4087f8:	9d07      	ldr	r5, [sp, #28]
  4087fa:	f9b5 6000 	ldrsh.w	r6, [r5]
  4087fe:	462a      	mov	r2, r5
  408800:	17f7      	asrs	r7, r6, #31
  408802:	3204      	adds	r2, #4
  408804:	4630      	mov	r0, r6
  408806:	4639      	mov	r1, r7
  408808:	9207      	str	r2, [sp, #28]
  40880a:	2800      	cmp	r0, #0
  40880c:	f171 0200 	sbcs.w	r2, r1, #0
  408810:	f2c0 835d 	blt.w	408ece <_vfiprintf_r+0xb4e>
  408814:	1c61      	adds	r1, r4, #1
  408816:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40881a:	f04f 0201 	mov.w	r2, #1
  40881e:	f47f aeea 	bne.w	4085f6 <_vfiprintf_r+0x276>
  408822:	ea56 0107 	orrs.w	r1, r6, r7
  408826:	f000 824d 	beq.w	408cc4 <_vfiprintf_r+0x944>
  40882a:	9302      	str	r3, [sp, #8]
  40882c:	2a01      	cmp	r2, #1
  40882e:	f000 828c 	beq.w	408d4a <_vfiprintf_r+0x9ca>
  408832:	2a02      	cmp	r2, #2
  408834:	f040 825c 	bne.w	408cf0 <_vfiprintf_r+0x970>
  408838:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40883a:	46cb      	mov	fp, r9
  40883c:	0933      	lsrs	r3, r6, #4
  40883e:	f006 010f 	and.w	r1, r6, #15
  408842:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  408846:	093a      	lsrs	r2, r7, #4
  408848:	461e      	mov	r6, r3
  40884a:	4617      	mov	r7, r2
  40884c:	5c43      	ldrb	r3, [r0, r1]
  40884e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  408852:	ea56 0307 	orrs.w	r3, r6, r7
  408856:	d1f1      	bne.n	40883c <_vfiprintf_r+0x4bc>
  408858:	eba9 030b 	sub.w	r3, r9, fp
  40885c:	9305      	str	r3, [sp, #20]
  40885e:	e6e1      	b.n	408624 <_vfiprintf_r+0x2a4>
  408860:	2800      	cmp	r0, #0
  408862:	f040 83c0 	bne.w	408fe6 <_vfiprintf_r+0xc66>
  408866:	0699      	lsls	r1, r3, #26
  408868:	f100 8367 	bmi.w	408f3a <_vfiprintf_r+0xbba>
  40886c:	06da      	lsls	r2, r3, #27
  40886e:	f100 80f1 	bmi.w	408a54 <_vfiprintf_r+0x6d4>
  408872:	065b      	lsls	r3, r3, #25
  408874:	f140 80ee 	bpl.w	408a54 <_vfiprintf_r+0x6d4>
  408878:	9a07      	ldr	r2, [sp, #28]
  40887a:	6813      	ldr	r3, [r2, #0]
  40887c:	3204      	adds	r2, #4
  40887e:	9207      	str	r2, [sp, #28]
  408880:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  408884:	801a      	strh	r2, [r3, #0]
  408886:	e5b8      	b.n	4083fa <_vfiprintf_r+0x7a>
  408888:	9807      	ldr	r0, [sp, #28]
  40888a:	4a3d      	ldr	r2, [pc, #244]	; (408980 <_vfiprintf_r+0x600>)
  40888c:	9608      	str	r6, [sp, #32]
  40888e:	920b      	str	r2, [sp, #44]	; 0x2c
  408890:	6806      	ldr	r6, [r0, #0]
  408892:	2278      	movs	r2, #120	; 0x78
  408894:	2130      	movs	r1, #48	; 0x30
  408896:	3004      	adds	r0, #4
  408898:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40889c:	f043 0302 	orr.w	r3, r3, #2
  4088a0:	9007      	str	r0, [sp, #28]
  4088a2:	2700      	movs	r7, #0
  4088a4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4088a8:	2202      	movs	r2, #2
  4088aa:	e69c      	b.n	4085e6 <_vfiprintf_r+0x266>
  4088ac:	9608      	str	r6, [sp, #32]
  4088ae:	2800      	cmp	r0, #0
  4088b0:	d099      	beq.n	4087e6 <_vfiprintf_r+0x466>
  4088b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4088b6:	e796      	b.n	4087e6 <_vfiprintf_r+0x466>
  4088b8:	f898 2000 	ldrb.w	r2, [r8]
  4088bc:	2d00      	cmp	r5, #0
  4088be:	f47f add1 	bne.w	408464 <_vfiprintf_r+0xe4>
  4088c2:	2001      	movs	r0, #1
  4088c4:	2520      	movs	r5, #32
  4088c6:	e5cd      	b.n	408464 <_vfiprintf_r+0xe4>
  4088c8:	f043 0301 	orr.w	r3, r3, #1
  4088cc:	f898 2000 	ldrb.w	r2, [r8]
  4088d0:	e5c8      	b.n	408464 <_vfiprintf_r+0xe4>
  4088d2:	9608      	str	r6, [sp, #32]
  4088d4:	2800      	cmp	r0, #0
  4088d6:	f040 8393 	bne.w	409000 <_vfiprintf_r+0xc80>
  4088da:	4929      	ldr	r1, [pc, #164]	; (408980 <_vfiprintf_r+0x600>)
  4088dc:	910b      	str	r1, [sp, #44]	; 0x2c
  4088de:	069f      	lsls	r7, r3, #26
  4088e0:	f100 82e8 	bmi.w	408eb4 <_vfiprintf_r+0xb34>
  4088e4:	9807      	ldr	r0, [sp, #28]
  4088e6:	06de      	lsls	r6, r3, #27
  4088e8:	4601      	mov	r1, r0
  4088ea:	f100 8270 	bmi.w	408dce <_vfiprintf_r+0xa4e>
  4088ee:	065d      	lsls	r5, r3, #25
  4088f0:	f140 826d 	bpl.w	408dce <_vfiprintf_r+0xa4e>
  4088f4:	3104      	adds	r1, #4
  4088f6:	8806      	ldrh	r6, [r0, #0]
  4088f8:	9107      	str	r1, [sp, #28]
  4088fa:	2700      	movs	r7, #0
  4088fc:	07d8      	lsls	r0, r3, #31
  4088fe:	f140 8222 	bpl.w	408d46 <_vfiprintf_r+0x9c6>
  408902:	ea56 0107 	orrs.w	r1, r6, r7
  408906:	f000 821e 	beq.w	408d46 <_vfiprintf_r+0x9c6>
  40890a:	2130      	movs	r1, #48	; 0x30
  40890c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  408910:	f043 0302 	orr.w	r3, r3, #2
  408914:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  408918:	2202      	movs	r2, #2
  40891a:	e664      	b.n	4085e6 <_vfiprintf_r+0x266>
  40891c:	9608      	str	r6, [sp, #32]
  40891e:	2800      	cmp	r0, #0
  408920:	f040 836b 	bne.w	408ffa <_vfiprintf_r+0xc7a>
  408924:	4917      	ldr	r1, [pc, #92]	; (408984 <_vfiprintf_r+0x604>)
  408926:	910b      	str	r1, [sp, #44]	; 0x2c
  408928:	e7d9      	b.n	4088de <_vfiprintf_r+0x55e>
  40892a:	9907      	ldr	r1, [sp, #28]
  40892c:	9608      	str	r6, [sp, #32]
  40892e:	680a      	ldr	r2, [r1, #0]
  408930:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  408934:	f04f 0000 	mov.w	r0, #0
  408938:	460a      	mov	r2, r1
  40893a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40893e:	3204      	adds	r2, #4
  408940:	2001      	movs	r0, #1
  408942:	9001      	str	r0, [sp, #4]
  408944:	9207      	str	r2, [sp, #28]
  408946:	9005      	str	r0, [sp, #20]
  408948:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40894c:	9302      	str	r3, [sp, #8]
  40894e:	2400      	movs	r4, #0
  408950:	e670      	b.n	408634 <_vfiprintf_r+0x2b4>
  408952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408956:	f898 2000 	ldrb.w	r2, [r8]
  40895a:	e583      	b.n	408464 <_vfiprintf_r+0xe4>
  40895c:	f898 2000 	ldrb.w	r2, [r8]
  408960:	2a6c      	cmp	r2, #108	; 0x6c
  408962:	bf03      	ittte	eq
  408964:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  408968:	f043 0320 	orreq.w	r3, r3, #32
  40896c:	f108 0801 	addeq.w	r8, r8, #1
  408970:	f043 0310 	orrne.w	r3, r3, #16
  408974:	e576      	b.n	408464 <_vfiprintf_r+0xe4>
  408976:	bf00      	nop
  408978:	0040dfd4 	.word	0x0040dfd4
  40897c:	0040dfe4 	.word	0x0040dfe4
  408980:	0040df98 	.word	0x0040df98
  408984:	0040df84 	.word	0x0040df84
  408988:	9907      	ldr	r1, [sp, #28]
  40898a:	680e      	ldr	r6, [r1, #0]
  40898c:	460a      	mov	r2, r1
  40898e:	2e00      	cmp	r6, #0
  408990:	f102 0204 	add.w	r2, r2, #4
  408994:	f6ff ae0f 	blt.w	4085b6 <_vfiprintf_r+0x236>
  408998:	9207      	str	r2, [sp, #28]
  40899a:	f898 2000 	ldrb.w	r2, [r8]
  40899e:	e561      	b.n	408464 <_vfiprintf_r+0xe4>
  4089a0:	f898 2000 	ldrb.w	r2, [r8]
  4089a4:	2001      	movs	r0, #1
  4089a6:	252b      	movs	r5, #43	; 0x2b
  4089a8:	e55c      	b.n	408464 <_vfiprintf_r+0xe4>
  4089aa:	9907      	ldr	r1, [sp, #28]
  4089ac:	9608      	str	r6, [sp, #32]
  4089ae:	f8d1 b000 	ldr.w	fp, [r1]
  4089b2:	f04f 0200 	mov.w	r2, #0
  4089b6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4089ba:	1d0e      	adds	r6, r1, #4
  4089bc:	f1bb 0f00 	cmp.w	fp, #0
  4089c0:	f000 82e5 	beq.w	408f8e <_vfiprintf_r+0xc0e>
  4089c4:	1c67      	adds	r7, r4, #1
  4089c6:	f000 82c4 	beq.w	408f52 <_vfiprintf_r+0xbd2>
  4089ca:	4622      	mov	r2, r4
  4089cc:	2100      	movs	r1, #0
  4089ce:	4658      	mov	r0, fp
  4089d0:	9301      	str	r3, [sp, #4]
  4089d2:	f002 fba5 	bl	40b120 <memchr>
  4089d6:	9b01      	ldr	r3, [sp, #4]
  4089d8:	2800      	cmp	r0, #0
  4089da:	f000 82e5 	beq.w	408fa8 <_vfiprintf_r+0xc28>
  4089de:	eba0 020b 	sub.w	r2, r0, fp
  4089e2:	9205      	str	r2, [sp, #20]
  4089e4:	9607      	str	r6, [sp, #28]
  4089e6:	9302      	str	r3, [sp, #8]
  4089e8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4089ec:	2400      	movs	r4, #0
  4089ee:	e619      	b.n	408624 <_vfiprintf_r+0x2a4>
  4089f0:	f898 2000 	ldrb.w	r2, [r8]
  4089f4:	2a2a      	cmp	r2, #42	; 0x2a
  4089f6:	f108 0701 	add.w	r7, r8, #1
  4089fa:	f000 82e9 	beq.w	408fd0 <_vfiprintf_r+0xc50>
  4089fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408a02:	2909      	cmp	r1, #9
  408a04:	46b8      	mov	r8, r7
  408a06:	f04f 0400 	mov.w	r4, #0
  408a0a:	f63f ad2d 	bhi.w	408468 <_vfiprintf_r+0xe8>
  408a0e:	f818 2b01 	ldrb.w	r2, [r8], #1
  408a12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  408a16:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  408a1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  408a1e:	2909      	cmp	r1, #9
  408a20:	d9f5      	bls.n	408a0e <_vfiprintf_r+0x68e>
  408a22:	e521      	b.n	408468 <_vfiprintf_r+0xe8>
  408a24:	f043 0320 	orr.w	r3, r3, #32
  408a28:	f898 2000 	ldrb.w	r2, [r8]
  408a2c:	e51a      	b.n	408464 <_vfiprintf_r+0xe4>
  408a2e:	9608      	str	r6, [sp, #32]
  408a30:	2800      	cmp	r0, #0
  408a32:	f040 82db 	bne.w	408fec <_vfiprintf_r+0xc6c>
  408a36:	2a00      	cmp	r2, #0
  408a38:	f000 80e7 	beq.w	408c0a <_vfiprintf_r+0x88a>
  408a3c:	2101      	movs	r1, #1
  408a3e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  408a42:	f04f 0200 	mov.w	r2, #0
  408a46:	9101      	str	r1, [sp, #4]
  408a48:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408a4c:	9105      	str	r1, [sp, #20]
  408a4e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408a52:	e77b      	b.n	40894c <_vfiprintf_r+0x5cc>
  408a54:	9a07      	ldr	r2, [sp, #28]
  408a56:	6813      	ldr	r3, [r2, #0]
  408a58:	3204      	adds	r2, #4
  408a5a:	9207      	str	r2, [sp, #28]
  408a5c:	9a03      	ldr	r2, [sp, #12]
  408a5e:	601a      	str	r2, [r3, #0]
  408a60:	e4cb      	b.n	4083fa <_vfiprintf_r+0x7a>
  408a62:	aa0f      	add	r2, sp, #60	; 0x3c
  408a64:	9904      	ldr	r1, [sp, #16]
  408a66:	4620      	mov	r0, r4
  408a68:	f7ff fc4a 	bl	408300 <__sprint_r.part.0>
  408a6c:	2800      	cmp	r0, #0
  408a6e:	f040 8139 	bne.w	408ce4 <_vfiprintf_r+0x964>
  408a72:	9910      	ldr	r1, [sp, #64]	; 0x40
  408a74:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a76:	f101 0c01 	add.w	ip, r1, #1
  408a7a:	46ce      	mov	lr, r9
  408a7c:	e5ff      	b.n	40867e <_vfiprintf_r+0x2fe>
  408a7e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408a80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408a82:	1c48      	adds	r0, r1, #1
  408a84:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408a88:	2d00      	cmp	r5, #0
  408a8a:	f43f ae22 	beq.w	4086d2 <_vfiprintf_r+0x352>
  408a8e:	3201      	adds	r2, #1
  408a90:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  408a94:	2101      	movs	r1, #1
  408a96:	2807      	cmp	r0, #7
  408a98:	9211      	str	r2, [sp, #68]	; 0x44
  408a9a:	9010      	str	r0, [sp, #64]	; 0x40
  408a9c:	f8ca 5000 	str.w	r5, [sl]
  408aa0:	f8ca 1004 	str.w	r1, [sl, #4]
  408aa4:	f340 8108 	ble.w	408cb8 <_vfiprintf_r+0x938>
  408aa8:	2a00      	cmp	r2, #0
  408aaa:	f040 81bc 	bne.w	408e26 <_vfiprintf_r+0xaa6>
  408aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ab0:	2b00      	cmp	r3, #0
  408ab2:	f43f ae1f 	beq.w	4086f4 <_vfiprintf_r+0x374>
  408ab6:	ab0e      	add	r3, sp, #56	; 0x38
  408ab8:	2202      	movs	r2, #2
  408aba:	4608      	mov	r0, r1
  408abc:	931c      	str	r3, [sp, #112]	; 0x70
  408abe:	921d      	str	r2, [sp, #116]	; 0x74
  408ac0:	46ca      	mov	sl, r9
  408ac2:	4601      	mov	r1, r0
  408ac4:	f10a 0a08 	add.w	sl, sl, #8
  408ac8:	3001      	adds	r0, #1
  408aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408acc:	2b80      	cmp	r3, #128	; 0x80
  408ace:	f43f ae19 	beq.w	408704 <_vfiprintf_r+0x384>
  408ad2:	9b05      	ldr	r3, [sp, #20]
  408ad4:	1ae4      	subs	r4, r4, r3
  408ad6:	2c00      	cmp	r4, #0
  408ad8:	dd2e      	ble.n	408b38 <_vfiprintf_r+0x7b8>
  408ada:	2c10      	cmp	r4, #16
  408adc:	4db3      	ldr	r5, [pc, #716]	; (408dac <_vfiprintf_r+0xa2c>)
  408ade:	dd1e      	ble.n	408b1e <_vfiprintf_r+0x79e>
  408ae0:	46d6      	mov	lr, sl
  408ae2:	2610      	movs	r6, #16
  408ae4:	9f06      	ldr	r7, [sp, #24]
  408ae6:	f8dd a010 	ldr.w	sl, [sp, #16]
  408aea:	e006      	b.n	408afa <_vfiprintf_r+0x77a>
  408aec:	1c88      	adds	r0, r1, #2
  408aee:	f10e 0e08 	add.w	lr, lr, #8
  408af2:	4619      	mov	r1, r3
  408af4:	3c10      	subs	r4, #16
  408af6:	2c10      	cmp	r4, #16
  408af8:	dd10      	ble.n	408b1c <_vfiprintf_r+0x79c>
  408afa:	1c4b      	adds	r3, r1, #1
  408afc:	3210      	adds	r2, #16
  408afe:	2b07      	cmp	r3, #7
  408b00:	9211      	str	r2, [sp, #68]	; 0x44
  408b02:	e88e 0060 	stmia.w	lr, {r5, r6}
  408b06:	9310      	str	r3, [sp, #64]	; 0x40
  408b08:	ddf0      	ble.n	408aec <_vfiprintf_r+0x76c>
  408b0a:	2a00      	cmp	r2, #0
  408b0c:	d165      	bne.n	408bda <_vfiprintf_r+0x85a>
  408b0e:	3c10      	subs	r4, #16
  408b10:	2c10      	cmp	r4, #16
  408b12:	f04f 0001 	mov.w	r0, #1
  408b16:	4611      	mov	r1, r2
  408b18:	46ce      	mov	lr, r9
  408b1a:	dcee      	bgt.n	408afa <_vfiprintf_r+0x77a>
  408b1c:	46f2      	mov	sl, lr
  408b1e:	4422      	add	r2, r4
  408b20:	2807      	cmp	r0, #7
  408b22:	9211      	str	r2, [sp, #68]	; 0x44
  408b24:	f8ca 5000 	str.w	r5, [sl]
  408b28:	f8ca 4004 	str.w	r4, [sl, #4]
  408b2c:	9010      	str	r0, [sp, #64]	; 0x40
  408b2e:	f300 8085 	bgt.w	408c3c <_vfiprintf_r+0x8bc>
  408b32:	f10a 0a08 	add.w	sl, sl, #8
  408b36:	3001      	adds	r0, #1
  408b38:	9905      	ldr	r1, [sp, #20]
  408b3a:	f8ca b000 	str.w	fp, [sl]
  408b3e:	440a      	add	r2, r1
  408b40:	2807      	cmp	r0, #7
  408b42:	9211      	str	r2, [sp, #68]	; 0x44
  408b44:	f8ca 1004 	str.w	r1, [sl, #4]
  408b48:	9010      	str	r0, [sp, #64]	; 0x40
  408b4a:	f340 8082 	ble.w	408c52 <_vfiprintf_r+0x8d2>
  408b4e:	2a00      	cmp	r2, #0
  408b50:	f040 8118 	bne.w	408d84 <_vfiprintf_r+0xa04>
  408b54:	9b02      	ldr	r3, [sp, #8]
  408b56:	9210      	str	r2, [sp, #64]	; 0x40
  408b58:	0758      	lsls	r0, r3, #29
  408b5a:	d535      	bpl.n	408bc8 <_vfiprintf_r+0x848>
  408b5c:	9b08      	ldr	r3, [sp, #32]
  408b5e:	9901      	ldr	r1, [sp, #4]
  408b60:	1a5c      	subs	r4, r3, r1
  408b62:	2c00      	cmp	r4, #0
  408b64:	f340 80e7 	ble.w	408d36 <_vfiprintf_r+0x9b6>
  408b68:	46ca      	mov	sl, r9
  408b6a:	2c10      	cmp	r4, #16
  408b6c:	f340 8218 	ble.w	408fa0 <_vfiprintf_r+0xc20>
  408b70:	9910      	ldr	r1, [sp, #64]	; 0x40
  408b72:	4e8f      	ldr	r6, [pc, #572]	; (408db0 <_vfiprintf_r+0xa30>)
  408b74:	9f06      	ldr	r7, [sp, #24]
  408b76:	f8dd b010 	ldr.w	fp, [sp, #16]
  408b7a:	2510      	movs	r5, #16
  408b7c:	e006      	b.n	408b8c <_vfiprintf_r+0x80c>
  408b7e:	1c88      	adds	r0, r1, #2
  408b80:	f10a 0a08 	add.w	sl, sl, #8
  408b84:	4619      	mov	r1, r3
  408b86:	3c10      	subs	r4, #16
  408b88:	2c10      	cmp	r4, #16
  408b8a:	dd11      	ble.n	408bb0 <_vfiprintf_r+0x830>
  408b8c:	1c4b      	adds	r3, r1, #1
  408b8e:	3210      	adds	r2, #16
  408b90:	2b07      	cmp	r3, #7
  408b92:	9211      	str	r2, [sp, #68]	; 0x44
  408b94:	f8ca 6000 	str.w	r6, [sl]
  408b98:	f8ca 5004 	str.w	r5, [sl, #4]
  408b9c:	9310      	str	r3, [sp, #64]	; 0x40
  408b9e:	ddee      	ble.n	408b7e <_vfiprintf_r+0x7fe>
  408ba0:	bb42      	cbnz	r2, 408bf4 <_vfiprintf_r+0x874>
  408ba2:	3c10      	subs	r4, #16
  408ba4:	2c10      	cmp	r4, #16
  408ba6:	f04f 0001 	mov.w	r0, #1
  408baa:	4611      	mov	r1, r2
  408bac:	46ca      	mov	sl, r9
  408bae:	dced      	bgt.n	408b8c <_vfiprintf_r+0x80c>
  408bb0:	4422      	add	r2, r4
  408bb2:	2807      	cmp	r0, #7
  408bb4:	9211      	str	r2, [sp, #68]	; 0x44
  408bb6:	f8ca 6000 	str.w	r6, [sl]
  408bba:	f8ca 4004 	str.w	r4, [sl, #4]
  408bbe:	9010      	str	r0, [sp, #64]	; 0x40
  408bc0:	dd51      	ble.n	408c66 <_vfiprintf_r+0x8e6>
  408bc2:	2a00      	cmp	r2, #0
  408bc4:	f040 819b 	bne.w	408efe <_vfiprintf_r+0xb7e>
  408bc8:	9b03      	ldr	r3, [sp, #12]
  408bca:	9a08      	ldr	r2, [sp, #32]
  408bcc:	9901      	ldr	r1, [sp, #4]
  408bce:	428a      	cmp	r2, r1
  408bd0:	bfac      	ite	ge
  408bd2:	189b      	addge	r3, r3, r2
  408bd4:	185b      	addlt	r3, r3, r1
  408bd6:	9303      	str	r3, [sp, #12]
  408bd8:	e04e      	b.n	408c78 <_vfiprintf_r+0x8f8>
  408bda:	aa0f      	add	r2, sp, #60	; 0x3c
  408bdc:	4651      	mov	r1, sl
  408bde:	4638      	mov	r0, r7
  408be0:	f7ff fb8e 	bl	408300 <__sprint_r.part.0>
  408be4:	2800      	cmp	r0, #0
  408be6:	f040 813f 	bne.w	408e68 <_vfiprintf_r+0xae8>
  408bea:	9910      	ldr	r1, [sp, #64]	; 0x40
  408bec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408bee:	1c48      	adds	r0, r1, #1
  408bf0:	46ce      	mov	lr, r9
  408bf2:	e77f      	b.n	408af4 <_vfiprintf_r+0x774>
  408bf4:	aa0f      	add	r2, sp, #60	; 0x3c
  408bf6:	4659      	mov	r1, fp
  408bf8:	4638      	mov	r0, r7
  408bfa:	f7ff fb81 	bl	408300 <__sprint_r.part.0>
  408bfe:	b960      	cbnz	r0, 408c1a <_vfiprintf_r+0x89a>
  408c00:	9910      	ldr	r1, [sp, #64]	; 0x40
  408c02:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408c04:	1c48      	adds	r0, r1, #1
  408c06:	46ca      	mov	sl, r9
  408c08:	e7bd      	b.n	408b86 <_vfiprintf_r+0x806>
  408c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  408c0c:	f8dd b010 	ldr.w	fp, [sp, #16]
  408c10:	2b00      	cmp	r3, #0
  408c12:	f040 81d4 	bne.w	408fbe <_vfiprintf_r+0xc3e>
  408c16:	2300      	movs	r3, #0
  408c18:	9310      	str	r3, [sp, #64]	; 0x40
  408c1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  408c1e:	f013 0f01 	tst.w	r3, #1
  408c22:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408c26:	d102      	bne.n	408c2e <_vfiprintf_r+0x8ae>
  408c28:	059a      	lsls	r2, r3, #22
  408c2a:	f140 80de 	bpl.w	408dea <_vfiprintf_r+0xa6a>
  408c2e:	065b      	lsls	r3, r3, #25
  408c30:	f53f acb2 	bmi.w	408598 <_vfiprintf_r+0x218>
  408c34:	9803      	ldr	r0, [sp, #12]
  408c36:	b02d      	add	sp, #180	; 0xb4
  408c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c3c:	2a00      	cmp	r2, #0
  408c3e:	f040 8106 	bne.w	408e4e <_vfiprintf_r+0xace>
  408c42:	9a05      	ldr	r2, [sp, #20]
  408c44:	921d      	str	r2, [sp, #116]	; 0x74
  408c46:	2301      	movs	r3, #1
  408c48:	9211      	str	r2, [sp, #68]	; 0x44
  408c4a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  408c4e:	9310      	str	r3, [sp, #64]	; 0x40
  408c50:	46ca      	mov	sl, r9
  408c52:	f10a 0a08 	add.w	sl, sl, #8
  408c56:	9b02      	ldr	r3, [sp, #8]
  408c58:	0759      	lsls	r1, r3, #29
  408c5a:	d504      	bpl.n	408c66 <_vfiprintf_r+0x8e6>
  408c5c:	9b08      	ldr	r3, [sp, #32]
  408c5e:	9901      	ldr	r1, [sp, #4]
  408c60:	1a5c      	subs	r4, r3, r1
  408c62:	2c00      	cmp	r4, #0
  408c64:	dc81      	bgt.n	408b6a <_vfiprintf_r+0x7ea>
  408c66:	9b03      	ldr	r3, [sp, #12]
  408c68:	9908      	ldr	r1, [sp, #32]
  408c6a:	9801      	ldr	r0, [sp, #4]
  408c6c:	4281      	cmp	r1, r0
  408c6e:	bfac      	ite	ge
  408c70:	185b      	addge	r3, r3, r1
  408c72:	181b      	addlt	r3, r3, r0
  408c74:	9303      	str	r3, [sp, #12]
  408c76:	bb72      	cbnz	r2, 408cd6 <_vfiprintf_r+0x956>
  408c78:	2300      	movs	r3, #0
  408c7a:	9310      	str	r3, [sp, #64]	; 0x40
  408c7c:	46ca      	mov	sl, r9
  408c7e:	f7ff bbbc 	b.w	4083fa <_vfiprintf_r+0x7a>
  408c82:	aa0f      	add	r2, sp, #60	; 0x3c
  408c84:	9904      	ldr	r1, [sp, #16]
  408c86:	4620      	mov	r0, r4
  408c88:	f7ff fb3a 	bl	408300 <__sprint_r.part.0>
  408c8c:	bb50      	cbnz	r0, 408ce4 <_vfiprintf_r+0x964>
  408c8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  408c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408c92:	f101 0e01 	add.w	lr, r1, #1
  408c96:	46cc      	mov	ip, r9
  408c98:	e548      	b.n	40872c <_vfiprintf_r+0x3ac>
  408c9a:	2a00      	cmp	r2, #0
  408c9c:	f040 8140 	bne.w	408f20 <_vfiprintf_r+0xba0>
  408ca0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  408ca4:	2900      	cmp	r1, #0
  408ca6:	f000 811b 	beq.w	408ee0 <_vfiprintf_r+0xb60>
  408caa:	2201      	movs	r2, #1
  408cac:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  408cb0:	4610      	mov	r0, r2
  408cb2:	921d      	str	r2, [sp, #116]	; 0x74
  408cb4:	911c      	str	r1, [sp, #112]	; 0x70
  408cb6:	46ca      	mov	sl, r9
  408cb8:	4601      	mov	r1, r0
  408cba:	f10a 0a08 	add.w	sl, sl, #8
  408cbe:	3001      	adds	r0, #1
  408cc0:	e507      	b.n	4086d2 <_vfiprintf_r+0x352>
  408cc2:	9b02      	ldr	r3, [sp, #8]
  408cc4:	2a01      	cmp	r2, #1
  408cc6:	f000 8098 	beq.w	408dfa <_vfiprintf_r+0xa7a>
  408cca:	2a02      	cmp	r2, #2
  408ccc:	d10d      	bne.n	408cea <_vfiprintf_r+0x96a>
  408cce:	9302      	str	r3, [sp, #8]
  408cd0:	2600      	movs	r6, #0
  408cd2:	2700      	movs	r7, #0
  408cd4:	e5b0      	b.n	408838 <_vfiprintf_r+0x4b8>
  408cd6:	aa0f      	add	r2, sp, #60	; 0x3c
  408cd8:	9904      	ldr	r1, [sp, #16]
  408cda:	9806      	ldr	r0, [sp, #24]
  408cdc:	f7ff fb10 	bl	408300 <__sprint_r.part.0>
  408ce0:	2800      	cmp	r0, #0
  408ce2:	d0c9      	beq.n	408c78 <_vfiprintf_r+0x8f8>
  408ce4:	f8dd b010 	ldr.w	fp, [sp, #16]
  408ce8:	e797      	b.n	408c1a <_vfiprintf_r+0x89a>
  408cea:	9302      	str	r3, [sp, #8]
  408cec:	2600      	movs	r6, #0
  408cee:	2700      	movs	r7, #0
  408cf0:	4649      	mov	r1, r9
  408cf2:	e000      	b.n	408cf6 <_vfiprintf_r+0x976>
  408cf4:	4659      	mov	r1, fp
  408cf6:	08f2      	lsrs	r2, r6, #3
  408cf8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  408cfc:	08f8      	lsrs	r0, r7, #3
  408cfe:	f006 0307 	and.w	r3, r6, #7
  408d02:	4607      	mov	r7, r0
  408d04:	4616      	mov	r6, r2
  408d06:	3330      	adds	r3, #48	; 0x30
  408d08:	ea56 0207 	orrs.w	r2, r6, r7
  408d0c:	f801 3c01 	strb.w	r3, [r1, #-1]
  408d10:	f101 3bff 	add.w	fp, r1, #4294967295
  408d14:	d1ee      	bne.n	408cf4 <_vfiprintf_r+0x974>
  408d16:	9a02      	ldr	r2, [sp, #8]
  408d18:	07d6      	lsls	r6, r2, #31
  408d1a:	f57f ad9d 	bpl.w	408858 <_vfiprintf_r+0x4d8>
  408d1e:	2b30      	cmp	r3, #48	; 0x30
  408d20:	f43f ad9a 	beq.w	408858 <_vfiprintf_r+0x4d8>
  408d24:	3902      	subs	r1, #2
  408d26:	2330      	movs	r3, #48	; 0x30
  408d28:	f80b 3c01 	strb.w	r3, [fp, #-1]
  408d2c:	eba9 0301 	sub.w	r3, r9, r1
  408d30:	9305      	str	r3, [sp, #20]
  408d32:	468b      	mov	fp, r1
  408d34:	e476      	b.n	408624 <_vfiprintf_r+0x2a4>
  408d36:	9b03      	ldr	r3, [sp, #12]
  408d38:	9a08      	ldr	r2, [sp, #32]
  408d3a:	428a      	cmp	r2, r1
  408d3c:	bfac      	ite	ge
  408d3e:	189b      	addge	r3, r3, r2
  408d40:	185b      	addlt	r3, r3, r1
  408d42:	9303      	str	r3, [sp, #12]
  408d44:	e798      	b.n	408c78 <_vfiprintf_r+0x8f8>
  408d46:	2202      	movs	r2, #2
  408d48:	e44d      	b.n	4085e6 <_vfiprintf_r+0x266>
  408d4a:	2f00      	cmp	r7, #0
  408d4c:	bf08      	it	eq
  408d4e:	2e0a      	cmpeq	r6, #10
  408d50:	d352      	bcc.n	408df8 <_vfiprintf_r+0xa78>
  408d52:	46cb      	mov	fp, r9
  408d54:	4630      	mov	r0, r6
  408d56:	4639      	mov	r1, r7
  408d58:	220a      	movs	r2, #10
  408d5a:	2300      	movs	r3, #0
  408d5c:	f003 ff46 	bl	40cbec <__aeabi_uldivmod>
  408d60:	3230      	adds	r2, #48	; 0x30
  408d62:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  408d66:	4630      	mov	r0, r6
  408d68:	4639      	mov	r1, r7
  408d6a:	2300      	movs	r3, #0
  408d6c:	220a      	movs	r2, #10
  408d6e:	f003 ff3d 	bl	40cbec <__aeabi_uldivmod>
  408d72:	4606      	mov	r6, r0
  408d74:	460f      	mov	r7, r1
  408d76:	ea56 0307 	orrs.w	r3, r6, r7
  408d7a:	d1eb      	bne.n	408d54 <_vfiprintf_r+0x9d4>
  408d7c:	e56c      	b.n	408858 <_vfiprintf_r+0x4d8>
  408d7e:	9405      	str	r4, [sp, #20]
  408d80:	46cb      	mov	fp, r9
  408d82:	e44f      	b.n	408624 <_vfiprintf_r+0x2a4>
  408d84:	aa0f      	add	r2, sp, #60	; 0x3c
  408d86:	9904      	ldr	r1, [sp, #16]
  408d88:	9806      	ldr	r0, [sp, #24]
  408d8a:	f7ff fab9 	bl	408300 <__sprint_r.part.0>
  408d8e:	2800      	cmp	r0, #0
  408d90:	d1a8      	bne.n	408ce4 <_vfiprintf_r+0x964>
  408d92:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408d94:	46ca      	mov	sl, r9
  408d96:	e75e      	b.n	408c56 <_vfiprintf_r+0x8d6>
  408d98:	aa0f      	add	r2, sp, #60	; 0x3c
  408d9a:	9904      	ldr	r1, [sp, #16]
  408d9c:	9806      	ldr	r0, [sp, #24]
  408d9e:	f7ff faaf 	bl	408300 <__sprint_r.part.0>
  408da2:	2800      	cmp	r0, #0
  408da4:	d19e      	bne.n	408ce4 <_vfiprintf_r+0x964>
  408da6:	46ca      	mov	sl, r9
  408da8:	f7ff bbc0 	b.w	40852c <_vfiprintf_r+0x1ac>
  408dac:	0040dfe4 	.word	0x0040dfe4
  408db0:	0040dfd4 	.word	0x0040dfd4
  408db4:	3104      	adds	r1, #4
  408db6:	6816      	ldr	r6, [r2, #0]
  408db8:	9107      	str	r1, [sp, #28]
  408dba:	2201      	movs	r2, #1
  408dbc:	2700      	movs	r7, #0
  408dbe:	e412      	b.n	4085e6 <_vfiprintf_r+0x266>
  408dc0:	9807      	ldr	r0, [sp, #28]
  408dc2:	4601      	mov	r1, r0
  408dc4:	3104      	adds	r1, #4
  408dc6:	6806      	ldr	r6, [r0, #0]
  408dc8:	9107      	str	r1, [sp, #28]
  408dca:	2700      	movs	r7, #0
  408dcc:	e40b      	b.n	4085e6 <_vfiprintf_r+0x266>
  408dce:	680e      	ldr	r6, [r1, #0]
  408dd0:	3104      	adds	r1, #4
  408dd2:	9107      	str	r1, [sp, #28]
  408dd4:	2700      	movs	r7, #0
  408dd6:	e591      	b.n	4088fc <_vfiprintf_r+0x57c>
  408dd8:	9907      	ldr	r1, [sp, #28]
  408dda:	680e      	ldr	r6, [r1, #0]
  408ddc:	460a      	mov	r2, r1
  408dde:	17f7      	asrs	r7, r6, #31
  408de0:	3204      	adds	r2, #4
  408de2:	9207      	str	r2, [sp, #28]
  408de4:	4630      	mov	r0, r6
  408de6:	4639      	mov	r1, r7
  408de8:	e50f      	b.n	40880a <_vfiprintf_r+0x48a>
  408dea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408dee:	f001 fe4d 	bl	40aa8c <__retarget_lock_release_recursive>
  408df2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  408df6:	e71a      	b.n	408c2e <_vfiprintf_r+0x8ae>
  408df8:	9b02      	ldr	r3, [sp, #8]
  408dfa:	9302      	str	r3, [sp, #8]
  408dfc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  408e00:	3630      	adds	r6, #48	; 0x30
  408e02:	2301      	movs	r3, #1
  408e04:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  408e08:	9305      	str	r3, [sp, #20]
  408e0a:	e40b      	b.n	408624 <_vfiprintf_r+0x2a4>
  408e0c:	aa0f      	add	r2, sp, #60	; 0x3c
  408e0e:	9904      	ldr	r1, [sp, #16]
  408e10:	9806      	ldr	r0, [sp, #24]
  408e12:	f7ff fa75 	bl	408300 <__sprint_r.part.0>
  408e16:	2800      	cmp	r0, #0
  408e18:	f47f af64 	bne.w	408ce4 <_vfiprintf_r+0x964>
  408e1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  408e1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408e20:	1c48      	adds	r0, r1, #1
  408e22:	46ca      	mov	sl, r9
  408e24:	e651      	b.n	408aca <_vfiprintf_r+0x74a>
  408e26:	aa0f      	add	r2, sp, #60	; 0x3c
  408e28:	9904      	ldr	r1, [sp, #16]
  408e2a:	9806      	ldr	r0, [sp, #24]
  408e2c:	f7ff fa68 	bl	408300 <__sprint_r.part.0>
  408e30:	2800      	cmp	r0, #0
  408e32:	f47f af57 	bne.w	408ce4 <_vfiprintf_r+0x964>
  408e36:	9910      	ldr	r1, [sp, #64]	; 0x40
  408e38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408e3a:	1c48      	adds	r0, r1, #1
  408e3c:	46ca      	mov	sl, r9
  408e3e:	e448      	b.n	4086d2 <_vfiprintf_r+0x352>
  408e40:	2a00      	cmp	r2, #0
  408e42:	f040 8091 	bne.w	408f68 <_vfiprintf_r+0xbe8>
  408e46:	2001      	movs	r0, #1
  408e48:	4611      	mov	r1, r2
  408e4a:	46ca      	mov	sl, r9
  408e4c:	e641      	b.n	408ad2 <_vfiprintf_r+0x752>
  408e4e:	aa0f      	add	r2, sp, #60	; 0x3c
  408e50:	9904      	ldr	r1, [sp, #16]
  408e52:	9806      	ldr	r0, [sp, #24]
  408e54:	f7ff fa54 	bl	408300 <__sprint_r.part.0>
  408e58:	2800      	cmp	r0, #0
  408e5a:	f47f af43 	bne.w	408ce4 <_vfiprintf_r+0x964>
  408e5e:	9810      	ldr	r0, [sp, #64]	; 0x40
  408e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408e62:	3001      	adds	r0, #1
  408e64:	46ca      	mov	sl, r9
  408e66:	e667      	b.n	408b38 <_vfiprintf_r+0x7b8>
  408e68:	46d3      	mov	fp, sl
  408e6a:	e6d6      	b.n	408c1a <_vfiprintf_r+0x89a>
  408e6c:	9e07      	ldr	r6, [sp, #28]
  408e6e:	3607      	adds	r6, #7
  408e70:	f026 0207 	bic.w	r2, r6, #7
  408e74:	f102 0108 	add.w	r1, r2, #8
  408e78:	e9d2 6700 	ldrd	r6, r7, [r2]
  408e7c:	9107      	str	r1, [sp, #28]
  408e7e:	2201      	movs	r2, #1
  408e80:	f7ff bbb1 	b.w	4085e6 <_vfiprintf_r+0x266>
  408e84:	9e07      	ldr	r6, [sp, #28]
  408e86:	3607      	adds	r6, #7
  408e88:	f026 0607 	bic.w	r6, r6, #7
  408e8c:	e9d6 0100 	ldrd	r0, r1, [r6]
  408e90:	f106 0208 	add.w	r2, r6, #8
  408e94:	9207      	str	r2, [sp, #28]
  408e96:	4606      	mov	r6, r0
  408e98:	460f      	mov	r7, r1
  408e9a:	e4b6      	b.n	40880a <_vfiprintf_r+0x48a>
  408e9c:	9e07      	ldr	r6, [sp, #28]
  408e9e:	3607      	adds	r6, #7
  408ea0:	f026 0207 	bic.w	r2, r6, #7
  408ea4:	f102 0108 	add.w	r1, r2, #8
  408ea8:	e9d2 6700 	ldrd	r6, r7, [r2]
  408eac:	9107      	str	r1, [sp, #28]
  408eae:	2200      	movs	r2, #0
  408eb0:	f7ff bb99 	b.w	4085e6 <_vfiprintf_r+0x266>
  408eb4:	9e07      	ldr	r6, [sp, #28]
  408eb6:	3607      	adds	r6, #7
  408eb8:	f026 0107 	bic.w	r1, r6, #7
  408ebc:	f101 0008 	add.w	r0, r1, #8
  408ec0:	9007      	str	r0, [sp, #28]
  408ec2:	e9d1 6700 	ldrd	r6, r7, [r1]
  408ec6:	e519      	b.n	4088fc <_vfiprintf_r+0x57c>
  408ec8:	46cb      	mov	fp, r9
  408eca:	f7ff bbab 	b.w	408624 <_vfiprintf_r+0x2a4>
  408ece:	252d      	movs	r5, #45	; 0x2d
  408ed0:	4276      	negs	r6, r6
  408ed2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  408ed6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408eda:	2201      	movs	r2, #1
  408edc:	f7ff bb88 	b.w	4085f0 <_vfiprintf_r+0x270>
  408ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ee2:	b9b3      	cbnz	r3, 408f12 <_vfiprintf_r+0xb92>
  408ee4:	4611      	mov	r1, r2
  408ee6:	2001      	movs	r0, #1
  408ee8:	46ca      	mov	sl, r9
  408eea:	e5f2      	b.n	408ad2 <_vfiprintf_r+0x752>
  408eec:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  408ef0:	f001 fdcc 	bl	40aa8c <__retarget_lock_release_recursive>
  408ef4:	f04f 33ff 	mov.w	r3, #4294967295
  408ef8:	9303      	str	r3, [sp, #12]
  408efa:	f7ff bb50 	b.w	40859e <_vfiprintf_r+0x21e>
  408efe:	aa0f      	add	r2, sp, #60	; 0x3c
  408f00:	9904      	ldr	r1, [sp, #16]
  408f02:	9806      	ldr	r0, [sp, #24]
  408f04:	f7ff f9fc 	bl	408300 <__sprint_r.part.0>
  408f08:	2800      	cmp	r0, #0
  408f0a:	f47f aeeb 	bne.w	408ce4 <_vfiprintf_r+0x964>
  408f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408f10:	e6a9      	b.n	408c66 <_vfiprintf_r+0x8e6>
  408f12:	ab0e      	add	r3, sp, #56	; 0x38
  408f14:	2202      	movs	r2, #2
  408f16:	931c      	str	r3, [sp, #112]	; 0x70
  408f18:	921d      	str	r2, [sp, #116]	; 0x74
  408f1a:	2001      	movs	r0, #1
  408f1c:	46ca      	mov	sl, r9
  408f1e:	e5d0      	b.n	408ac2 <_vfiprintf_r+0x742>
  408f20:	aa0f      	add	r2, sp, #60	; 0x3c
  408f22:	9904      	ldr	r1, [sp, #16]
  408f24:	9806      	ldr	r0, [sp, #24]
  408f26:	f7ff f9eb 	bl	408300 <__sprint_r.part.0>
  408f2a:	2800      	cmp	r0, #0
  408f2c:	f47f aeda 	bne.w	408ce4 <_vfiprintf_r+0x964>
  408f30:	9910      	ldr	r1, [sp, #64]	; 0x40
  408f32:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408f34:	1c48      	adds	r0, r1, #1
  408f36:	46ca      	mov	sl, r9
  408f38:	e5a4      	b.n	408a84 <_vfiprintf_r+0x704>
  408f3a:	9a07      	ldr	r2, [sp, #28]
  408f3c:	9903      	ldr	r1, [sp, #12]
  408f3e:	6813      	ldr	r3, [r2, #0]
  408f40:	17cd      	asrs	r5, r1, #31
  408f42:	4608      	mov	r0, r1
  408f44:	3204      	adds	r2, #4
  408f46:	4629      	mov	r1, r5
  408f48:	9207      	str	r2, [sp, #28]
  408f4a:	e9c3 0100 	strd	r0, r1, [r3]
  408f4e:	f7ff ba54 	b.w	4083fa <_vfiprintf_r+0x7a>
  408f52:	4658      	mov	r0, fp
  408f54:	9607      	str	r6, [sp, #28]
  408f56:	9302      	str	r3, [sp, #8]
  408f58:	f7fd fcd2 	bl	406900 <strlen>
  408f5c:	2400      	movs	r4, #0
  408f5e:	9005      	str	r0, [sp, #20]
  408f60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408f64:	f7ff bb5e 	b.w	408624 <_vfiprintf_r+0x2a4>
  408f68:	aa0f      	add	r2, sp, #60	; 0x3c
  408f6a:	9904      	ldr	r1, [sp, #16]
  408f6c:	9806      	ldr	r0, [sp, #24]
  408f6e:	f7ff f9c7 	bl	408300 <__sprint_r.part.0>
  408f72:	2800      	cmp	r0, #0
  408f74:	f47f aeb6 	bne.w	408ce4 <_vfiprintf_r+0x964>
  408f78:	9910      	ldr	r1, [sp, #64]	; 0x40
  408f7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408f7c:	1c48      	adds	r0, r1, #1
  408f7e:	46ca      	mov	sl, r9
  408f80:	e5a7      	b.n	408ad2 <_vfiprintf_r+0x752>
  408f82:	9910      	ldr	r1, [sp, #64]	; 0x40
  408f84:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408f86:	4e20      	ldr	r6, [pc, #128]	; (409008 <_vfiprintf_r+0xc88>)
  408f88:	3101      	adds	r1, #1
  408f8a:	f7ff bb90 	b.w	4086ae <_vfiprintf_r+0x32e>
  408f8e:	2c06      	cmp	r4, #6
  408f90:	bf28      	it	cs
  408f92:	2406      	movcs	r4, #6
  408f94:	9405      	str	r4, [sp, #20]
  408f96:	9607      	str	r6, [sp, #28]
  408f98:	9401      	str	r4, [sp, #4]
  408f9a:	f8df b070 	ldr.w	fp, [pc, #112]	; 40900c <_vfiprintf_r+0xc8c>
  408f9e:	e4d5      	b.n	40894c <_vfiprintf_r+0x5cc>
  408fa0:	9810      	ldr	r0, [sp, #64]	; 0x40
  408fa2:	4e19      	ldr	r6, [pc, #100]	; (409008 <_vfiprintf_r+0xc88>)
  408fa4:	3001      	adds	r0, #1
  408fa6:	e603      	b.n	408bb0 <_vfiprintf_r+0x830>
  408fa8:	9405      	str	r4, [sp, #20]
  408faa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408fae:	9607      	str	r6, [sp, #28]
  408fb0:	9302      	str	r3, [sp, #8]
  408fb2:	4604      	mov	r4, r0
  408fb4:	f7ff bb36 	b.w	408624 <_vfiprintf_r+0x2a4>
  408fb8:	4686      	mov	lr, r0
  408fba:	f7ff bbce 	b.w	40875a <_vfiprintf_r+0x3da>
  408fbe:	9806      	ldr	r0, [sp, #24]
  408fc0:	aa0f      	add	r2, sp, #60	; 0x3c
  408fc2:	4659      	mov	r1, fp
  408fc4:	f7ff f99c 	bl	408300 <__sprint_r.part.0>
  408fc8:	2800      	cmp	r0, #0
  408fca:	f43f ae24 	beq.w	408c16 <_vfiprintf_r+0x896>
  408fce:	e624      	b.n	408c1a <_vfiprintf_r+0x89a>
  408fd0:	9907      	ldr	r1, [sp, #28]
  408fd2:	f898 2001 	ldrb.w	r2, [r8, #1]
  408fd6:	680c      	ldr	r4, [r1, #0]
  408fd8:	3104      	adds	r1, #4
  408fda:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  408fde:	46b8      	mov	r8, r7
  408fe0:	9107      	str	r1, [sp, #28]
  408fe2:	f7ff ba3f 	b.w	408464 <_vfiprintf_r+0xe4>
  408fe6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408fea:	e43c      	b.n	408866 <_vfiprintf_r+0x4e6>
  408fec:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408ff0:	e521      	b.n	408a36 <_vfiprintf_r+0x6b6>
  408ff2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408ff6:	f7ff bbf4 	b.w	4087e2 <_vfiprintf_r+0x462>
  408ffa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408ffe:	e491      	b.n	408924 <_vfiprintf_r+0x5a4>
  409000:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  409004:	e469      	b.n	4088da <_vfiprintf_r+0x55a>
  409006:	bf00      	nop
  409008:	0040dfd4 	.word	0x0040dfd4
  40900c:	0040dfac 	.word	0x0040dfac

00409010 <__sbprintf>:
  409010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409014:	460c      	mov	r4, r1
  409016:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40901a:	8989      	ldrh	r1, [r1, #12]
  40901c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40901e:	89e5      	ldrh	r5, [r4, #14]
  409020:	9619      	str	r6, [sp, #100]	; 0x64
  409022:	f021 0102 	bic.w	r1, r1, #2
  409026:	4606      	mov	r6, r0
  409028:	69e0      	ldr	r0, [r4, #28]
  40902a:	f8ad 100c 	strh.w	r1, [sp, #12]
  40902e:	4617      	mov	r7, r2
  409030:	f44f 6180 	mov.w	r1, #1024	; 0x400
  409034:	6a62      	ldr	r2, [r4, #36]	; 0x24
  409036:	f8ad 500e 	strh.w	r5, [sp, #14]
  40903a:	4698      	mov	r8, r3
  40903c:	ad1a      	add	r5, sp, #104	; 0x68
  40903e:	2300      	movs	r3, #0
  409040:	9007      	str	r0, [sp, #28]
  409042:	a816      	add	r0, sp, #88	; 0x58
  409044:	9209      	str	r2, [sp, #36]	; 0x24
  409046:	9306      	str	r3, [sp, #24]
  409048:	9500      	str	r5, [sp, #0]
  40904a:	9504      	str	r5, [sp, #16]
  40904c:	9102      	str	r1, [sp, #8]
  40904e:	9105      	str	r1, [sp, #20]
  409050:	f001 fd16 	bl	40aa80 <__retarget_lock_init_recursive>
  409054:	4643      	mov	r3, r8
  409056:	463a      	mov	r2, r7
  409058:	4669      	mov	r1, sp
  40905a:	4630      	mov	r0, r6
  40905c:	f7ff f990 	bl	408380 <_vfiprintf_r>
  409060:	1e05      	subs	r5, r0, #0
  409062:	db07      	blt.n	409074 <__sbprintf+0x64>
  409064:	4630      	mov	r0, r6
  409066:	4669      	mov	r1, sp
  409068:	f001 f8e8 	bl	40a23c <_fflush_r>
  40906c:	2800      	cmp	r0, #0
  40906e:	bf18      	it	ne
  409070:	f04f 35ff 	movne.w	r5, #4294967295
  409074:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  409078:	065b      	lsls	r3, r3, #25
  40907a:	d503      	bpl.n	409084 <__sbprintf+0x74>
  40907c:	89a3      	ldrh	r3, [r4, #12]
  40907e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409082:	81a3      	strh	r3, [r4, #12]
  409084:	9816      	ldr	r0, [sp, #88]	; 0x58
  409086:	f001 fcfd 	bl	40aa84 <__retarget_lock_close_recursive>
  40908a:	4628      	mov	r0, r5
  40908c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  409090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409094 <__swsetup_r>:
  409094:	b538      	push	{r3, r4, r5, lr}
  409096:	4b30      	ldr	r3, [pc, #192]	; (409158 <__swsetup_r+0xc4>)
  409098:	681b      	ldr	r3, [r3, #0]
  40909a:	4605      	mov	r5, r0
  40909c:	460c      	mov	r4, r1
  40909e:	b113      	cbz	r3, 4090a6 <__swsetup_r+0x12>
  4090a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4090a2:	2a00      	cmp	r2, #0
  4090a4:	d038      	beq.n	409118 <__swsetup_r+0x84>
  4090a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4090aa:	b293      	uxth	r3, r2
  4090ac:	0718      	lsls	r0, r3, #28
  4090ae:	d50c      	bpl.n	4090ca <__swsetup_r+0x36>
  4090b0:	6920      	ldr	r0, [r4, #16]
  4090b2:	b1a8      	cbz	r0, 4090e0 <__swsetup_r+0x4c>
  4090b4:	f013 0201 	ands.w	r2, r3, #1
  4090b8:	d01e      	beq.n	4090f8 <__swsetup_r+0x64>
  4090ba:	6963      	ldr	r3, [r4, #20]
  4090bc:	2200      	movs	r2, #0
  4090be:	425b      	negs	r3, r3
  4090c0:	61a3      	str	r3, [r4, #24]
  4090c2:	60a2      	str	r2, [r4, #8]
  4090c4:	b1f0      	cbz	r0, 409104 <__swsetup_r+0x70>
  4090c6:	2000      	movs	r0, #0
  4090c8:	bd38      	pop	{r3, r4, r5, pc}
  4090ca:	06d9      	lsls	r1, r3, #27
  4090cc:	d53c      	bpl.n	409148 <__swsetup_r+0xb4>
  4090ce:	0758      	lsls	r0, r3, #29
  4090d0:	d426      	bmi.n	409120 <__swsetup_r+0x8c>
  4090d2:	6920      	ldr	r0, [r4, #16]
  4090d4:	f042 0308 	orr.w	r3, r2, #8
  4090d8:	81a3      	strh	r3, [r4, #12]
  4090da:	b29b      	uxth	r3, r3
  4090dc:	2800      	cmp	r0, #0
  4090de:	d1e9      	bne.n	4090b4 <__swsetup_r+0x20>
  4090e0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4090e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4090e8:	d0e4      	beq.n	4090b4 <__swsetup_r+0x20>
  4090ea:	4628      	mov	r0, r5
  4090ec:	4621      	mov	r1, r4
  4090ee:	f001 fcfd 	bl	40aaec <__smakebuf_r>
  4090f2:	89a3      	ldrh	r3, [r4, #12]
  4090f4:	6920      	ldr	r0, [r4, #16]
  4090f6:	e7dd      	b.n	4090b4 <__swsetup_r+0x20>
  4090f8:	0799      	lsls	r1, r3, #30
  4090fa:	bf58      	it	pl
  4090fc:	6962      	ldrpl	r2, [r4, #20]
  4090fe:	60a2      	str	r2, [r4, #8]
  409100:	2800      	cmp	r0, #0
  409102:	d1e0      	bne.n	4090c6 <__swsetup_r+0x32>
  409104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409108:	061a      	lsls	r2, r3, #24
  40910a:	d5dd      	bpl.n	4090c8 <__swsetup_r+0x34>
  40910c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409110:	81a3      	strh	r3, [r4, #12]
  409112:	f04f 30ff 	mov.w	r0, #4294967295
  409116:	bd38      	pop	{r3, r4, r5, pc}
  409118:	4618      	mov	r0, r3
  40911a:	f001 f8e7 	bl	40a2ec <__sinit>
  40911e:	e7c2      	b.n	4090a6 <__swsetup_r+0x12>
  409120:	6b21      	ldr	r1, [r4, #48]	; 0x30
  409122:	b151      	cbz	r1, 40913a <__swsetup_r+0xa6>
  409124:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409128:	4299      	cmp	r1, r3
  40912a:	d004      	beq.n	409136 <__swsetup_r+0xa2>
  40912c:	4628      	mov	r0, r5
  40912e:	f001 fa03 	bl	40a538 <_free_r>
  409132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409136:	2300      	movs	r3, #0
  409138:	6323      	str	r3, [r4, #48]	; 0x30
  40913a:	2300      	movs	r3, #0
  40913c:	6920      	ldr	r0, [r4, #16]
  40913e:	6063      	str	r3, [r4, #4]
  409140:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  409144:	6020      	str	r0, [r4, #0]
  409146:	e7c5      	b.n	4090d4 <__swsetup_r+0x40>
  409148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40914c:	2309      	movs	r3, #9
  40914e:	602b      	str	r3, [r5, #0]
  409150:	f04f 30ff 	mov.w	r0, #4294967295
  409154:	81a2      	strh	r2, [r4, #12]
  409156:	bd38      	pop	{r3, r4, r5, pc}
  409158:	20400028 	.word	0x20400028

0040915c <register_fini>:
  40915c:	4b02      	ldr	r3, [pc, #8]	; (409168 <register_fini+0xc>)
  40915e:	b113      	cbz	r3, 409166 <register_fini+0xa>
  409160:	4802      	ldr	r0, [pc, #8]	; (40916c <register_fini+0x10>)
  409162:	f000 b805 	b.w	409170 <atexit>
  409166:	4770      	bx	lr
  409168:	00000000 	.word	0x00000000
  40916c:	0040a35d 	.word	0x0040a35d

00409170 <atexit>:
  409170:	2300      	movs	r3, #0
  409172:	4601      	mov	r1, r0
  409174:	461a      	mov	r2, r3
  409176:	4618      	mov	r0, r3
  409178:	f002 bf50 	b.w	40c01c <__register_exitproc>

0040917c <quorem>:
  40917c:	6902      	ldr	r2, [r0, #16]
  40917e:	690b      	ldr	r3, [r1, #16]
  409180:	4293      	cmp	r3, r2
  409182:	f300 808d 	bgt.w	4092a0 <quorem+0x124>
  409186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40918a:	f103 38ff 	add.w	r8, r3, #4294967295
  40918e:	f101 0714 	add.w	r7, r1, #20
  409192:	f100 0b14 	add.w	fp, r0, #20
  409196:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40919a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40919e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4091a2:	b083      	sub	sp, #12
  4091a4:	3201      	adds	r2, #1
  4091a6:	fbb3 f9f2 	udiv	r9, r3, r2
  4091aa:	eb0b 0304 	add.w	r3, fp, r4
  4091ae:	9400      	str	r4, [sp, #0]
  4091b0:	eb07 0a04 	add.w	sl, r7, r4
  4091b4:	9301      	str	r3, [sp, #4]
  4091b6:	f1b9 0f00 	cmp.w	r9, #0
  4091ba:	d039      	beq.n	409230 <quorem+0xb4>
  4091bc:	2500      	movs	r5, #0
  4091be:	462e      	mov	r6, r5
  4091c0:	46bc      	mov	ip, r7
  4091c2:	46de      	mov	lr, fp
  4091c4:	f85c 4b04 	ldr.w	r4, [ip], #4
  4091c8:	f8de 3000 	ldr.w	r3, [lr]
  4091cc:	b2a2      	uxth	r2, r4
  4091ce:	fb09 5502 	mla	r5, r9, r2, r5
  4091d2:	0c22      	lsrs	r2, r4, #16
  4091d4:	0c2c      	lsrs	r4, r5, #16
  4091d6:	fb09 4202 	mla	r2, r9, r2, r4
  4091da:	b2ad      	uxth	r5, r5
  4091dc:	1b75      	subs	r5, r6, r5
  4091de:	b296      	uxth	r6, r2
  4091e0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4091e4:	fa15 f383 	uxtah	r3, r5, r3
  4091e8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4091ec:	b29b      	uxth	r3, r3
  4091ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4091f2:	45e2      	cmp	sl, ip
  4091f4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4091f8:	f84e 3b04 	str.w	r3, [lr], #4
  4091fc:	ea4f 4626 	mov.w	r6, r6, asr #16
  409200:	d2e0      	bcs.n	4091c4 <quorem+0x48>
  409202:	9b00      	ldr	r3, [sp, #0]
  409204:	f85b 3003 	ldr.w	r3, [fp, r3]
  409208:	b993      	cbnz	r3, 409230 <quorem+0xb4>
  40920a:	9c01      	ldr	r4, [sp, #4]
  40920c:	1f23      	subs	r3, r4, #4
  40920e:	459b      	cmp	fp, r3
  409210:	d20c      	bcs.n	40922c <quorem+0xb0>
  409212:	f854 3c04 	ldr.w	r3, [r4, #-4]
  409216:	b94b      	cbnz	r3, 40922c <quorem+0xb0>
  409218:	f1a4 0308 	sub.w	r3, r4, #8
  40921c:	e002      	b.n	409224 <quorem+0xa8>
  40921e:	681a      	ldr	r2, [r3, #0]
  409220:	3b04      	subs	r3, #4
  409222:	b91a      	cbnz	r2, 40922c <quorem+0xb0>
  409224:	459b      	cmp	fp, r3
  409226:	f108 38ff 	add.w	r8, r8, #4294967295
  40922a:	d3f8      	bcc.n	40921e <quorem+0xa2>
  40922c:	f8c0 8010 	str.w	r8, [r0, #16]
  409230:	4604      	mov	r4, r0
  409232:	f002 fa63 	bl	40b6fc <__mcmp>
  409236:	2800      	cmp	r0, #0
  409238:	db2e      	blt.n	409298 <quorem+0x11c>
  40923a:	f109 0901 	add.w	r9, r9, #1
  40923e:	465d      	mov	r5, fp
  409240:	2300      	movs	r3, #0
  409242:	f857 1b04 	ldr.w	r1, [r7], #4
  409246:	6828      	ldr	r0, [r5, #0]
  409248:	b28a      	uxth	r2, r1
  40924a:	1a9a      	subs	r2, r3, r2
  40924c:	0c0b      	lsrs	r3, r1, #16
  40924e:	fa12 f280 	uxtah	r2, r2, r0
  409252:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  409256:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40925a:	b292      	uxth	r2, r2
  40925c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409260:	45ba      	cmp	sl, r7
  409262:	f845 2b04 	str.w	r2, [r5], #4
  409266:	ea4f 4323 	mov.w	r3, r3, asr #16
  40926a:	d2ea      	bcs.n	409242 <quorem+0xc6>
  40926c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  409270:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  409274:	b982      	cbnz	r2, 409298 <quorem+0x11c>
  409276:	1f1a      	subs	r2, r3, #4
  409278:	4593      	cmp	fp, r2
  40927a:	d20b      	bcs.n	409294 <quorem+0x118>
  40927c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  409280:	b942      	cbnz	r2, 409294 <quorem+0x118>
  409282:	3b08      	subs	r3, #8
  409284:	e002      	b.n	40928c <quorem+0x110>
  409286:	681a      	ldr	r2, [r3, #0]
  409288:	3b04      	subs	r3, #4
  40928a:	b91a      	cbnz	r2, 409294 <quorem+0x118>
  40928c:	459b      	cmp	fp, r3
  40928e:	f108 38ff 	add.w	r8, r8, #4294967295
  409292:	d3f8      	bcc.n	409286 <quorem+0x10a>
  409294:	f8c4 8010 	str.w	r8, [r4, #16]
  409298:	4648      	mov	r0, r9
  40929a:	b003      	add	sp, #12
  40929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4092a0:	2000      	movs	r0, #0
  4092a2:	4770      	bx	lr
  4092a4:	0000      	movs	r0, r0
	...

004092a8 <_dtoa_r>:
  4092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4092ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4092ae:	b09b      	sub	sp, #108	; 0x6c
  4092b0:	4604      	mov	r4, r0
  4092b2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4092b4:	4692      	mov	sl, r2
  4092b6:	469b      	mov	fp, r3
  4092b8:	b141      	cbz	r1, 4092cc <_dtoa_r+0x24>
  4092ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4092bc:	604a      	str	r2, [r1, #4]
  4092be:	2301      	movs	r3, #1
  4092c0:	4093      	lsls	r3, r2
  4092c2:	608b      	str	r3, [r1, #8]
  4092c4:	f002 f842 	bl	40b34c <_Bfree>
  4092c8:	2300      	movs	r3, #0
  4092ca:	6423      	str	r3, [r4, #64]	; 0x40
  4092cc:	f1bb 0f00 	cmp.w	fp, #0
  4092d0:	465d      	mov	r5, fp
  4092d2:	db35      	blt.n	409340 <_dtoa_r+0x98>
  4092d4:	2300      	movs	r3, #0
  4092d6:	6033      	str	r3, [r6, #0]
  4092d8:	4b9d      	ldr	r3, [pc, #628]	; (409550 <_dtoa_r+0x2a8>)
  4092da:	43ab      	bics	r3, r5
  4092dc:	d015      	beq.n	40930a <_dtoa_r+0x62>
  4092de:	4650      	mov	r0, sl
  4092e0:	4659      	mov	r1, fp
  4092e2:	2200      	movs	r2, #0
  4092e4:	2300      	movs	r3, #0
  4092e6:	f003 fc11 	bl	40cb0c <__aeabi_dcmpeq>
  4092ea:	4680      	mov	r8, r0
  4092ec:	2800      	cmp	r0, #0
  4092ee:	d02d      	beq.n	40934c <_dtoa_r+0xa4>
  4092f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4092f2:	2301      	movs	r3, #1
  4092f4:	6013      	str	r3, [r2, #0]
  4092f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4092f8:	2b00      	cmp	r3, #0
  4092fa:	f000 80bd 	beq.w	409478 <_dtoa_r+0x1d0>
  4092fe:	4895      	ldr	r0, [pc, #596]	; (409554 <_dtoa_r+0x2ac>)
  409300:	6018      	str	r0, [r3, #0]
  409302:	3801      	subs	r0, #1
  409304:	b01b      	add	sp, #108	; 0x6c
  409306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40930a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40930c:	f242 730f 	movw	r3, #9999	; 0x270f
  409310:	6013      	str	r3, [r2, #0]
  409312:	f1ba 0f00 	cmp.w	sl, #0
  409316:	d10d      	bne.n	409334 <_dtoa_r+0x8c>
  409318:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40931c:	b955      	cbnz	r5, 409334 <_dtoa_r+0x8c>
  40931e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409320:	488d      	ldr	r0, [pc, #564]	; (409558 <_dtoa_r+0x2b0>)
  409322:	2b00      	cmp	r3, #0
  409324:	d0ee      	beq.n	409304 <_dtoa_r+0x5c>
  409326:	f100 0308 	add.w	r3, r0, #8
  40932a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40932c:	6013      	str	r3, [r2, #0]
  40932e:	b01b      	add	sp, #108	; 0x6c
  409330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409334:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409336:	4889      	ldr	r0, [pc, #548]	; (40955c <_dtoa_r+0x2b4>)
  409338:	2b00      	cmp	r3, #0
  40933a:	d0e3      	beq.n	409304 <_dtoa_r+0x5c>
  40933c:	1cc3      	adds	r3, r0, #3
  40933e:	e7f4      	b.n	40932a <_dtoa_r+0x82>
  409340:	2301      	movs	r3, #1
  409342:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  409346:	6033      	str	r3, [r6, #0]
  409348:	46ab      	mov	fp, r5
  40934a:	e7c5      	b.n	4092d8 <_dtoa_r+0x30>
  40934c:	aa18      	add	r2, sp, #96	; 0x60
  40934e:	ab19      	add	r3, sp, #100	; 0x64
  409350:	9201      	str	r2, [sp, #4]
  409352:	9300      	str	r3, [sp, #0]
  409354:	4652      	mov	r2, sl
  409356:	465b      	mov	r3, fp
  409358:	4620      	mov	r0, r4
  40935a:	f002 fa6f 	bl	40b83c <__d2b>
  40935e:	0d2b      	lsrs	r3, r5, #20
  409360:	4681      	mov	r9, r0
  409362:	d071      	beq.n	409448 <_dtoa_r+0x1a0>
  409364:	f3cb 0213 	ubfx	r2, fp, #0, #20
  409368:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40936c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40936e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  409372:	4650      	mov	r0, sl
  409374:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  409378:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40937c:	2200      	movs	r2, #0
  40937e:	4b78      	ldr	r3, [pc, #480]	; (409560 <_dtoa_r+0x2b8>)
  409380:	f002 ffa8 	bl	40c2d4 <__aeabi_dsub>
  409384:	a36c      	add	r3, pc, #432	; (adr r3, 409538 <_dtoa_r+0x290>)
  409386:	e9d3 2300 	ldrd	r2, r3, [r3]
  40938a:	f003 f957 	bl	40c63c <__aeabi_dmul>
  40938e:	a36c      	add	r3, pc, #432	; (adr r3, 409540 <_dtoa_r+0x298>)
  409390:	e9d3 2300 	ldrd	r2, r3, [r3]
  409394:	f002 ffa0 	bl	40c2d8 <__adddf3>
  409398:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40939c:	4630      	mov	r0, r6
  40939e:	f003 f8e7 	bl	40c570 <__aeabi_i2d>
  4093a2:	a369      	add	r3, pc, #420	; (adr r3, 409548 <_dtoa_r+0x2a0>)
  4093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4093a8:	f003 f948 	bl	40c63c <__aeabi_dmul>
  4093ac:	4602      	mov	r2, r0
  4093ae:	460b      	mov	r3, r1
  4093b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4093b4:	f002 ff90 	bl	40c2d8 <__adddf3>
  4093b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4093bc:	f003 fbee 	bl	40cb9c <__aeabi_d2iz>
  4093c0:	2200      	movs	r2, #0
  4093c2:	9002      	str	r0, [sp, #8]
  4093c4:	2300      	movs	r3, #0
  4093c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4093ca:	f003 fba9 	bl	40cb20 <__aeabi_dcmplt>
  4093ce:	2800      	cmp	r0, #0
  4093d0:	f040 8173 	bne.w	4096ba <_dtoa_r+0x412>
  4093d4:	9d02      	ldr	r5, [sp, #8]
  4093d6:	2d16      	cmp	r5, #22
  4093d8:	f200 815d 	bhi.w	409696 <_dtoa_r+0x3ee>
  4093dc:	4b61      	ldr	r3, [pc, #388]	; (409564 <_dtoa_r+0x2bc>)
  4093de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4093e2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4093e6:	4652      	mov	r2, sl
  4093e8:	465b      	mov	r3, fp
  4093ea:	f003 fbb7 	bl	40cb5c <__aeabi_dcmpgt>
  4093ee:	2800      	cmp	r0, #0
  4093f0:	f000 81c5 	beq.w	40977e <_dtoa_r+0x4d6>
  4093f4:	1e6b      	subs	r3, r5, #1
  4093f6:	9302      	str	r3, [sp, #8]
  4093f8:	2300      	movs	r3, #0
  4093fa:	930e      	str	r3, [sp, #56]	; 0x38
  4093fc:	1bbf      	subs	r7, r7, r6
  4093fe:	1e7b      	subs	r3, r7, #1
  409400:	9306      	str	r3, [sp, #24]
  409402:	f100 8154 	bmi.w	4096ae <_dtoa_r+0x406>
  409406:	2300      	movs	r3, #0
  409408:	9308      	str	r3, [sp, #32]
  40940a:	9b02      	ldr	r3, [sp, #8]
  40940c:	2b00      	cmp	r3, #0
  40940e:	f2c0 8145 	blt.w	40969c <_dtoa_r+0x3f4>
  409412:	9a06      	ldr	r2, [sp, #24]
  409414:	930d      	str	r3, [sp, #52]	; 0x34
  409416:	4611      	mov	r1, r2
  409418:	4419      	add	r1, r3
  40941a:	2300      	movs	r3, #0
  40941c:	9106      	str	r1, [sp, #24]
  40941e:	930c      	str	r3, [sp, #48]	; 0x30
  409420:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409422:	2b09      	cmp	r3, #9
  409424:	d82a      	bhi.n	40947c <_dtoa_r+0x1d4>
  409426:	2b05      	cmp	r3, #5
  409428:	f340 865b 	ble.w	40a0e2 <_dtoa_r+0xe3a>
  40942c:	3b04      	subs	r3, #4
  40942e:	9324      	str	r3, [sp, #144]	; 0x90
  409430:	2500      	movs	r5, #0
  409432:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409434:	3b02      	subs	r3, #2
  409436:	2b03      	cmp	r3, #3
  409438:	f200 8642 	bhi.w	40a0c0 <_dtoa_r+0xe18>
  40943c:	e8df f013 	tbh	[pc, r3, lsl #1]
  409440:	02c903d4 	.word	0x02c903d4
  409444:	046103df 	.word	0x046103df
  409448:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40944a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40944c:	443e      	add	r6, r7
  40944e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  409452:	2b20      	cmp	r3, #32
  409454:	f340 818e 	ble.w	409774 <_dtoa_r+0x4cc>
  409458:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40945c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  409460:	409d      	lsls	r5, r3
  409462:	fa2a f000 	lsr.w	r0, sl, r0
  409466:	4328      	orrs	r0, r5
  409468:	f003 f872 	bl	40c550 <__aeabi_ui2d>
  40946c:	2301      	movs	r3, #1
  40946e:	3e01      	subs	r6, #1
  409470:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409474:	9314      	str	r3, [sp, #80]	; 0x50
  409476:	e781      	b.n	40937c <_dtoa_r+0xd4>
  409478:	483b      	ldr	r0, [pc, #236]	; (409568 <_dtoa_r+0x2c0>)
  40947a:	e743      	b.n	409304 <_dtoa_r+0x5c>
  40947c:	2100      	movs	r1, #0
  40947e:	6461      	str	r1, [r4, #68]	; 0x44
  409480:	4620      	mov	r0, r4
  409482:	9125      	str	r1, [sp, #148]	; 0x94
  409484:	f001 ff3c 	bl	40b300 <_Balloc>
  409488:	f04f 33ff 	mov.w	r3, #4294967295
  40948c:	930a      	str	r3, [sp, #40]	; 0x28
  40948e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409490:	930f      	str	r3, [sp, #60]	; 0x3c
  409492:	2301      	movs	r3, #1
  409494:	9004      	str	r0, [sp, #16]
  409496:	6420      	str	r0, [r4, #64]	; 0x40
  409498:	9224      	str	r2, [sp, #144]	; 0x90
  40949a:	930b      	str	r3, [sp, #44]	; 0x2c
  40949c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40949e:	2b00      	cmp	r3, #0
  4094a0:	f2c0 80d9 	blt.w	409656 <_dtoa_r+0x3ae>
  4094a4:	9a02      	ldr	r2, [sp, #8]
  4094a6:	2a0e      	cmp	r2, #14
  4094a8:	f300 80d5 	bgt.w	409656 <_dtoa_r+0x3ae>
  4094ac:	4b2d      	ldr	r3, [pc, #180]	; (409564 <_dtoa_r+0x2bc>)
  4094ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4094b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4094ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4094bc:	2b00      	cmp	r3, #0
  4094be:	f2c0 83ba 	blt.w	409c36 <_dtoa_r+0x98e>
  4094c2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4094c6:	4650      	mov	r0, sl
  4094c8:	462a      	mov	r2, r5
  4094ca:	4633      	mov	r3, r6
  4094cc:	4659      	mov	r1, fp
  4094ce:	f003 f9df 	bl	40c890 <__aeabi_ddiv>
  4094d2:	f003 fb63 	bl	40cb9c <__aeabi_d2iz>
  4094d6:	4680      	mov	r8, r0
  4094d8:	f003 f84a 	bl	40c570 <__aeabi_i2d>
  4094dc:	462a      	mov	r2, r5
  4094de:	4633      	mov	r3, r6
  4094e0:	f003 f8ac 	bl	40c63c <__aeabi_dmul>
  4094e4:	460b      	mov	r3, r1
  4094e6:	4602      	mov	r2, r0
  4094e8:	4659      	mov	r1, fp
  4094ea:	4650      	mov	r0, sl
  4094ec:	f002 fef2 	bl	40c2d4 <__aeabi_dsub>
  4094f0:	9d04      	ldr	r5, [sp, #16]
  4094f2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4094f6:	702b      	strb	r3, [r5, #0]
  4094f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4094fa:	2b01      	cmp	r3, #1
  4094fc:	4606      	mov	r6, r0
  4094fe:	460f      	mov	r7, r1
  409500:	f105 0501 	add.w	r5, r5, #1
  409504:	d068      	beq.n	4095d8 <_dtoa_r+0x330>
  409506:	2200      	movs	r2, #0
  409508:	4b18      	ldr	r3, [pc, #96]	; (40956c <_dtoa_r+0x2c4>)
  40950a:	f003 f897 	bl	40c63c <__aeabi_dmul>
  40950e:	2200      	movs	r2, #0
  409510:	2300      	movs	r3, #0
  409512:	4606      	mov	r6, r0
  409514:	460f      	mov	r7, r1
  409516:	f003 faf9 	bl	40cb0c <__aeabi_dcmpeq>
  40951a:	2800      	cmp	r0, #0
  40951c:	f040 8088 	bne.w	409630 <_dtoa_r+0x388>
  409520:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  409524:	f04f 0a00 	mov.w	sl, #0
  409528:	f8df b040 	ldr.w	fp, [pc, #64]	; 40956c <_dtoa_r+0x2c4>
  40952c:	940c      	str	r4, [sp, #48]	; 0x30
  40952e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  409532:	e028      	b.n	409586 <_dtoa_r+0x2de>
  409534:	f3af 8000 	nop.w
  409538:	636f4361 	.word	0x636f4361
  40953c:	3fd287a7 	.word	0x3fd287a7
  409540:	8b60c8b3 	.word	0x8b60c8b3
  409544:	3fc68a28 	.word	0x3fc68a28
  409548:	509f79fb 	.word	0x509f79fb
  40954c:	3fd34413 	.word	0x3fd34413
  409550:	7ff00000 	.word	0x7ff00000
  409554:	0040dd95 	.word	0x0040dd95
  409558:	0040dff4 	.word	0x0040dff4
  40955c:	0040e000 	.word	0x0040e000
  409560:	3ff80000 	.word	0x3ff80000
  409564:	0040e040 	.word	0x0040e040
  409568:	0040dd94 	.word	0x0040dd94
  40956c:	40240000 	.word	0x40240000
  409570:	f003 f864 	bl	40c63c <__aeabi_dmul>
  409574:	2200      	movs	r2, #0
  409576:	2300      	movs	r3, #0
  409578:	4606      	mov	r6, r0
  40957a:	460f      	mov	r7, r1
  40957c:	f003 fac6 	bl	40cb0c <__aeabi_dcmpeq>
  409580:	2800      	cmp	r0, #0
  409582:	f040 83c1 	bne.w	409d08 <_dtoa_r+0xa60>
  409586:	4642      	mov	r2, r8
  409588:	464b      	mov	r3, r9
  40958a:	4630      	mov	r0, r6
  40958c:	4639      	mov	r1, r7
  40958e:	f003 f97f 	bl	40c890 <__aeabi_ddiv>
  409592:	f003 fb03 	bl	40cb9c <__aeabi_d2iz>
  409596:	4604      	mov	r4, r0
  409598:	f002 ffea 	bl	40c570 <__aeabi_i2d>
  40959c:	4642      	mov	r2, r8
  40959e:	464b      	mov	r3, r9
  4095a0:	f003 f84c 	bl	40c63c <__aeabi_dmul>
  4095a4:	4602      	mov	r2, r0
  4095a6:	460b      	mov	r3, r1
  4095a8:	4630      	mov	r0, r6
  4095aa:	4639      	mov	r1, r7
  4095ac:	f002 fe92 	bl	40c2d4 <__aeabi_dsub>
  4095b0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4095b4:	9e04      	ldr	r6, [sp, #16]
  4095b6:	f805 eb01 	strb.w	lr, [r5], #1
  4095ba:	eba5 0e06 	sub.w	lr, r5, r6
  4095be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4095c0:	45b6      	cmp	lr, r6
  4095c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4095c6:	4652      	mov	r2, sl
  4095c8:	465b      	mov	r3, fp
  4095ca:	d1d1      	bne.n	409570 <_dtoa_r+0x2c8>
  4095cc:	46a0      	mov	r8, r4
  4095ce:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4095d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4095d4:	4606      	mov	r6, r0
  4095d6:	460f      	mov	r7, r1
  4095d8:	4632      	mov	r2, r6
  4095da:	463b      	mov	r3, r7
  4095dc:	4630      	mov	r0, r6
  4095de:	4639      	mov	r1, r7
  4095e0:	f002 fe7a 	bl	40c2d8 <__adddf3>
  4095e4:	4606      	mov	r6, r0
  4095e6:	460f      	mov	r7, r1
  4095e8:	4602      	mov	r2, r0
  4095ea:	460b      	mov	r3, r1
  4095ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4095f0:	f003 fa96 	bl	40cb20 <__aeabi_dcmplt>
  4095f4:	b948      	cbnz	r0, 40960a <_dtoa_r+0x362>
  4095f6:	4632      	mov	r2, r6
  4095f8:	463b      	mov	r3, r7
  4095fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4095fe:	f003 fa85 	bl	40cb0c <__aeabi_dcmpeq>
  409602:	b1a8      	cbz	r0, 409630 <_dtoa_r+0x388>
  409604:	f018 0f01 	tst.w	r8, #1
  409608:	d012      	beq.n	409630 <_dtoa_r+0x388>
  40960a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40960e:	9a04      	ldr	r2, [sp, #16]
  409610:	1e6b      	subs	r3, r5, #1
  409612:	e004      	b.n	40961e <_dtoa_r+0x376>
  409614:	429a      	cmp	r2, r3
  409616:	f000 8401 	beq.w	409e1c <_dtoa_r+0xb74>
  40961a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40961e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  409622:	f103 0501 	add.w	r5, r3, #1
  409626:	d0f5      	beq.n	409614 <_dtoa_r+0x36c>
  409628:	f108 0801 	add.w	r8, r8, #1
  40962c:	f883 8000 	strb.w	r8, [r3]
  409630:	4649      	mov	r1, r9
  409632:	4620      	mov	r0, r4
  409634:	f001 fe8a 	bl	40b34c <_Bfree>
  409638:	2200      	movs	r2, #0
  40963a:	9b02      	ldr	r3, [sp, #8]
  40963c:	702a      	strb	r2, [r5, #0]
  40963e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409640:	3301      	adds	r3, #1
  409642:	6013      	str	r3, [r2, #0]
  409644:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  409646:	2b00      	cmp	r3, #0
  409648:	f000 839e 	beq.w	409d88 <_dtoa_r+0xae0>
  40964c:	9804      	ldr	r0, [sp, #16]
  40964e:	601d      	str	r5, [r3, #0]
  409650:	b01b      	add	sp, #108	; 0x6c
  409652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409656:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409658:	2a00      	cmp	r2, #0
  40965a:	d03e      	beq.n	4096da <_dtoa_r+0x432>
  40965c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40965e:	2a01      	cmp	r2, #1
  409660:	f340 8311 	ble.w	409c86 <_dtoa_r+0x9de>
  409664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409668:	1e5f      	subs	r7, r3, #1
  40966a:	42ba      	cmp	r2, r7
  40966c:	f2c0 838f 	blt.w	409d8e <_dtoa_r+0xae6>
  409670:	1bd7      	subs	r7, r2, r7
  409672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409674:	2b00      	cmp	r3, #0
  409676:	f2c0 848b 	blt.w	409f90 <_dtoa_r+0xce8>
  40967a:	9d08      	ldr	r5, [sp, #32]
  40967c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40967e:	9a08      	ldr	r2, [sp, #32]
  409680:	441a      	add	r2, r3
  409682:	9208      	str	r2, [sp, #32]
  409684:	9a06      	ldr	r2, [sp, #24]
  409686:	2101      	movs	r1, #1
  409688:	441a      	add	r2, r3
  40968a:	4620      	mov	r0, r4
  40968c:	9206      	str	r2, [sp, #24]
  40968e:	f001 fef7 	bl	40b480 <__i2b>
  409692:	4606      	mov	r6, r0
  409694:	e024      	b.n	4096e0 <_dtoa_r+0x438>
  409696:	2301      	movs	r3, #1
  409698:	930e      	str	r3, [sp, #56]	; 0x38
  40969a:	e6af      	b.n	4093fc <_dtoa_r+0x154>
  40969c:	9a08      	ldr	r2, [sp, #32]
  40969e:	9b02      	ldr	r3, [sp, #8]
  4096a0:	1ad2      	subs	r2, r2, r3
  4096a2:	425b      	negs	r3, r3
  4096a4:	930c      	str	r3, [sp, #48]	; 0x30
  4096a6:	2300      	movs	r3, #0
  4096a8:	9208      	str	r2, [sp, #32]
  4096aa:	930d      	str	r3, [sp, #52]	; 0x34
  4096ac:	e6b8      	b.n	409420 <_dtoa_r+0x178>
  4096ae:	f1c7 0301 	rsb	r3, r7, #1
  4096b2:	9308      	str	r3, [sp, #32]
  4096b4:	2300      	movs	r3, #0
  4096b6:	9306      	str	r3, [sp, #24]
  4096b8:	e6a7      	b.n	40940a <_dtoa_r+0x162>
  4096ba:	9d02      	ldr	r5, [sp, #8]
  4096bc:	4628      	mov	r0, r5
  4096be:	f002 ff57 	bl	40c570 <__aeabi_i2d>
  4096c2:	4602      	mov	r2, r0
  4096c4:	460b      	mov	r3, r1
  4096c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4096ca:	f003 fa1f 	bl	40cb0c <__aeabi_dcmpeq>
  4096ce:	2800      	cmp	r0, #0
  4096d0:	f47f ae80 	bne.w	4093d4 <_dtoa_r+0x12c>
  4096d4:	1e6b      	subs	r3, r5, #1
  4096d6:	9302      	str	r3, [sp, #8]
  4096d8:	e67c      	b.n	4093d4 <_dtoa_r+0x12c>
  4096da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4096dc:	9d08      	ldr	r5, [sp, #32]
  4096de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4096e0:	2d00      	cmp	r5, #0
  4096e2:	dd0c      	ble.n	4096fe <_dtoa_r+0x456>
  4096e4:	9906      	ldr	r1, [sp, #24]
  4096e6:	2900      	cmp	r1, #0
  4096e8:	460b      	mov	r3, r1
  4096ea:	dd08      	ble.n	4096fe <_dtoa_r+0x456>
  4096ec:	42a9      	cmp	r1, r5
  4096ee:	9a08      	ldr	r2, [sp, #32]
  4096f0:	bfa8      	it	ge
  4096f2:	462b      	movge	r3, r5
  4096f4:	1ad2      	subs	r2, r2, r3
  4096f6:	1aed      	subs	r5, r5, r3
  4096f8:	1acb      	subs	r3, r1, r3
  4096fa:	9208      	str	r2, [sp, #32]
  4096fc:	9306      	str	r3, [sp, #24]
  4096fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409700:	b1d3      	cbz	r3, 409738 <_dtoa_r+0x490>
  409702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409704:	2b00      	cmp	r3, #0
  409706:	f000 82b7 	beq.w	409c78 <_dtoa_r+0x9d0>
  40970a:	2f00      	cmp	r7, #0
  40970c:	dd10      	ble.n	409730 <_dtoa_r+0x488>
  40970e:	4631      	mov	r1, r6
  409710:	463a      	mov	r2, r7
  409712:	4620      	mov	r0, r4
  409714:	f001 ff50 	bl	40b5b8 <__pow5mult>
  409718:	464a      	mov	r2, r9
  40971a:	4601      	mov	r1, r0
  40971c:	4606      	mov	r6, r0
  40971e:	4620      	mov	r0, r4
  409720:	f001 feb8 	bl	40b494 <__multiply>
  409724:	4649      	mov	r1, r9
  409726:	4680      	mov	r8, r0
  409728:	4620      	mov	r0, r4
  40972a:	f001 fe0f 	bl	40b34c <_Bfree>
  40972e:	46c1      	mov	r9, r8
  409730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409732:	1bda      	subs	r2, r3, r7
  409734:	f040 82a1 	bne.w	409c7a <_dtoa_r+0x9d2>
  409738:	2101      	movs	r1, #1
  40973a:	4620      	mov	r0, r4
  40973c:	f001 fea0 	bl	40b480 <__i2b>
  409740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409742:	2b00      	cmp	r3, #0
  409744:	4680      	mov	r8, r0
  409746:	dd1c      	ble.n	409782 <_dtoa_r+0x4da>
  409748:	4601      	mov	r1, r0
  40974a:	461a      	mov	r2, r3
  40974c:	4620      	mov	r0, r4
  40974e:	f001 ff33 	bl	40b5b8 <__pow5mult>
  409752:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409754:	2b01      	cmp	r3, #1
  409756:	4680      	mov	r8, r0
  409758:	f340 8254 	ble.w	409c04 <_dtoa_r+0x95c>
  40975c:	2300      	movs	r3, #0
  40975e:	930c      	str	r3, [sp, #48]	; 0x30
  409760:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409764:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  409768:	6918      	ldr	r0, [r3, #16]
  40976a:	f001 fe39 	bl	40b3e0 <__hi0bits>
  40976e:	f1c0 0020 	rsb	r0, r0, #32
  409772:	e010      	b.n	409796 <_dtoa_r+0x4ee>
  409774:	f1c3 0520 	rsb	r5, r3, #32
  409778:	fa0a f005 	lsl.w	r0, sl, r5
  40977c:	e674      	b.n	409468 <_dtoa_r+0x1c0>
  40977e:	900e      	str	r0, [sp, #56]	; 0x38
  409780:	e63c      	b.n	4093fc <_dtoa_r+0x154>
  409782:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409784:	2b01      	cmp	r3, #1
  409786:	f340 8287 	ble.w	409c98 <_dtoa_r+0x9f0>
  40978a:	2300      	movs	r3, #0
  40978c:	930c      	str	r3, [sp, #48]	; 0x30
  40978e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409790:	2001      	movs	r0, #1
  409792:	2b00      	cmp	r3, #0
  409794:	d1e4      	bne.n	409760 <_dtoa_r+0x4b8>
  409796:	9a06      	ldr	r2, [sp, #24]
  409798:	4410      	add	r0, r2
  40979a:	f010 001f 	ands.w	r0, r0, #31
  40979e:	f000 80a1 	beq.w	4098e4 <_dtoa_r+0x63c>
  4097a2:	f1c0 0320 	rsb	r3, r0, #32
  4097a6:	2b04      	cmp	r3, #4
  4097a8:	f340 849e 	ble.w	40a0e8 <_dtoa_r+0xe40>
  4097ac:	9b08      	ldr	r3, [sp, #32]
  4097ae:	f1c0 001c 	rsb	r0, r0, #28
  4097b2:	4403      	add	r3, r0
  4097b4:	9308      	str	r3, [sp, #32]
  4097b6:	4613      	mov	r3, r2
  4097b8:	4403      	add	r3, r0
  4097ba:	4405      	add	r5, r0
  4097bc:	9306      	str	r3, [sp, #24]
  4097be:	9b08      	ldr	r3, [sp, #32]
  4097c0:	2b00      	cmp	r3, #0
  4097c2:	dd05      	ble.n	4097d0 <_dtoa_r+0x528>
  4097c4:	4649      	mov	r1, r9
  4097c6:	461a      	mov	r2, r3
  4097c8:	4620      	mov	r0, r4
  4097ca:	f001 ff45 	bl	40b658 <__lshift>
  4097ce:	4681      	mov	r9, r0
  4097d0:	9b06      	ldr	r3, [sp, #24]
  4097d2:	2b00      	cmp	r3, #0
  4097d4:	dd05      	ble.n	4097e2 <_dtoa_r+0x53a>
  4097d6:	4641      	mov	r1, r8
  4097d8:	461a      	mov	r2, r3
  4097da:	4620      	mov	r0, r4
  4097dc:	f001 ff3c 	bl	40b658 <__lshift>
  4097e0:	4680      	mov	r8, r0
  4097e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4097e4:	2b00      	cmp	r3, #0
  4097e6:	f040 8086 	bne.w	4098f6 <_dtoa_r+0x64e>
  4097ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4097ec:	2b00      	cmp	r3, #0
  4097ee:	f340 8266 	ble.w	409cbe <_dtoa_r+0xa16>
  4097f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4097f4:	2b00      	cmp	r3, #0
  4097f6:	f000 8098 	beq.w	40992a <_dtoa_r+0x682>
  4097fa:	2d00      	cmp	r5, #0
  4097fc:	dd05      	ble.n	40980a <_dtoa_r+0x562>
  4097fe:	4631      	mov	r1, r6
  409800:	462a      	mov	r2, r5
  409802:	4620      	mov	r0, r4
  409804:	f001 ff28 	bl	40b658 <__lshift>
  409808:	4606      	mov	r6, r0
  40980a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40980c:	2b00      	cmp	r3, #0
  40980e:	f040 8337 	bne.w	409e80 <_dtoa_r+0xbd8>
  409812:	9606      	str	r6, [sp, #24]
  409814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409816:	9a04      	ldr	r2, [sp, #16]
  409818:	f8dd b018 	ldr.w	fp, [sp, #24]
  40981c:	3b01      	subs	r3, #1
  40981e:	18d3      	adds	r3, r2, r3
  409820:	930b      	str	r3, [sp, #44]	; 0x2c
  409822:	f00a 0301 	and.w	r3, sl, #1
  409826:	930c      	str	r3, [sp, #48]	; 0x30
  409828:	4617      	mov	r7, r2
  40982a:	46c2      	mov	sl, r8
  40982c:	4651      	mov	r1, sl
  40982e:	4648      	mov	r0, r9
  409830:	f7ff fca4 	bl	40917c <quorem>
  409834:	4631      	mov	r1, r6
  409836:	4605      	mov	r5, r0
  409838:	4648      	mov	r0, r9
  40983a:	f001 ff5f 	bl	40b6fc <__mcmp>
  40983e:	465a      	mov	r2, fp
  409840:	900a      	str	r0, [sp, #40]	; 0x28
  409842:	4651      	mov	r1, sl
  409844:	4620      	mov	r0, r4
  409846:	f001 ff75 	bl	40b734 <__mdiff>
  40984a:	68c2      	ldr	r2, [r0, #12]
  40984c:	4680      	mov	r8, r0
  40984e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  409852:	2a00      	cmp	r2, #0
  409854:	f040 822b 	bne.w	409cae <_dtoa_r+0xa06>
  409858:	4601      	mov	r1, r0
  40985a:	4648      	mov	r0, r9
  40985c:	9308      	str	r3, [sp, #32]
  40985e:	f001 ff4d 	bl	40b6fc <__mcmp>
  409862:	4641      	mov	r1, r8
  409864:	9006      	str	r0, [sp, #24]
  409866:	4620      	mov	r0, r4
  409868:	f001 fd70 	bl	40b34c <_Bfree>
  40986c:	9a06      	ldr	r2, [sp, #24]
  40986e:	9b08      	ldr	r3, [sp, #32]
  409870:	b932      	cbnz	r2, 409880 <_dtoa_r+0x5d8>
  409872:	9924      	ldr	r1, [sp, #144]	; 0x90
  409874:	b921      	cbnz	r1, 409880 <_dtoa_r+0x5d8>
  409876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409878:	2a00      	cmp	r2, #0
  40987a:	f000 83ef 	beq.w	40a05c <_dtoa_r+0xdb4>
  40987e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  409880:	990a      	ldr	r1, [sp, #40]	; 0x28
  409882:	2900      	cmp	r1, #0
  409884:	f2c0 829f 	blt.w	409dc6 <_dtoa_r+0xb1e>
  409888:	d105      	bne.n	409896 <_dtoa_r+0x5ee>
  40988a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40988c:	b919      	cbnz	r1, 409896 <_dtoa_r+0x5ee>
  40988e:	990c      	ldr	r1, [sp, #48]	; 0x30
  409890:	2900      	cmp	r1, #0
  409892:	f000 8298 	beq.w	409dc6 <_dtoa_r+0xb1e>
  409896:	2a00      	cmp	r2, #0
  409898:	f300 8306 	bgt.w	409ea8 <_dtoa_r+0xc00>
  40989c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40989e:	703b      	strb	r3, [r7, #0]
  4098a0:	f107 0801 	add.w	r8, r7, #1
  4098a4:	4297      	cmp	r7, r2
  4098a6:	4645      	mov	r5, r8
  4098a8:	f000 830c 	beq.w	409ec4 <_dtoa_r+0xc1c>
  4098ac:	4649      	mov	r1, r9
  4098ae:	2300      	movs	r3, #0
  4098b0:	220a      	movs	r2, #10
  4098b2:	4620      	mov	r0, r4
  4098b4:	f001 fd54 	bl	40b360 <__multadd>
  4098b8:	455e      	cmp	r6, fp
  4098ba:	4681      	mov	r9, r0
  4098bc:	4631      	mov	r1, r6
  4098be:	f04f 0300 	mov.w	r3, #0
  4098c2:	f04f 020a 	mov.w	r2, #10
  4098c6:	4620      	mov	r0, r4
  4098c8:	f000 81eb 	beq.w	409ca2 <_dtoa_r+0x9fa>
  4098cc:	f001 fd48 	bl	40b360 <__multadd>
  4098d0:	4659      	mov	r1, fp
  4098d2:	4606      	mov	r6, r0
  4098d4:	2300      	movs	r3, #0
  4098d6:	220a      	movs	r2, #10
  4098d8:	4620      	mov	r0, r4
  4098da:	f001 fd41 	bl	40b360 <__multadd>
  4098de:	4647      	mov	r7, r8
  4098e0:	4683      	mov	fp, r0
  4098e2:	e7a3      	b.n	40982c <_dtoa_r+0x584>
  4098e4:	201c      	movs	r0, #28
  4098e6:	9b08      	ldr	r3, [sp, #32]
  4098e8:	4403      	add	r3, r0
  4098ea:	9308      	str	r3, [sp, #32]
  4098ec:	9b06      	ldr	r3, [sp, #24]
  4098ee:	4403      	add	r3, r0
  4098f0:	4405      	add	r5, r0
  4098f2:	9306      	str	r3, [sp, #24]
  4098f4:	e763      	b.n	4097be <_dtoa_r+0x516>
  4098f6:	4641      	mov	r1, r8
  4098f8:	4648      	mov	r0, r9
  4098fa:	f001 feff 	bl	40b6fc <__mcmp>
  4098fe:	2800      	cmp	r0, #0
  409900:	f6bf af73 	bge.w	4097ea <_dtoa_r+0x542>
  409904:	9f02      	ldr	r7, [sp, #8]
  409906:	4649      	mov	r1, r9
  409908:	2300      	movs	r3, #0
  40990a:	220a      	movs	r2, #10
  40990c:	4620      	mov	r0, r4
  40990e:	3f01      	subs	r7, #1
  409910:	9702      	str	r7, [sp, #8]
  409912:	f001 fd25 	bl	40b360 <__multadd>
  409916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409918:	4681      	mov	r9, r0
  40991a:	2b00      	cmp	r3, #0
  40991c:	f040 83b6 	bne.w	40a08c <_dtoa_r+0xde4>
  409920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409922:	2b00      	cmp	r3, #0
  409924:	f340 83bf 	ble.w	40a0a6 <_dtoa_r+0xdfe>
  409928:	930a      	str	r3, [sp, #40]	; 0x28
  40992a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40992e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  409930:	465d      	mov	r5, fp
  409932:	e002      	b.n	40993a <_dtoa_r+0x692>
  409934:	f001 fd14 	bl	40b360 <__multadd>
  409938:	4681      	mov	r9, r0
  40993a:	4641      	mov	r1, r8
  40993c:	4648      	mov	r0, r9
  40993e:	f7ff fc1d 	bl	40917c <quorem>
  409942:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  409946:	f805 ab01 	strb.w	sl, [r5], #1
  40994a:	eba5 030b 	sub.w	r3, r5, fp
  40994e:	42bb      	cmp	r3, r7
  409950:	f04f 020a 	mov.w	r2, #10
  409954:	f04f 0300 	mov.w	r3, #0
  409958:	4649      	mov	r1, r9
  40995a:	4620      	mov	r0, r4
  40995c:	dbea      	blt.n	409934 <_dtoa_r+0x68c>
  40995e:	9b04      	ldr	r3, [sp, #16]
  409960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409962:	2a01      	cmp	r2, #1
  409964:	bfac      	ite	ge
  409966:	189b      	addge	r3, r3, r2
  409968:	3301      	addlt	r3, #1
  40996a:	461d      	mov	r5, r3
  40996c:	f04f 0b00 	mov.w	fp, #0
  409970:	4649      	mov	r1, r9
  409972:	2201      	movs	r2, #1
  409974:	4620      	mov	r0, r4
  409976:	f001 fe6f 	bl	40b658 <__lshift>
  40997a:	4641      	mov	r1, r8
  40997c:	4681      	mov	r9, r0
  40997e:	f001 febd 	bl	40b6fc <__mcmp>
  409982:	2800      	cmp	r0, #0
  409984:	f340 823d 	ble.w	409e02 <_dtoa_r+0xb5a>
  409988:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40998c:	9904      	ldr	r1, [sp, #16]
  40998e:	1e6b      	subs	r3, r5, #1
  409990:	e004      	b.n	40999c <_dtoa_r+0x6f4>
  409992:	428b      	cmp	r3, r1
  409994:	f000 81ae 	beq.w	409cf4 <_dtoa_r+0xa4c>
  409998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40999c:	2a39      	cmp	r2, #57	; 0x39
  40999e:	f103 0501 	add.w	r5, r3, #1
  4099a2:	d0f6      	beq.n	409992 <_dtoa_r+0x6ea>
  4099a4:	3201      	adds	r2, #1
  4099a6:	701a      	strb	r2, [r3, #0]
  4099a8:	4641      	mov	r1, r8
  4099aa:	4620      	mov	r0, r4
  4099ac:	f001 fcce 	bl	40b34c <_Bfree>
  4099b0:	2e00      	cmp	r6, #0
  4099b2:	f43f ae3d 	beq.w	409630 <_dtoa_r+0x388>
  4099b6:	f1bb 0f00 	cmp.w	fp, #0
  4099ba:	d005      	beq.n	4099c8 <_dtoa_r+0x720>
  4099bc:	45b3      	cmp	fp, r6
  4099be:	d003      	beq.n	4099c8 <_dtoa_r+0x720>
  4099c0:	4659      	mov	r1, fp
  4099c2:	4620      	mov	r0, r4
  4099c4:	f001 fcc2 	bl	40b34c <_Bfree>
  4099c8:	4631      	mov	r1, r6
  4099ca:	4620      	mov	r0, r4
  4099cc:	f001 fcbe 	bl	40b34c <_Bfree>
  4099d0:	e62e      	b.n	409630 <_dtoa_r+0x388>
  4099d2:	2300      	movs	r3, #0
  4099d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4099d6:	9b02      	ldr	r3, [sp, #8]
  4099d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4099da:	4413      	add	r3, r2
  4099dc:	930f      	str	r3, [sp, #60]	; 0x3c
  4099de:	3301      	adds	r3, #1
  4099e0:	2b01      	cmp	r3, #1
  4099e2:	461f      	mov	r7, r3
  4099e4:	461e      	mov	r6, r3
  4099e6:	930a      	str	r3, [sp, #40]	; 0x28
  4099e8:	bfb8      	it	lt
  4099ea:	2701      	movlt	r7, #1
  4099ec:	2100      	movs	r1, #0
  4099ee:	2f17      	cmp	r7, #23
  4099f0:	6461      	str	r1, [r4, #68]	; 0x44
  4099f2:	d90a      	bls.n	409a0a <_dtoa_r+0x762>
  4099f4:	2201      	movs	r2, #1
  4099f6:	2304      	movs	r3, #4
  4099f8:	005b      	lsls	r3, r3, #1
  4099fa:	f103 0014 	add.w	r0, r3, #20
  4099fe:	4287      	cmp	r7, r0
  409a00:	4611      	mov	r1, r2
  409a02:	f102 0201 	add.w	r2, r2, #1
  409a06:	d2f7      	bcs.n	4099f8 <_dtoa_r+0x750>
  409a08:	6461      	str	r1, [r4, #68]	; 0x44
  409a0a:	4620      	mov	r0, r4
  409a0c:	f001 fc78 	bl	40b300 <_Balloc>
  409a10:	2e0e      	cmp	r6, #14
  409a12:	9004      	str	r0, [sp, #16]
  409a14:	6420      	str	r0, [r4, #64]	; 0x40
  409a16:	f63f ad41 	bhi.w	40949c <_dtoa_r+0x1f4>
  409a1a:	2d00      	cmp	r5, #0
  409a1c:	f43f ad3e 	beq.w	40949c <_dtoa_r+0x1f4>
  409a20:	9902      	ldr	r1, [sp, #8]
  409a22:	2900      	cmp	r1, #0
  409a24:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  409a28:	f340 8202 	ble.w	409e30 <_dtoa_r+0xb88>
  409a2c:	4bb8      	ldr	r3, [pc, #736]	; (409d10 <_dtoa_r+0xa68>)
  409a2e:	f001 020f 	and.w	r2, r1, #15
  409a32:	110d      	asrs	r5, r1, #4
  409a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409a38:	06e9      	lsls	r1, r5, #27
  409a3a:	e9d3 6700 	ldrd	r6, r7, [r3]
  409a3e:	f140 81ae 	bpl.w	409d9e <_dtoa_r+0xaf6>
  409a42:	4bb4      	ldr	r3, [pc, #720]	; (409d14 <_dtoa_r+0xa6c>)
  409a44:	4650      	mov	r0, sl
  409a46:	4659      	mov	r1, fp
  409a48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  409a4c:	f002 ff20 	bl	40c890 <__aeabi_ddiv>
  409a50:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  409a54:	f005 050f 	and.w	r5, r5, #15
  409a58:	f04f 0a03 	mov.w	sl, #3
  409a5c:	b18d      	cbz	r5, 409a82 <_dtoa_r+0x7da>
  409a5e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 409d14 <_dtoa_r+0xa6c>
  409a62:	07ea      	lsls	r2, r5, #31
  409a64:	d509      	bpl.n	409a7a <_dtoa_r+0x7d2>
  409a66:	4630      	mov	r0, r6
  409a68:	4639      	mov	r1, r7
  409a6a:	e9d8 2300 	ldrd	r2, r3, [r8]
  409a6e:	f002 fde5 	bl	40c63c <__aeabi_dmul>
  409a72:	f10a 0a01 	add.w	sl, sl, #1
  409a76:	4606      	mov	r6, r0
  409a78:	460f      	mov	r7, r1
  409a7a:	106d      	asrs	r5, r5, #1
  409a7c:	f108 0808 	add.w	r8, r8, #8
  409a80:	d1ef      	bne.n	409a62 <_dtoa_r+0x7ba>
  409a82:	463b      	mov	r3, r7
  409a84:	4632      	mov	r2, r6
  409a86:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  409a8a:	f002 ff01 	bl	40c890 <__aeabi_ddiv>
  409a8e:	4607      	mov	r7, r0
  409a90:	4688      	mov	r8, r1
  409a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409a94:	b143      	cbz	r3, 409aa8 <_dtoa_r+0x800>
  409a96:	2200      	movs	r2, #0
  409a98:	4b9f      	ldr	r3, [pc, #636]	; (409d18 <_dtoa_r+0xa70>)
  409a9a:	4638      	mov	r0, r7
  409a9c:	4641      	mov	r1, r8
  409a9e:	f003 f83f 	bl	40cb20 <__aeabi_dcmplt>
  409aa2:	2800      	cmp	r0, #0
  409aa4:	f040 8286 	bne.w	409fb4 <_dtoa_r+0xd0c>
  409aa8:	4650      	mov	r0, sl
  409aaa:	f002 fd61 	bl	40c570 <__aeabi_i2d>
  409aae:	463a      	mov	r2, r7
  409ab0:	4643      	mov	r3, r8
  409ab2:	f002 fdc3 	bl	40c63c <__aeabi_dmul>
  409ab6:	4b99      	ldr	r3, [pc, #612]	; (409d1c <_dtoa_r+0xa74>)
  409ab8:	2200      	movs	r2, #0
  409aba:	f002 fc0d 	bl	40c2d8 <__adddf3>
  409abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409ac0:	4605      	mov	r5, r0
  409ac2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409ac6:	2b00      	cmp	r3, #0
  409ac8:	f000 813e 	beq.w	409d48 <_dtoa_r+0xaa0>
  409acc:	9b02      	ldr	r3, [sp, #8]
  409ace:	9315      	str	r3, [sp, #84]	; 0x54
  409ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409ad2:	9312      	str	r3, [sp, #72]	; 0x48
  409ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  409ad6:	2b00      	cmp	r3, #0
  409ad8:	f000 81fa 	beq.w	409ed0 <_dtoa_r+0xc28>
  409adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409ade:	4b8c      	ldr	r3, [pc, #560]	; (409d10 <_dtoa_r+0xa68>)
  409ae0:	498f      	ldr	r1, [pc, #572]	; (409d20 <_dtoa_r+0xa78>)
  409ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409ae6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  409aea:	2000      	movs	r0, #0
  409aec:	f002 fed0 	bl	40c890 <__aeabi_ddiv>
  409af0:	462a      	mov	r2, r5
  409af2:	4633      	mov	r3, r6
  409af4:	f002 fbee 	bl	40c2d4 <__aeabi_dsub>
  409af8:	4682      	mov	sl, r0
  409afa:	468b      	mov	fp, r1
  409afc:	4638      	mov	r0, r7
  409afe:	4641      	mov	r1, r8
  409b00:	f003 f84c 	bl	40cb9c <__aeabi_d2iz>
  409b04:	4605      	mov	r5, r0
  409b06:	f002 fd33 	bl	40c570 <__aeabi_i2d>
  409b0a:	4602      	mov	r2, r0
  409b0c:	460b      	mov	r3, r1
  409b0e:	4638      	mov	r0, r7
  409b10:	4641      	mov	r1, r8
  409b12:	f002 fbdf 	bl	40c2d4 <__aeabi_dsub>
  409b16:	3530      	adds	r5, #48	; 0x30
  409b18:	fa5f f885 	uxtb.w	r8, r5
  409b1c:	9d04      	ldr	r5, [sp, #16]
  409b1e:	4606      	mov	r6, r0
  409b20:	460f      	mov	r7, r1
  409b22:	f885 8000 	strb.w	r8, [r5]
  409b26:	4602      	mov	r2, r0
  409b28:	460b      	mov	r3, r1
  409b2a:	4650      	mov	r0, sl
  409b2c:	4659      	mov	r1, fp
  409b2e:	3501      	adds	r5, #1
  409b30:	f003 f814 	bl	40cb5c <__aeabi_dcmpgt>
  409b34:	2800      	cmp	r0, #0
  409b36:	d154      	bne.n	409be2 <_dtoa_r+0x93a>
  409b38:	4632      	mov	r2, r6
  409b3a:	463b      	mov	r3, r7
  409b3c:	2000      	movs	r0, #0
  409b3e:	4976      	ldr	r1, [pc, #472]	; (409d18 <_dtoa_r+0xa70>)
  409b40:	f002 fbc8 	bl	40c2d4 <__aeabi_dsub>
  409b44:	4602      	mov	r2, r0
  409b46:	460b      	mov	r3, r1
  409b48:	4650      	mov	r0, sl
  409b4a:	4659      	mov	r1, fp
  409b4c:	f003 f806 	bl	40cb5c <__aeabi_dcmpgt>
  409b50:	2800      	cmp	r0, #0
  409b52:	f040 8270 	bne.w	40a036 <_dtoa_r+0xd8e>
  409b56:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409b58:	2a01      	cmp	r2, #1
  409b5a:	f000 8111 	beq.w	409d80 <_dtoa_r+0xad8>
  409b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409b60:	9a04      	ldr	r2, [sp, #16]
  409b62:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409b66:	4413      	add	r3, r2
  409b68:	4699      	mov	r9, r3
  409b6a:	e00d      	b.n	409b88 <_dtoa_r+0x8e0>
  409b6c:	2000      	movs	r0, #0
  409b6e:	496a      	ldr	r1, [pc, #424]	; (409d18 <_dtoa_r+0xa70>)
  409b70:	f002 fbb0 	bl	40c2d4 <__aeabi_dsub>
  409b74:	4652      	mov	r2, sl
  409b76:	465b      	mov	r3, fp
  409b78:	f002 ffd2 	bl	40cb20 <__aeabi_dcmplt>
  409b7c:	2800      	cmp	r0, #0
  409b7e:	f040 8258 	bne.w	40a032 <_dtoa_r+0xd8a>
  409b82:	454d      	cmp	r5, r9
  409b84:	f000 80fa 	beq.w	409d7c <_dtoa_r+0xad4>
  409b88:	4650      	mov	r0, sl
  409b8a:	4659      	mov	r1, fp
  409b8c:	2200      	movs	r2, #0
  409b8e:	4b65      	ldr	r3, [pc, #404]	; (409d24 <_dtoa_r+0xa7c>)
  409b90:	f002 fd54 	bl	40c63c <__aeabi_dmul>
  409b94:	2200      	movs	r2, #0
  409b96:	4b63      	ldr	r3, [pc, #396]	; (409d24 <_dtoa_r+0xa7c>)
  409b98:	4682      	mov	sl, r0
  409b9a:	468b      	mov	fp, r1
  409b9c:	4630      	mov	r0, r6
  409b9e:	4639      	mov	r1, r7
  409ba0:	f002 fd4c 	bl	40c63c <__aeabi_dmul>
  409ba4:	460f      	mov	r7, r1
  409ba6:	4606      	mov	r6, r0
  409ba8:	f002 fff8 	bl	40cb9c <__aeabi_d2iz>
  409bac:	4680      	mov	r8, r0
  409bae:	f002 fcdf 	bl	40c570 <__aeabi_i2d>
  409bb2:	4602      	mov	r2, r0
  409bb4:	460b      	mov	r3, r1
  409bb6:	4630      	mov	r0, r6
  409bb8:	4639      	mov	r1, r7
  409bba:	f002 fb8b 	bl	40c2d4 <__aeabi_dsub>
  409bbe:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409bc2:	fa5f f888 	uxtb.w	r8, r8
  409bc6:	4652      	mov	r2, sl
  409bc8:	465b      	mov	r3, fp
  409bca:	f805 8b01 	strb.w	r8, [r5], #1
  409bce:	4606      	mov	r6, r0
  409bd0:	460f      	mov	r7, r1
  409bd2:	f002 ffa5 	bl	40cb20 <__aeabi_dcmplt>
  409bd6:	4632      	mov	r2, r6
  409bd8:	463b      	mov	r3, r7
  409bda:	2800      	cmp	r0, #0
  409bdc:	d0c6      	beq.n	409b6c <_dtoa_r+0x8c4>
  409bde:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409be4:	9302      	str	r3, [sp, #8]
  409be6:	e523      	b.n	409630 <_dtoa_r+0x388>
  409be8:	2300      	movs	r3, #0
  409bea:	930b      	str	r3, [sp, #44]	; 0x2c
  409bec:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409bee:	2b00      	cmp	r3, #0
  409bf0:	f340 80dc 	ble.w	409dac <_dtoa_r+0xb04>
  409bf4:	461f      	mov	r7, r3
  409bf6:	461e      	mov	r6, r3
  409bf8:	930f      	str	r3, [sp, #60]	; 0x3c
  409bfa:	930a      	str	r3, [sp, #40]	; 0x28
  409bfc:	e6f6      	b.n	4099ec <_dtoa_r+0x744>
  409bfe:	2301      	movs	r3, #1
  409c00:	930b      	str	r3, [sp, #44]	; 0x2c
  409c02:	e7f3      	b.n	409bec <_dtoa_r+0x944>
  409c04:	f1ba 0f00 	cmp.w	sl, #0
  409c08:	f47f ada8 	bne.w	40975c <_dtoa_r+0x4b4>
  409c0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  409c10:	2b00      	cmp	r3, #0
  409c12:	f47f adba 	bne.w	40978a <_dtoa_r+0x4e2>
  409c16:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  409c1a:	0d3f      	lsrs	r7, r7, #20
  409c1c:	053f      	lsls	r7, r7, #20
  409c1e:	2f00      	cmp	r7, #0
  409c20:	f000 820d 	beq.w	40a03e <_dtoa_r+0xd96>
  409c24:	9b08      	ldr	r3, [sp, #32]
  409c26:	3301      	adds	r3, #1
  409c28:	9308      	str	r3, [sp, #32]
  409c2a:	9b06      	ldr	r3, [sp, #24]
  409c2c:	3301      	adds	r3, #1
  409c2e:	9306      	str	r3, [sp, #24]
  409c30:	2301      	movs	r3, #1
  409c32:	930c      	str	r3, [sp, #48]	; 0x30
  409c34:	e5ab      	b.n	40978e <_dtoa_r+0x4e6>
  409c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409c38:	2b00      	cmp	r3, #0
  409c3a:	f73f ac42 	bgt.w	4094c2 <_dtoa_r+0x21a>
  409c3e:	f040 8221 	bne.w	40a084 <_dtoa_r+0xddc>
  409c42:	2200      	movs	r2, #0
  409c44:	4b38      	ldr	r3, [pc, #224]	; (409d28 <_dtoa_r+0xa80>)
  409c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409c4a:	f002 fcf7 	bl	40c63c <__aeabi_dmul>
  409c4e:	4652      	mov	r2, sl
  409c50:	465b      	mov	r3, fp
  409c52:	f002 ff79 	bl	40cb48 <__aeabi_dcmpge>
  409c56:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  409c5a:	4646      	mov	r6, r8
  409c5c:	2800      	cmp	r0, #0
  409c5e:	d041      	beq.n	409ce4 <_dtoa_r+0xa3c>
  409c60:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409c62:	9d04      	ldr	r5, [sp, #16]
  409c64:	43db      	mvns	r3, r3
  409c66:	9302      	str	r3, [sp, #8]
  409c68:	4641      	mov	r1, r8
  409c6a:	4620      	mov	r0, r4
  409c6c:	f001 fb6e 	bl	40b34c <_Bfree>
  409c70:	2e00      	cmp	r6, #0
  409c72:	f43f acdd 	beq.w	409630 <_dtoa_r+0x388>
  409c76:	e6a7      	b.n	4099c8 <_dtoa_r+0x720>
  409c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409c7a:	4649      	mov	r1, r9
  409c7c:	4620      	mov	r0, r4
  409c7e:	f001 fc9b 	bl	40b5b8 <__pow5mult>
  409c82:	4681      	mov	r9, r0
  409c84:	e558      	b.n	409738 <_dtoa_r+0x490>
  409c86:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409c88:	2a00      	cmp	r2, #0
  409c8a:	f000 8187 	beq.w	409f9c <_dtoa_r+0xcf4>
  409c8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  409c92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409c94:	9d08      	ldr	r5, [sp, #32]
  409c96:	e4f2      	b.n	40967e <_dtoa_r+0x3d6>
  409c98:	f1ba 0f00 	cmp.w	sl, #0
  409c9c:	f47f ad75 	bne.w	40978a <_dtoa_r+0x4e2>
  409ca0:	e7b4      	b.n	409c0c <_dtoa_r+0x964>
  409ca2:	f001 fb5d 	bl	40b360 <__multadd>
  409ca6:	4647      	mov	r7, r8
  409ca8:	4606      	mov	r6, r0
  409caa:	4683      	mov	fp, r0
  409cac:	e5be      	b.n	40982c <_dtoa_r+0x584>
  409cae:	4601      	mov	r1, r0
  409cb0:	4620      	mov	r0, r4
  409cb2:	9306      	str	r3, [sp, #24]
  409cb4:	f001 fb4a 	bl	40b34c <_Bfree>
  409cb8:	2201      	movs	r2, #1
  409cba:	9b06      	ldr	r3, [sp, #24]
  409cbc:	e5e0      	b.n	409880 <_dtoa_r+0x5d8>
  409cbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409cc0:	2b02      	cmp	r3, #2
  409cc2:	f77f ad96 	ble.w	4097f2 <_dtoa_r+0x54a>
  409cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409cc8:	2b00      	cmp	r3, #0
  409cca:	d1c9      	bne.n	409c60 <_dtoa_r+0x9b8>
  409ccc:	4641      	mov	r1, r8
  409cce:	2205      	movs	r2, #5
  409cd0:	4620      	mov	r0, r4
  409cd2:	f001 fb45 	bl	40b360 <__multadd>
  409cd6:	4601      	mov	r1, r0
  409cd8:	4680      	mov	r8, r0
  409cda:	4648      	mov	r0, r9
  409cdc:	f001 fd0e 	bl	40b6fc <__mcmp>
  409ce0:	2800      	cmp	r0, #0
  409ce2:	ddbd      	ble.n	409c60 <_dtoa_r+0x9b8>
  409ce4:	9a02      	ldr	r2, [sp, #8]
  409ce6:	9904      	ldr	r1, [sp, #16]
  409ce8:	2331      	movs	r3, #49	; 0x31
  409cea:	3201      	adds	r2, #1
  409cec:	9202      	str	r2, [sp, #8]
  409cee:	700b      	strb	r3, [r1, #0]
  409cf0:	1c4d      	adds	r5, r1, #1
  409cf2:	e7b9      	b.n	409c68 <_dtoa_r+0x9c0>
  409cf4:	9a02      	ldr	r2, [sp, #8]
  409cf6:	3201      	adds	r2, #1
  409cf8:	9202      	str	r2, [sp, #8]
  409cfa:	9a04      	ldr	r2, [sp, #16]
  409cfc:	2331      	movs	r3, #49	; 0x31
  409cfe:	7013      	strb	r3, [r2, #0]
  409d00:	e652      	b.n	4099a8 <_dtoa_r+0x700>
  409d02:	2301      	movs	r3, #1
  409d04:	930b      	str	r3, [sp, #44]	; 0x2c
  409d06:	e666      	b.n	4099d6 <_dtoa_r+0x72e>
  409d08:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  409d0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409d0e:	e48f      	b.n	409630 <_dtoa_r+0x388>
  409d10:	0040e040 	.word	0x0040e040
  409d14:	0040e018 	.word	0x0040e018
  409d18:	3ff00000 	.word	0x3ff00000
  409d1c:	401c0000 	.word	0x401c0000
  409d20:	3fe00000 	.word	0x3fe00000
  409d24:	40240000 	.word	0x40240000
  409d28:	40140000 	.word	0x40140000
  409d2c:	4650      	mov	r0, sl
  409d2e:	f002 fc1f 	bl	40c570 <__aeabi_i2d>
  409d32:	463a      	mov	r2, r7
  409d34:	4643      	mov	r3, r8
  409d36:	f002 fc81 	bl	40c63c <__aeabi_dmul>
  409d3a:	2200      	movs	r2, #0
  409d3c:	4bc1      	ldr	r3, [pc, #772]	; (40a044 <_dtoa_r+0xd9c>)
  409d3e:	f002 facb 	bl	40c2d8 <__adddf3>
  409d42:	4605      	mov	r5, r0
  409d44:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409d48:	4641      	mov	r1, r8
  409d4a:	2200      	movs	r2, #0
  409d4c:	4bbe      	ldr	r3, [pc, #760]	; (40a048 <_dtoa_r+0xda0>)
  409d4e:	4638      	mov	r0, r7
  409d50:	f002 fac0 	bl	40c2d4 <__aeabi_dsub>
  409d54:	462a      	mov	r2, r5
  409d56:	4633      	mov	r3, r6
  409d58:	4682      	mov	sl, r0
  409d5a:	468b      	mov	fp, r1
  409d5c:	f002 fefe 	bl	40cb5c <__aeabi_dcmpgt>
  409d60:	4680      	mov	r8, r0
  409d62:	2800      	cmp	r0, #0
  409d64:	f040 8110 	bne.w	409f88 <_dtoa_r+0xce0>
  409d68:	462a      	mov	r2, r5
  409d6a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  409d6e:	4650      	mov	r0, sl
  409d70:	4659      	mov	r1, fp
  409d72:	f002 fed5 	bl	40cb20 <__aeabi_dcmplt>
  409d76:	b118      	cbz	r0, 409d80 <_dtoa_r+0xad8>
  409d78:	4646      	mov	r6, r8
  409d7a:	e771      	b.n	409c60 <_dtoa_r+0x9b8>
  409d7c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409d80:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  409d84:	f7ff bb8a 	b.w	40949c <_dtoa_r+0x1f4>
  409d88:	9804      	ldr	r0, [sp, #16]
  409d8a:	f7ff babb 	b.w	409304 <_dtoa_r+0x5c>
  409d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409d92:	970c      	str	r7, [sp, #48]	; 0x30
  409d94:	1afb      	subs	r3, r7, r3
  409d96:	441a      	add	r2, r3
  409d98:	920d      	str	r2, [sp, #52]	; 0x34
  409d9a:	2700      	movs	r7, #0
  409d9c:	e469      	b.n	409672 <_dtoa_r+0x3ca>
  409d9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  409da2:	f04f 0a02 	mov.w	sl, #2
  409da6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  409daa:	e657      	b.n	409a5c <_dtoa_r+0x7b4>
  409dac:	2100      	movs	r1, #0
  409dae:	2301      	movs	r3, #1
  409db0:	6461      	str	r1, [r4, #68]	; 0x44
  409db2:	4620      	mov	r0, r4
  409db4:	9325      	str	r3, [sp, #148]	; 0x94
  409db6:	f001 faa3 	bl	40b300 <_Balloc>
  409dba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409dbc:	9004      	str	r0, [sp, #16]
  409dbe:	6420      	str	r0, [r4, #64]	; 0x40
  409dc0:	930a      	str	r3, [sp, #40]	; 0x28
  409dc2:	930f      	str	r3, [sp, #60]	; 0x3c
  409dc4:	e629      	b.n	409a1a <_dtoa_r+0x772>
  409dc6:	2a00      	cmp	r2, #0
  409dc8:	46d0      	mov	r8, sl
  409dca:	f8cd b018 	str.w	fp, [sp, #24]
  409dce:	469a      	mov	sl, r3
  409dd0:	dd11      	ble.n	409df6 <_dtoa_r+0xb4e>
  409dd2:	4649      	mov	r1, r9
  409dd4:	2201      	movs	r2, #1
  409dd6:	4620      	mov	r0, r4
  409dd8:	f001 fc3e 	bl	40b658 <__lshift>
  409ddc:	4641      	mov	r1, r8
  409dde:	4681      	mov	r9, r0
  409de0:	f001 fc8c 	bl	40b6fc <__mcmp>
  409de4:	2800      	cmp	r0, #0
  409de6:	f340 8146 	ble.w	40a076 <_dtoa_r+0xdce>
  409dea:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  409dee:	f000 8106 	beq.w	409ffe <_dtoa_r+0xd56>
  409df2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  409df6:	46b3      	mov	fp, r6
  409df8:	f887 a000 	strb.w	sl, [r7]
  409dfc:	1c7d      	adds	r5, r7, #1
  409dfe:	9e06      	ldr	r6, [sp, #24]
  409e00:	e5d2      	b.n	4099a8 <_dtoa_r+0x700>
  409e02:	d104      	bne.n	409e0e <_dtoa_r+0xb66>
  409e04:	f01a 0f01 	tst.w	sl, #1
  409e08:	d001      	beq.n	409e0e <_dtoa_r+0xb66>
  409e0a:	e5bd      	b.n	409988 <_dtoa_r+0x6e0>
  409e0c:	4615      	mov	r5, r2
  409e0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  409e12:	2b30      	cmp	r3, #48	; 0x30
  409e14:	f105 32ff 	add.w	r2, r5, #4294967295
  409e18:	d0f8      	beq.n	409e0c <_dtoa_r+0xb64>
  409e1a:	e5c5      	b.n	4099a8 <_dtoa_r+0x700>
  409e1c:	9904      	ldr	r1, [sp, #16]
  409e1e:	2230      	movs	r2, #48	; 0x30
  409e20:	700a      	strb	r2, [r1, #0]
  409e22:	9a02      	ldr	r2, [sp, #8]
  409e24:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409e28:	3201      	adds	r2, #1
  409e2a:	9202      	str	r2, [sp, #8]
  409e2c:	f7ff bbfc 	b.w	409628 <_dtoa_r+0x380>
  409e30:	f000 80bb 	beq.w	409faa <_dtoa_r+0xd02>
  409e34:	9b02      	ldr	r3, [sp, #8]
  409e36:	425d      	negs	r5, r3
  409e38:	4b84      	ldr	r3, [pc, #528]	; (40a04c <_dtoa_r+0xda4>)
  409e3a:	f005 020f 	and.w	r2, r5, #15
  409e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409e42:	e9d3 2300 	ldrd	r2, r3, [r3]
  409e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409e4a:	f002 fbf7 	bl	40c63c <__aeabi_dmul>
  409e4e:	112d      	asrs	r5, r5, #4
  409e50:	4607      	mov	r7, r0
  409e52:	4688      	mov	r8, r1
  409e54:	f000 812c 	beq.w	40a0b0 <_dtoa_r+0xe08>
  409e58:	4e7d      	ldr	r6, [pc, #500]	; (40a050 <_dtoa_r+0xda8>)
  409e5a:	f04f 0a02 	mov.w	sl, #2
  409e5e:	07eb      	lsls	r3, r5, #31
  409e60:	d509      	bpl.n	409e76 <_dtoa_r+0xbce>
  409e62:	4638      	mov	r0, r7
  409e64:	4641      	mov	r1, r8
  409e66:	e9d6 2300 	ldrd	r2, r3, [r6]
  409e6a:	f002 fbe7 	bl	40c63c <__aeabi_dmul>
  409e6e:	f10a 0a01 	add.w	sl, sl, #1
  409e72:	4607      	mov	r7, r0
  409e74:	4688      	mov	r8, r1
  409e76:	106d      	asrs	r5, r5, #1
  409e78:	f106 0608 	add.w	r6, r6, #8
  409e7c:	d1ef      	bne.n	409e5e <_dtoa_r+0xbb6>
  409e7e:	e608      	b.n	409a92 <_dtoa_r+0x7ea>
  409e80:	6871      	ldr	r1, [r6, #4]
  409e82:	4620      	mov	r0, r4
  409e84:	f001 fa3c 	bl	40b300 <_Balloc>
  409e88:	6933      	ldr	r3, [r6, #16]
  409e8a:	3302      	adds	r3, #2
  409e8c:	009a      	lsls	r2, r3, #2
  409e8e:	4605      	mov	r5, r0
  409e90:	f106 010c 	add.w	r1, r6, #12
  409e94:	300c      	adds	r0, #12
  409e96:	f7fc f9e3 	bl	406260 <memcpy>
  409e9a:	4629      	mov	r1, r5
  409e9c:	2201      	movs	r2, #1
  409e9e:	4620      	mov	r0, r4
  409ea0:	f001 fbda 	bl	40b658 <__lshift>
  409ea4:	9006      	str	r0, [sp, #24]
  409ea6:	e4b5      	b.n	409814 <_dtoa_r+0x56c>
  409ea8:	2b39      	cmp	r3, #57	; 0x39
  409eaa:	f8cd b018 	str.w	fp, [sp, #24]
  409eae:	46d0      	mov	r8, sl
  409eb0:	f000 80a5 	beq.w	409ffe <_dtoa_r+0xd56>
  409eb4:	f103 0a01 	add.w	sl, r3, #1
  409eb8:	46b3      	mov	fp, r6
  409eba:	f887 a000 	strb.w	sl, [r7]
  409ebe:	1c7d      	adds	r5, r7, #1
  409ec0:	9e06      	ldr	r6, [sp, #24]
  409ec2:	e571      	b.n	4099a8 <_dtoa_r+0x700>
  409ec4:	465a      	mov	r2, fp
  409ec6:	46d0      	mov	r8, sl
  409ec8:	46b3      	mov	fp, r6
  409eca:	469a      	mov	sl, r3
  409ecc:	4616      	mov	r6, r2
  409ece:	e54f      	b.n	409970 <_dtoa_r+0x6c8>
  409ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409ed2:	495e      	ldr	r1, [pc, #376]	; (40a04c <_dtoa_r+0xda4>)
  409ed4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409ed8:	462a      	mov	r2, r5
  409eda:	4633      	mov	r3, r6
  409edc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409ee0:	f002 fbac 	bl	40c63c <__aeabi_dmul>
  409ee4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  409ee8:	4638      	mov	r0, r7
  409eea:	4641      	mov	r1, r8
  409eec:	f002 fe56 	bl	40cb9c <__aeabi_d2iz>
  409ef0:	4605      	mov	r5, r0
  409ef2:	f002 fb3d 	bl	40c570 <__aeabi_i2d>
  409ef6:	460b      	mov	r3, r1
  409ef8:	4602      	mov	r2, r0
  409efa:	4641      	mov	r1, r8
  409efc:	4638      	mov	r0, r7
  409efe:	f002 f9e9 	bl	40c2d4 <__aeabi_dsub>
  409f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409f04:	460f      	mov	r7, r1
  409f06:	9904      	ldr	r1, [sp, #16]
  409f08:	3530      	adds	r5, #48	; 0x30
  409f0a:	2b01      	cmp	r3, #1
  409f0c:	700d      	strb	r5, [r1, #0]
  409f0e:	4606      	mov	r6, r0
  409f10:	f101 0501 	add.w	r5, r1, #1
  409f14:	d026      	beq.n	409f64 <_dtoa_r+0xcbc>
  409f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409f18:	9a04      	ldr	r2, [sp, #16]
  409f1a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40a058 <_dtoa_r+0xdb0>
  409f1e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  409f22:	4413      	add	r3, r2
  409f24:	f04f 0a00 	mov.w	sl, #0
  409f28:	4699      	mov	r9, r3
  409f2a:	4652      	mov	r2, sl
  409f2c:	465b      	mov	r3, fp
  409f2e:	4630      	mov	r0, r6
  409f30:	4639      	mov	r1, r7
  409f32:	f002 fb83 	bl	40c63c <__aeabi_dmul>
  409f36:	460f      	mov	r7, r1
  409f38:	4606      	mov	r6, r0
  409f3a:	f002 fe2f 	bl	40cb9c <__aeabi_d2iz>
  409f3e:	4680      	mov	r8, r0
  409f40:	f002 fb16 	bl	40c570 <__aeabi_i2d>
  409f44:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409f48:	4602      	mov	r2, r0
  409f4a:	460b      	mov	r3, r1
  409f4c:	4630      	mov	r0, r6
  409f4e:	4639      	mov	r1, r7
  409f50:	f002 f9c0 	bl	40c2d4 <__aeabi_dsub>
  409f54:	f805 8b01 	strb.w	r8, [r5], #1
  409f58:	454d      	cmp	r5, r9
  409f5a:	4606      	mov	r6, r0
  409f5c:	460f      	mov	r7, r1
  409f5e:	d1e4      	bne.n	409f2a <_dtoa_r+0xc82>
  409f60:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409f64:	4b3b      	ldr	r3, [pc, #236]	; (40a054 <_dtoa_r+0xdac>)
  409f66:	2200      	movs	r2, #0
  409f68:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  409f6c:	f002 f9b4 	bl	40c2d8 <__adddf3>
  409f70:	4632      	mov	r2, r6
  409f72:	463b      	mov	r3, r7
  409f74:	f002 fdd4 	bl	40cb20 <__aeabi_dcmplt>
  409f78:	2800      	cmp	r0, #0
  409f7a:	d046      	beq.n	40a00a <_dtoa_r+0xd62>
  409f7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409f7e:	9302      	str	r3, [sp, #8]
  409f80:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  409f84:	f7ff bb43 	b.w	40960e <_dtoa_r+0x366>
  409f88:	f04f 0800 	mov.w	r8, #0
  409f8c:	4646      	mov	r6, r8
  409f8e:	e6a9      	b.n	409ce4 <_dtoa_r+0xa3c>
  409f90:	9b08      	ldr	r3, [sp, #32]
  409f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409f94:	1a9d      	subs	r5, r3, r2
  409f96:	2300      	movs	r3, #0
  409f98:	f7ff bb71 	b.w	40967e <_dtoa_r+0x3d6>
  409f9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  409f9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409fa0:	9d08      	ldr	r5, [sp, #32]
  409fa2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  409fa6:	f7ff bb6a 	b.w	40967e <_dtoa_r+0x3d6>
  409faa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  409fae:	f04f 0a02 	mov.w	sl, #2
  409fb2:	e56e      	b.n	409a92 <_dtoa_r+0x7ea>
  409fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409fb6:	2b00      	cmp	r3, #0
  409fb8:	f43f aeb8 	beq.w	409d2c <_dtoa_r+0xa84>
  409fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409fbe:	2b00      	cmp	r3, #0
  409fc0:	f77f aede 	ble.w	409d80 <_dtoa_r+0xad8>
  409fc4:	2200      	movs	r2, #0
  409fc6:	4b24      	ldr	r3, [pc, #144]	; (40a058 <_dtoa_r+0xdb0>)
  409fc8:	4638      	mov	r0, r7
  409fca:	4641      	mov	r1, r8
  409fcc:	f002 fb36 	bl	40c63c <__aeabi_dmul>
  409fd0:	4607      	mov	r7, r0
  409fd2:	4688      	mov	r8, r1
  409fd4:	f10a 0001 	add.w	r0, sl, #1
  409fd8:	f002 faca 	bl	40c570 <__aeabi_i2d>
  409fdc:	463a      	mov	r2, r7
  409fde:	4643      	mov	r3, r8
  409fe0:	f002 fb2c 	bl	40c63c <__aeabi_dmul>
  409fe4:	2200      	movs	r2, #0
  409fe6:	4b17      	ldr	r3, [pc, #92]	; (40a044 <_dtoa_r+0xd9c>)
  409fe8:	f002 f976 	bl	40c2d8 <__adddf3>
  409fec:	9a02      	ldr	r2, [sp, #8]
  409fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409ff0:	9312      	str	r3, [sp, #72]	; 0x48
  409ff2:	3a01      	subs	r2, #1
  409ff4:	4605      	mov	r5, r0
  409ff6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409ffa:	9215      	str	r2, [sp, #84]	; 0x54
  409ffc:	e56a      	b.n	409ad4 <_dtoa_r+0x82c>
  409ffe:	2239      	movs	r2, #57	; 0x39
  40a000:	46b3      	mov	fp, r6
  40a002:	703a      	strb	r2, [r7, #0]
  40a004:	9e06      	ldr	r6, [sp, #24]
  40a006:	1c7d      	adds	r5, r7, #1
  40a008:	e4c0      	b.n	40998c <_dtoa_r+0x6e4>
  40a00a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40a00e:	2000      	movs	r0, #0
  40a010:	4910      	ldr	r1, [pc, #64]	; (40a054 <_dtoa_r+0xdac>)
  40a012:	f002 f95f 	bl	40c2d4 <__aeabi_dsub>
  40a016:	4632      	mov	r2, r6
  40a018:	463b      	mov	r3, r7
  40a01a:	f002 fd9f 	bl	40cb5c <__aeabi_dcmpgt>
  40a01e:	b908      	cbnz	r0, 40a024 <_dtoa_r+0xd7c>
  40a020:	e6ae      	b.n	409d80 <_dtoa_r+0xad8>
  40a022:	4615      	mov	r5, r2
  40a024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40a028:	2b30      	cmp	r3, #48	; 0x30
  40a02a:	f105 32ff 	add.w	r2, r5, #4294967295
  40a02e:	d0f8      	beq.n	40a022 <_dtoa_r+0xd7a>
  40a030:	e5d7      	b.n	409be2 <_dtoa_r+0x93a>
  40a032:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40a036:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a038:	9302      	str	r3, [sp, #8]
  40a03a:	f7ff bae8 	b.w	40960e <_dtoa_r+0x366>
  40a03e:	970c      	str	r7, [sp, #48]	; 0x30
  40a040:	f7ff bba5 	b.w	40978e <_dtoa_r+0x4e6>
  40a044:	401c0000 	.word	0x401c0000
  40a048:	40140000 	.word	0x40140000
  40a04c:	0040e040 	.word	0x0040e040
  40a050:	0040e018 	.word	0x0040e018
  40a054:	3fe00000 	.word	0x3fe00000
  40a058:	40240000 	.word	0x40240000
  40a05c:	2b39      	cmp	r3, #57	; 0x39
  40a05e:	f8cd b018 	str.w	fp, [sp, #24]
  40a062:	46d0      	mov	r8, sl
  40a064:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40a068:	469a      	mov	sl, r3
  40a06a:	d0c8      	beq.n	409ffe <_dtoa_r+0xd56>
  40a06c:	f1bb 0f00 	cmp.w	fp, #0
  40a070:	f73f aebf 	bgt.w	409df2 <_dtoa_r+0xb4a>
  40a074:	e6bf      	b.n	409df6 <_dtoa_r+0xb4e>
  40a076:	f47f aebe 	bne.w	409df6 <_dtoa_r+0xb4e>
  40a07a:	f01a 0f01 	tst.w	sl, #1
  40a07e:	f43f aeba 	beq.w	409df6 <_dtoa_r+0xb4e>
  40a082:	e6b2      	b.n	409dea <_dtoa_r+0xb42>
  40a084:	f04f 0800 	mov.w	r8, #0
  40a088:	4646      	mov	r6, r8
  40a08a:	e5e9      	b.n	409c60 <_dtoa_r+0x9b8>
  40a08c:	4631      	mov	r1, r6
  40a08e:	2300      	movs	r3, #0
  40a090:	220a      	movs	r2, #10
  40a092:	4620      	mov	r0, r4
  40a094:	f001 f964 	bl	40b360 <__multadd>
  40a098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a09a:	2b00      	cmp	r3, #0
  40a09c:	4606      	mov	r6, r0
  40a09e:	dd0a      	ble.n	40a0b6 <_dtoa_r+0xe0e>
  40a0a0:	930a      	str	r3, [sp, #40]	; 0x28
  40a0a2:	f7ff bbaa 	b.w	4097fa <_dtoa_r+0x552>
  40a0a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a0a8:	2b02      	cmp	r3, #2
  40a0aa:	dc23      	bgt.n	40a0f4 <_dtoa_r+0xe4c>
  40a0ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a0ae:	e43b      	b.n	409928 <_dtoa_r+0x680>
  40a0b0:	f04f 0a02 	mov.w	sl, #2
  40a0b4:	e4ed      	b.n	409a92 <_dtoa_r+0x7ea>
  40a0b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a0b8:	2b02      	cmp	r3, #2
  40a0ba:	dc1b      	bgt.n	40a0f4 <_dtoa_r+0xe4c>
  40a0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a0be:	e7ef      	b.n	40a0a0 <_dtoa_r+0xdf8>
  40a0c0:	2500      	movs	r5, #0
  40a0c2:	6465      	str	r5, [r4, #68]	; 0x44
  40a0c4:	4629      	mov	r1, r5
  40a0c6:	4620      	mov	r0, r4
  40a0c8:	f001 f91a 	bl	40b300 <_Balloc>
  40a0cc:	f04f 33ff 	mov.w	r3, #4294967295
  40a0d0:	930a      	str	r3, [sp, #40]	; 0x28
  40a0d2:	930f      	str	r3, [sp, #60]	; 0x3c
  40a0d4:	2301      	movs	r3, #1
  40a0d6:	9004      	str	r0, [sp, #16]
  40a0d8:	9525      	str	r5, [sp, #148]	; 0x94
  40a0da:	6420      	str	r0, [r4, #64]	; 0x40
  40a0dc:	930b      	str	r3, [sp, #44]	; 0x2c
  40a0de:	f7ff b9dd 	b.w	40949c <_dtoa_r+0x1f4>
  40a0e2:	2501      	movs	r5, #1
  40a0e4:	f7ff b9a5 	b.w	409432 <_dtoa_r+0x18a>
  40a0e8:	f43f ab69 	beq.w	4097be <_dtoa_r+0x516>
  40a0ec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40a0f0:	f7ff bbf9 	b.w	4098e6 <_dtoa_r+0x63e>
  40a0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a0f6:	930a      	str	r3, [sp, #40]	; 0x28
  40a0f8:	e5e5      	b.n	409cc6 <_dtoa_r+0xa1e>
  40a0fa:	bf00      	nop

0040a0fc <__sflush_r>:
  40a0fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40a100:	b29a      	uxth	r2, r3
  40a102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a106:	460d      	mov	r5, r1
  40a108:	0711      	lsls	r1, r2, #28
  40a10a:	4680      	mov	r8, r0
  40a10c:	d43a      	bmi.n	40a184 <__sflush_r+0x88>
  40a10e:	686a      	ldr	r2, [r5, #4]
  40a110:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40a114:	2a00      	cmp	r2, #0
  40a116:	81ab      	strh	r3, [r5, #12]
  40a118:	dd6f      	ble.n	40a1fa <__sflush_r+0xfe>
  40a11a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a11c:	2c00      	cmp	r4, #0
  40a11e:	d049      	beq.n	40a1b4 <__sflush_r+0xb8>
  40a120:	2200      	movs	r2, #0
  40a122:	b29b      	uxth	r3, r3
  40a124:	f8d8 6000 	ldr.w	r6, [r8]
  40a128:	f8c8 2000 	str.w	r2, [r8]
  40a12c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40a130:	d067      	beq.n	40a202 <__sflush_r+0x106>
  40a132:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40a134:	075f      	lsls	r7, r3, #29
  40a136:	d505      	bpl.n	40a144 <__sflush_r+0x48>
  40a138:	6869      	ldr	r1, [r5, #4]
  40a13a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40a13c:	1a52      	subs	r2, r2, r1
  40a13e:	b10b      	cbz	r3, 40a144 <__sflush_r+0x48>
  40a140:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40a142:	1ad2      	subs	r2, r2, r3
  40a144:	2300      	movs	r3, #0
  40a146:	69e9      	ldr	r1, [r5, #28]
  40a148:	4640      	mov	r0, r8
  40a14a:	47a0      	blx	r4
  40a14c:	1c44      	adds	r4, r0, #1
  40a14e:	d03c      	beq.n	40a1ca <__sflush_r+0xce>
  40a150:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40a154:	692a      	ldr	r2, [r5, #16]
  40a156:	602a      	str	r2, [r5, #0]
  40a158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40a15c:	2200      	movs	r2, #0
  40a15e:	81ab      	strh	r3, [r5, #12]
  40a160:	04db      	lsls	r3, r3, #19
  40a162:	606a      	str	r2, [r5, #4]
  40a164:	d447      	bmi.n	40a1f6 <__sflush_r+0xfa>
  40a166:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40a168:	f8c8 6000 	str.w	r6, [r8]
  40a16c:	b311      	cbz	r1, 40a1b4 <__sflush_r+0xb8>
  40a16e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40a172:	4299      	cmp	r1, r3
  40a174:	d002      	beq.n	40a17c <__sflush_r+0x80>
  40a176:	4640      	mov	r0, r8
  40a178:	f000 f9de 	bl	40a538 <_free_r>
  40a17c:	2000      	movs	r0, #0
  40a17e:	6328      	str	r0, [r5, #48]	; 0x30
  40a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a184:	692e      	ldr	r6, [r5, #16]
  40a186:	b1ae      	cbz	r6, 40a1b4 <__sflush_r+0xb8>
  40a188:	682c      	ldr	r4, [r5, #0]
  40a18a:	602e      	str	r6, [r5, #0]
  40a18c:	0791      	lsls	r1, r2, #30
  40a18e:	bf0c      	ite	eq
  40a190:	696b      	ldreq	r3, [r5, #20]
  40a192:	2300      	movne	r3, #0
  40a194:	1ba4      	subs	r4, r4, r6
  40a196:	60ab      	str	r3, [r5, #8]
  40a198:	e00a      	b.n	40a1b0 <__sflush_r+0xb4>
  40a19a:	4623      	mov	r3, r4
  40a19c:	4632      	mov	r2, r6
  40a19e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40a1a0:	69e9      	ldr	r1, [r5, #28]
  40a1a2:	4640      	mov	r0, r8
  40a1a4:	47b8      	blx	r7
  40a1a6:	2800      	cmp	r0, #0
  40a1a8:	eba4 0400 	sub.w	r4, r4, r0
  40a1ac:	4406      	add	r6, r0
  40a1ae:	dd04      	ble.n	40a1ba <__sflush_r+0xbe>
  40a1b0:	2c00      	cmp	r4, #0
  40a1b2:	dcf2      	bgt.n	40a19a <__sflush_r+0x9e>
  40a1b4:	2000      	movs	r0, #0
  40a1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a1ba:	89ab      	ldrh	r3, [r5, #12]
  40a1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a1c0:	81ab      	strh	r3, [r5, #12]
  40a1c2:	f04f 30ff 	mov.w	r0, #4294967295
  40a1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a1ca:	f8d8 4000 	ldr.w	r4, [r8]
  40a1ce:	2c1d      	cmp	r4, #29
  40a1d0:	d8f3      	bhi.n	40a1ba <__sflush_r+0xbe>
  40a1d2:	4b19      	ldr	r3, [pc, #100]	; (40a238 <__sflush_r+0x13c>)
  40a1d4:	40e3      	lsrs	r3, r4
  40a1d6:	43db      	mvns	r3, r3
  40a1d8:	f013 0301 	ands.w	r3, r3, #1
  40a1dc:	d1ed      	bne.n	40a1ba <__sflush_r+0xbe>
  40a1de:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40a1e2:	606b      	str	r3, [r5, #4]
  40a1e4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40a1e8:	6929      	ldr	r1, [r5, #16]
  40a1ea:	81ab      	strh	r3, [r5, #12]
  40a1ec:	04da      	lsls	r2, r3, #19
  40a1ee:	6029      	str	r1, [r5, #0]
  40a1f0:	d5b9      	bpl.n	40a166 <__sflush_r+0x6a>
  40a1f2:	2c00      	cmp	r4, #0
  40a1f4:	d1b7      	bne.n	40a166 <__sflush_r+0x6a>
  40a1f6:	6528      	str	r0, [r5, #80]	; 0x50
  40a1f8:	e7b5      	b.n	40a166 <__sflush_r+0x6a>
  40a1fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40a1fc:	2a00      	cmp	r2, #0
  40a1fe:	dc8c      	bgt.n	40a11a <__sflush_r+0x1e>
  40a200:	e7d8      	b.n	40a1b4 <__sflush_r+0xb8>
  40a202:	2301      	movs	r3, #1
  40a204:	69e9      	ldr	r1, [r5, #28]
  40a206:	4640      	mov	r0, r8
  40a208:	47a0      	blx	r4
  40a20a:	1c43      	adds	r3, r0, #1
  40a20c:	4602      	mov	r2, r0
  40a20e:	d002      	beq.n	40a216 <__sflush_r+0x11a>
  40a210:	89ab      	ldrh	r3, [r5, #12]
  40a212:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40a214:	e78e      	b.n	40a134 <__sflush_r+0x38>
  40a216:	f8d8 3000 	ldr.w	r3, [r8]
  40a21a:	2b00      	cmp	r3, #0
  40a21c:	d0f8      	beq.n	40a210 <__sflush_r+0x114>
  40a21e:	2b1d      	cmp	r3, #29
  40a220:	d001      	beq.n	40a226 <__sflush_r+0x12a>
  40a222:	2b16      	cmp	r3, #22
  40a224:	d102      	bne.n	40a22c <__sflush_r+0x130>
  40a226:	f8c8 6000 	str.w	r6, [r8]
  40a22a:	e7c3      	b.n	40a1b4 <__sflush_r+0xb8>
  40a22c:	89ab      	ldrh	r3, [r5, #12]
  40a22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a232:	81ab      	strh	r3, [r5, #12]
  40a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40a238:	20400001 	.word	0x20400001

0040a23c <_fflush_r>:
  40a23c:	b538      	push	{r3, r4, r5, lr}
  40a23e:	460d      	mov	r5, r1
  40a240:	4604      	mov	r4, r0
  40a242:	b108      	cbz	r0, 40a248 <_fflush_r+0xc>
  40a244:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40a246:	b1bb      	cbz	r3, 40a278 <_fflush_r+0x3c>
  40a248:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40a24c:	b188      	cbz	r0, 40a272 <_fflush_r+0x36>
  40a24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a250:	07db      	lsls	r3, r3, #31
  40a252:	d401      	bmi.n	40a258 <_fflush_r+0x1c>
  40a254:	0581      	lsls	r1, r0, #22
  40a256:	d517      	bpl.n	40a288 <_fflush_r+0x4c>
  40a258:	4620      	mov	r0, r4
  40a25a:	4629      	mov	r1, r5
  40a25c:	f7ff ff4e 	bl	40a0fc <__sflush_r>
  40a260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40a262:	07da      	lsls	r2, r3, #31
  40a264:	4604      	mov	r4, r0
  40a266:	d402      	bmi.n	40a26e <_fflush_r+0x32>
  40a268:	89ab      	ldrh	r3, [r5, #12]
  40a26a:	059b      	lsls	r3, r3, #22
  40a26c:	d507      	bpl.n	40a27e <_fflush_r+0x42>
  40a26e:	4620      	mov	r0, r4
  40a270:	bd38      	pop	{r3, r4, r5, pc}
  40a272:	4604      	mov	r4, r0
  40a274:	4620      	mov	r0, r4
  40a276:	bd38      	pop	{r3, r4, r5, pc}
  40a278:	f000 f838 	bl	40a2ec <__sinit>
  40a27c:	e7e4      	b.n	40a248 <_fflush_r+0xc>
  40a27e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a280:	f000 fc04 	bl	40aa8c <__retarget_lock_release_recursive>
  40a284:	4620      	mov	r0, r4
  40a286:	bd38      	pop	{r3, r4, r5, pc}
  40a288:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40a28a:	f000 fbfd 	bl	40aa88 <__retarget_lock_acquire_recursive>
  40a28e:	e7e3      	b.n	40a258 <_fflush_r+0x1c>

0040a290 <_cleanup_r>:
  40a290:	4901      	ldr	r1, [pc, #4]	; (40a298 <_cleanup_r+0x8>)
  40a292:	f000 bbaf 	b.w	40a9f4 <_fwalk_reent>
  40a296:	bf00      	nop
  40a298:	0040c165 	.word	0x0040c165

0040a29c <std.isra.0>:
  40a29c:	b510      	push	{r4, lr}
  40a29e:	2300      	movs	r3, #0
  40a2a0:	4604      	mov	r4, r0
  40a2a2:	8181      	strh	r1, [r0, #12]
  40a2a4:	81c2      	strh	r2, [r0, #14]
  40a2a6:	6003      	str	r3, [r0, #0]
  40a2a8:	6043      	str	r3, [r0, #4]
  40a2aa:	6083      	str	r3, [r0, #8]
  40a2ac:	6643      	str	r3, [r0, #100]	; 0x64
  40a2ae:	6103      	str	r3, [r0, #16]
  40a2b0:	6143      	str	r3, [r0, #20]
  40a2b2:	6183      	str	r3, [r0, #24]
  40a2b4:	4619      	mov	r1, r3
  40a2b6:	2208      	movs	r2, #8
  40a2b8:	305c      	adds	r0, #92	; 0x5c
  40a2ba:	f7fc f86b 	bl	406394 <memset>
  40a2be:	4807      	ldr	r0, [pc, #28]	; (40a2dc <std.isra.0+0x40>)
  40a2c0:	4907      	ldr	r1, [pc, #28]	; (40a2e0 <std.isra.0+0x44>)
  40a2c2:	4a08      	ldr	r2, [pc, #32]	; (40a2e4 <std.isra.0+0x48>)
  40a2c4:	4b08      	ldr	r3, [pc, #32]	; (40a2e8 <std.isra.0+0x4c>)
  40a2c6:	6220      	str	r0, [r4, #32]
  40a2c8:	61e4      	str	r4, [r4, #28]
  40a2ca:	6261      	str	r1, [r4, #36]	; 0x24
  40a2cc:	62a2      	str	r2, [r4, #40]	; 0x28
  40a2ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  40a2d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40a2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a2d8:	f000 bbd2 	b.w	40aa80 <__retarget_lock_init_recursive>
  40a2dc:	0040bc65 	.word	0x0040bc65
  40a2e0:	0040bc89 	.word	0x0040bc89
  40a2e4:	0040bcc5 	.word	0x0040bcc5
  40a2e8:	0040bce5 	.word	0x0040bce5

0040a2ec <__sinit>:
  40a2ec:	b510      	push	{r4, lr}
  40a2ee:	4604      	mov	r4, r0
  40a2f0:	4812      	ldr	r0, [pc, #72]	; (40a33c <__sinit+0x50>)
  40a2f2:	f000 fbc9 	bl	40aa88 <__retarget_lock_acquire_recursive>
  40a2f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40a2f8:	b9d2      	cbnz	r2, 40a330 <__sinit+0x44>
  40a2fa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40a2fe:	4810      	ldr	r0, [pc, #64]	; (40a340 <__sinit+0x54>)
  40a300:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40a304:	2103      	movs	r1, #3
  40a306:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40a30a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40a30c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40a310:	6860      	ldr	r0, [r4, #4]
  40a312:	2104      	movs	r1, #4
  40a314:	f7ff ffc2 	bl	40a29c <std.isra.0>
  40a318:	2201      	movs	r2, #1
  40a31a:	2109      	movs	r1, #9
  40a31c:	68a0      	ldr	r0, [r4, #8]
  40a31e:	f7ff ffbd 	bl	40a29c <std.isra.0>
  40a322:	2202      	movs	r2, #2
  40a324:	2112      	movs	r1, #18
  40a326:	68e0      	ldr	r0, [r4, #12]
  40a328:	f7ff ffb8 	bl	40a29c <std.isra.0>
  40a32c:	2301      	movs	r3, #1
  40a32e:	63a3      	str	r3, [r4, #56]	; 0x38
  40a330:	4802      	ldr	r0, [pc, #8]	; (40a33c <__sinit+0x50>)
  40a332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40a336:	f000 bba9 	b.w	40aa8c <__retarget_lock_release_recursive>
  40a33a:	bf00      	nop
  40a33c:	2040d044 	.word	0x2040d044
  40a340:	0040a291 	.word	0x0040a291

0040a344 <__sfp_lock_acquire>:
  40a344:	4801      	ldr	r0, [pc, #4]	; (40a34c <__sfp_lock_acquire+0x8>)
  40a346:	f000 bb9f 	b.w	40aa88 <__retarget_lock_acquire_recursive>
  40a34a:	bf00      	nop
  40a34c:	2040d058 	.word	0x2040d058

0040a350 <__sfp_lock_release>:
  40a350:	4801      	ldr	r0, [pc, #4]	; (40a358 <__sfp_lock_release+0x8>)
  40a352:	f000 bb9b 	b.w	40aa8c <__retarget_lock_release_recursive>
  40a356:	bf00      	nop
  40a358:	2040d058 	.word	0x2040d058

0040a35c <__libc_fini_array>:
  40a35c:	b538      	push	{r3, r4, r5, lr}
  40a35e:	4c0a      	ldr	r4, [pc, #40]	; (40a388 <__libc_fini_array+0x2c>)
  40a360:	4d0a      	ldr	r5, [pc, #40]	; (40a38c <__libc_fini_array+0x30>)
  40a362:	1b64      	subs	r4, r4, r5
  40a364:	10a4      	asrs	r4, r4, #2
  40a366:	d00a      	beq.n	40a37e <__libc_fini_array+0x22>
  40a368:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40a36c:	3b01      	subs	r3, #1
  40a36e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40a372:	3c01      	subs	r4, #1
  40a374:	f855 3904 	ldr.w	r3, [r5], #-4
  40a378:	4798      	blx	r3
  40a37a:	2c00      	cmp	r4, #0
  40a37c:	d1f9      	bne.n	40a372 <__libc_fini_array+0x16>
  40a37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40a382:	f003 bf53 	b.w	40e22c <_fini>
  40a386:	bf00      	nop
  40a388:	0040e23c 	.word	0x0040e23c
  40a38c:	0040e238 	.word	0x0040e238

0040a390 <__fputwc>:
  40a390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a394:	b082      	sub	sp, #8
  40a396:	4680      	mov	r8, r0
  40a398:	4689      	mov	r9, r1
  40a39a:	4614      	mov	r4, r2
  40a39c:	f000 fb54 	bl	40aa48 <__locale_mb_cur_max>
  40a3a0:	2801      	cmp	r0, #1
  40a3a2:	d036      	beq.n	40a412 <__fputwc+0x82>
  40a3a4:	464a      	mov	r2, r9
  40a3a6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40a3aa:	a901      	add	r1, sp, #4
  40a3ac:	4640      	mov	r0, r8
  40a3ae:	f001 fde7 	bl	40bf80 <_wcrtomb_r>
  40a3b2:	1c42      	adds	r2, r0, #1
  40a3b4:	4606      	mov	r6, r0
  40a3b6:	d025      	beq.n	40a404 <__fputwc+0x74>
  40a3b8:	b3a8      	cbz	r0, 40a426 <__fputwc+0x96>
  40a3ba:	f89d e004 	ldrb.w	lr, [sp, #4]
  40a3be:	2500      	movs	r5, #0
  40a3c0:	f10d 0a04 	add.w	sl, sp, #4
  40a3c4:	e009      	b.n	40a3da <__fputwc+0x4a>
  40a3c6:	6823      	ldr	r3, [r4, #0]
  40a3c8:	1c5a      	adds	r2, r3, #1
  40a3ca:	6022      	str	r2, [r4, #0]
  40a3cc:	f883 e000 	strb.w	lr, [r3]
  40a3d0:	3501      	adds	r5, #1
  40a3d2:	42b5      	cmp	r5, r6
  40a3d4:	d227      	bcs.n	40a426 <__fputwc+0x96>
  40a3d6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40a3da:	68a3      	ldr	r3, [r4, #8]
  40a3dc:	3b01      	subs	r3, #1
  40a3de:	2b00      	cmp	r3, #0
  40a3e0:	60a3      	str	r3, [r4, #8]
  40a3e2:	daf0      	bge.n	40a3c6 <__fputwc+0x36>
  40a3e4:	69a7      	ldr	r7, [r4, #24]
  40a3e6:	42bb      	cmp	r3, r7
  40a3e8:	4671      	mov	r1, lr
  40a3ea:	4622      	mov	r2, r4
  40a3ec:	4640      	mov	r0, r8
  40a3ee:	db02      	blt.n	40a3f6 <__fputwc+0x66>
  40a3f0:	f1be 0f0a 	cmp.w	lr, #10
  40a3f4:	d1e7      	bne.n	40a3c6 <__fputwc+0x36>
  40a3f6:	f001 fd6b 	bl	40bed0 <__swbuf_r>
  40a3fa:	1c43      	adds	r3, r0, #1
  40a3fc:	d1e8      	bne.n	40a3d0 <__fputwc+0x40>
  40a3fe:	b002      	add	sp, #8
  40a400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a404:	89a3      	ldrh	r3, [r4, #12]
  40a406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a40a:	81a3      	strh	r3, [r4, #12]
  40a40c:	b002      	add	sp, #8
  40a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a412:	f109 33ff 	add.w	r3, r9, #4294967295
  40a416:	2bfe      	cmp	r3, #254	; 0xfe
  40a418:	d8c4      	bhi.n	40a3a4 <__fputwc+0x14>
  40a41a:	fa5f fe89 	uxtb.w	lr, r9
  40a41e:	4606      	mov	r6, r0
  40a420:	f88d e004 	strb.w	lr, [sp, #4]
  40a424:	e7cb      	b.n	40a3be <__fputwc+0x2e>
  40a426:	4648      	mov	r0, r9
  40a428:	b002      	add	sp, #8
  40a42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a42e:	bf00      	nop

0040a430 <_fputwc_r>:
  40a430:	b530      	push	{r4, r5, lr}
  40a432:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40a434:	f013 0f01 	tst.w	r3, #1
  40a438:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40a43c:	4614      	mov	r4, r2
  40a43e:	b083      	sub	sp, #12
  40a440:	4605      	mov	r5, r0
  40a442:	b29a      	uxth	r2, r3
  40a444:	d101      	bne.n	40a44a <_fputwc_r+0x1a>
  40a446:	0590      	lsls	r0, r2, #22
  40a448:	d51c      	bpl.n	40a484 <_fputwc_r+0x54>
  40a44a:	0490      	lsls	r0, r2, #18
  40a44c:	d406      	bmi.n	40a45c <_fputwc_r+0x2c>
  40a44e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40a450:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40a454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40a458:	81a3      	strh	r3, [r4, #12]
  40a45a:	6662      	str	r2, [r4, #100]	; 0x64
  40a45c:	4628      	mov	r0, r5
  40a45e:	4622      	mov	r2, r4
  40a460:	f7ff ff96 	bl	40a390 <__fputwc>
  40a464:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40a466:	07da      	lsls	r2, r3, #31
  40a468:	4605      	mov	r5, r0
  40a46a:	d402      	bmi.n	40a472 <_fputwc_r+0x42>
  40a46c:	89a3      	ldrh	r3, [r4, #12]
  40a46e:	059b      	lsls	r3, r3, #22
  40a470:	d502      	bpl.n	40a478 <_fputwc_r+0x48>
  40a472:	4628      	mov	r0, r5
  40a474:	b003      	add	sp, #12
  40a476:	bd30      	pop	{r4, r5, pc}
  40a478:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a47a:	f000 fb07 	bl	40aa8c <__retarget_lock_release_recursive>
  40a47e:	4628      	mov	r0, r5
  40a480:	b003      	add	sp, #12
  40a482:	bd30      	pop	{r4, r5, pc}
  40a484:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a486:	9101      	str	r1, [sp, #4]
  40a488:	f000 fafe 	bl	40aa88 <__retarget_lock_acquire_recursive>
  40a48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a490:	9901      	ldr	r1, [sp, #4]
  40a492:	b29a      	uxth	r2, r3
  40a494:	e7d9      	b.n	40a44a <_fputwc_r+0x1a>
  40a496:	bf00      	nop

0040a498 <_malloc_trim_r>:
  40a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a49a:	4f24      	ldr	r7, [pc, #144]	; (40a52c <_malloc_trim_r+0x94>)
  40a49c:	460c      	mov	r4, r1
  40a49e:	4606      	mov	r6, r0
  40a4a0:	f000 ff22 	bl	40b2e8 <__malloc_lock>
  40a4a4:	68bb      	ldr	r3, [r7, #8]
  40a4a6:	685d      	ldr	r5, [r3, #4]
  40a4a8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40a4ac:	310f      	adds	r1, #15
  40a4ae:	f025 0503 	bic.w	r5, r5, #3
  40a4b2:	4429      	add	r1, r5
  40a4b4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40a4b8:	f021 010f 	bic.w	r1, r1, #15
  40a4bc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40a4c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40a4c4:	db07      	blt.n	40a4d6 <_malloc_trim_r+0x3e>
  40a4c6:	2100      	movs	r1, #0
  40a4c8:	4630      	mov	r0, r6
  40a4ca:	f001 fbb9 	bl	40bc40 <_sbrk_r>
  40a4ce:	68bb      	ldr	r3, [r7, #8]
  40a4d0:	442b      	add	r3, r5
  40a4d2:	4298      	cmp	r0, r3
  40a4d4:	d004      	beq.n	40a4e0 <_malloc_trim_r+0x48>
  40a4d6:	4630      	mov	r0, r6
  40a4d8:	f000 ff0c 	bl	40b2f4 <__malloc_unlock>
  40a4dc:	2000      	movs	r0, #0
  40a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a4e0:	4261      	negs	r1, r4
  40a4e2:	4630      	mov	r0, r6
  40a4e4:	f001 fbac 	bl	40bc40 <_sbrk_r>
  40a4e8:	3001      	adds	r0, #1
  40a4ea:	d00d      	beq.n	40a508 <_malloc_trim_r+0x70>
  40a4ec:	4b10      	ldr	r3, [pc, #64]	; (40a530 <_malloc_trim_r+0x98>)
  40a4ee:	68ba      	ldr	r2, [r7, #8]
  40a4f0:	6819      	ldr	r1, [r3, #0]
  40a4f2:	1b2d      	subs	r5, r5, r4
  40a4f4:	f045 0501 	orr.w	r5, r5, #1
  40a4f8:	4630      	mov	r0, r6
  40a4fa:	1b09      	subs	r1, r1, r4
  40a4fc:	6055      	str	r5, [r2, #4]
  40a4fe:	6019      	str	r1, [r3, #0]
  40a500:	f000 fef8 	bl	40b2f4 <__malloc_unlock>
  40a504:	2001      	movs	r0, #1
  40a506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a508:	2100      	movs	r1, #0
  40a50a:	4630      	mov	r0, r6
  40a50c:	f001 fb98 	bl	40bc40 <_sbrk_r>
  40a510:	68ba      	ldr	r2, [r7, #8]
  40a512:	1a83      	subs	r3, r0, r2
  40a514:	2b0f      	cmp	r3, #15
  40a516:	ddde      	ble.n	40a4d6 <_malloc_trim_r+0x3e>
  40a518:	4c06      	ldr	r4, [pc, #24]	; (40a534 <_malloc_trim_r+0x9c>)
  40a51a:	4905      	ldr	r1, [pc, #20]	; (40a530 <_malloc_trim_r+0x98>)
  40a51c:	6824      	ldr	r4, [r4, #0]
  40a51e:	f043 0301 	orr.w	r3, r3, #1
  40a522:	1b00      	subs	r0, r0, r4
  40a524:	6053      	str	r3, [r2, #4]
  40a526:	6008      	str	r0, [r1, #0]
  40a528:	e7d5      	b.n	40a4d6 <_malloc_trim_r+0x3e>
  40a52a:	bf00      	nop
  40a52c:	204005c8 	.word	0x204005c8
  40a530:	2040cee8 	.word	0x2040cee8
  40a534:	204009d0 	.word	0x204009d0

0040a538 <_free_r>:
  40a538:	2900      	cmp	r1, #0
  40a53a:	d044      	beq.n	40a5c6 <_free_r+0x8e>
  40a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a540:	460d      	mov	r5, r1
  40a542:	4680      	mov	r8, r0
  40a544:	f000 fed0 	bl	40b2e8 <__malloc_lock>
  40a548:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40a54c:	4969      	ldr	r1, [pc, #420]	; (40a6f4 <_free_r+0x1bc>)
  40a54e:	f027 0301 	bic.w	r3, r7, #1
  40a552:	f1a5 0408 	sub.w	r4, r5, #8
  40a556:	18e2      	adds	r2, r4, r3
  40a558:	688e      	ldr	r6, [r1, #8]
  40a55a:	6850      	ldr	r0, [r2, #4]
  40a55c:	42b2      	cmp	r2, r6
  40a55e:	f020 0003 	bic.w	r0, r0, #3
  40a562:	d05e      	beq.n	40a622 <_free_r+0xea>
  40a564:	07fe      	lsls	r6, r7, #31
  40a566:	6050      	str	r0, [r2, #4]
  40a568:	d40b      	bmi.n	40a582 <_free_r+0x4a>
  40a56a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40a56e:	1be4      	subs	r4, r4, r7
  40a570:	f101 0e08 	add.w	lr, r1, #8
  40a574:	68a5      	ldr	r5, [r4, #8]
  40a576:	4575      	cmp	r5, lr
  40a578:	443b      	add	r3, r7
  40a57a:	d06d      	beq.n	40a658 <_free_r+0x120>
  40a57c:	68e7      	ldr	r7, [r4, #12]
  40a57e:	60ef      	str	r7, [r5, #12]
  40a580:	60bd      	str	r5, [r7, #8]
  40a582:	1815      	adds	r5, r2, r0
  40a584:	686d      	ldr	r5, [r5, #4]
  40a586:	07ed      	lsls	r5, r5, #31
  40a588:	d53e      	bpl.n	40a608 <_free_r+0xd0>
  40a58a:	f043 0201 	orr.w	r2, r3, #1
  40a58e:	6062      	str	r2, [r4, #4]
  40a590:	50e3      	str	r3, [r4, r3]
  40a592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a596:	d217      	bcs.n	40a5c8 <_free_r+0x90>
  40a598:	08db      	lsrs	r3, r3, #3
  40a59a:	1c58      	adds	r0, r3, #1
  40a59c:	109a      	asrs	r2, r3, #2
  40a59e:	684d      	ldr	r5, [r1, #4]
  40a5a0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40a5a4:	60a7      	str	r7, [r4, #8]
  40a5a6:	2301      	movs	r3, #1
  40a5a8:	4093      	lsls	r3, r2
  40a5aa:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40a5ae:	432b      	orrs	r3, r5
  40a5b0:	3a08      	subs	r2, #8
  40a5b2:	60e2      	str	r2, [r4, #12]
  40a5b4:	604b      	str	r3, [r1, #4]
  40a5b6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40a5ba:	60fc      	str	r4, [r7, #12]
  40a5bc:	4640      	mov	r0, r8
  40a5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a5c2:	f000 be97 	b.w	40b2f4 <__malloc_unlock>
  40a5c6:	4770      	bx	lr
  40a5c8:	0a5a      	lsrs	r2, r3, #9
  40a5ca:	2a04      	cmp	r2, #4
  40a5cc:	d852      	bhi.n	40a674 <_free_r+0x13c>
  40a5ce:	099a      	lsrs	r2, r3, #6
  40a5d0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40a5d4:	00ff      	lsls	r7, r7, #3
  40a5d6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40a5da:	19c8      	adds	r0, r1, r7
  40a5dc:	59ca      	ldr	r2, [r1, r7]
  40a5de:	3808      	subs	r0, #8
  40a5e0:	4290      	cmp	r0, r2
  40a5e2:	d04f      	beq.n	40a684 <_free_r+0x14c>
  40a5e4:	6851      	ldr	r1, [r2, #4]
  40a5e6:	f021 0103 	bic.w	r1, r1, #3
  40a5ea:	428b      	cmp	r3, r1
  40a5ec:	d232      	bcs.n	40a654 <_free_r+0x11c>
  40a5ee:	6892      	ldr	r2, [r2, #8]
  40a5f0:	4290      	cmp	r0, r2
  40a5f2:	d1f7      	bne.n	40a5e4 <_free_r+0xac>
  40a5f4:	68c3      	ldr	r3, [r0, #12]
  40a5f6:	60a0      	str	r0, [r4, #8]
  40a5f8:	60e3      	str	r3, [r4, #12]
  40a5fa:	609c      	str	r4, [r3, #8]
  40a5fc:	60c4      	str	r4, [r0, #12]
  40a5fe:	4640      	mov	r0, r8
  40a600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a604:	f000 be76 	b.w	40b2f4 <__malloc_unlock>
  40a608:	6895      	ldr	r5, [r2, #8]
  40a60a:	4f3b      	ldr	r7, [pc, #236]	; (40a6f8 <_free_r+0x1c0>)
  40a60c:	42bd      	cmp	r5, r7
  40a60e:	4403      	add	r3, r0
  40a610:	d040      	beq.n	40a694 <_free_r+0x15c>
  40a612:	68d0      	ldr	r0, [r2, #12]
  40a614:	60e8      	str	r0, [r5, #12]
  40a616:	f043 0201 	orr.w	r2, r3, #1
  40a61a:	6085      	str	r5, [r0, #8]
  40a61c:	6062      	str	r2, [r4, #4]
  40a61e:	50e3      	str	r3, [r4, r3]
  40a620:	e7b7      	b.n	40a592 <_free_r+0x5a>
  40a622:	07ff      	lsls	r7, r7, #31
  40a624:	4403      	add	r3, r0
  40a626:	d407      	bmi.n	40a638 <_free_r+0x100>
  40a628:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a62c:	1aa4      	subs	r4, r4, r2
  40a62e:	4413      	add	r3, r2
  40a630:	68a0      	ldr	r0, [r4, #8]
  40a632:	68e2      	ldr	r2, [r4, #12]
  40a634:	60c2      	str	r2, [r0, #12]
  40a636:	6090      	str	r0, [r2, #8]
  40a638:	4a30      	ldr	r2, [pc, #192]	; (40a6fc <_free_r+0x1c4>)
  40a63a:	6812      	ldr	r2, [r2, #0]
  40a63c:	f043 0001 	orr.w	r0, r3, #1
  40a640:	4293      	cmp	r3, r2
  40a642:	6060      	str	r0, [r4, #4]
  40a644:	608c      	str	r4, [r1, #8]
  40a646:	d3b9      	bcc.n	40a5bc <_free_r+0x84>
  40a648:	4b2d      	ldr	r3, [pc, #180]	; (40a700 <_free_r+0x1c8>)
  40a64a:	4640      	mov	r0, r8
  40a64c:	6819      	ldr	r1, [r3, #0]
  40a64e:	f7ff ff23 	bl	40a498 <_malloc_trim_r>
  40a652:	e7b3      	b.n	40a5bc <_free_r+0x84>
  40a654:	4610      	mov	r0, r2
  40a656:	e7cd      	b.n	40a5f4 <_free_r+0xbc>
  40a658:	1811      	adds	r1, r2, r0
  40a65a:	6849      	ldr	r1, [r1, #4]
  40a65c:	07c9      	lsls	r1, r1, #31
  40a65e:	d444      	bmi.n	40a6ea <_free_r+0x1b2>
  40a660:	6891      	ldr	r1, [r2, #8]
  40a662:	68d2      	ldr	r2, [r2, #12]
  40a664:	60ca      	str	r2, [r1, #12]
  40a666:	4403      	add	r3, r0
  40a668:	f043 0001 	orr.w	r0, r3, #1
  40a66c:	6091      	str	r1, [r2, #8]
  40a66e:	6060      	str	r0, [r4, #4]
  40a670:	50e3      	str	r3, [r4, r3]
  40a672:	e7a3      	b.n	40a5bc <_free_r+0x84>
  40a674:	2a14      	cmp	r2, #20
  40a676:	d816      	bhi.n	40a6a6 <_free_r+0x16e>
  40a678:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a67c:	00ff      	lsls	r7, r7, #3
  40a67e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a682:	e7aa      	b.n	40a5da <_free_r+0xa2>
  40a684:	10aa      	asrs	r2, r5, #2
  40a686:	2301      	movs	r3, #1
  40a688:	684d      	ldr	r5, [r1, #4]
  40a68a:	4093      	lsls	r3, r2
  40a68c:	432b      	orrs	r3, r5
  40a68e:	604b      	str	r3, [r1, #4]
  40a690:	4603      	mov	r3, r0
  40a692:	e7b0      	b.n	40a5f6 <_free_r+0xbe>
  40a694:	f043 0201 	orr.w	r2, r3, #1
  40a698:	614c      	str	r4, [r1, #20]
  40a69a:	610c      	str	r4, [r1, #16]
  40a69c:	60e5      	str	r5, [r4, #12]
  40a69e:	60a5      	str	r5, [r4, #8]
  40a6a0:	6062      	str	r2, [r4, #4]
  40a6a2:	50e3      	str	r3, [r4, r3]
  40a6a4:	e78a      	b.n	40a5bc <_free_r+0x84>
  40a6a6:	2a54      	cmp	r2, #84	; 0x54
  40a6a8:	d806      	bhi.n	40a6b8 <_free_r+0x180>
  40a6aa:	0b1a      	lsrs	r2, r3, #12
  40a6ac:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a6b0:	00ff      	lsls	r7, r7, #3
  40a6b2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a6b6:	e790      	b.n	40a5da <_free_r+0xa2>
  40a6b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a6bc:	d806      	bhi.n	40a6cc <_free_r+0x194>
  40a6be:	0bda      	lsrs	r2, r3, #15
  40a6c0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a6c4:	00ff      	lsls	r7, r7, #3
  40a6c6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a6ca:	e786      	b.n	40a5da <_free_r+0xa2>
  40a6cc:	f240 5054 	movw	r0, #1364	; 0x554
  40a6d0:	4282      	cmp	r2, r0
  40a6d2:	d806      	bhi.n	40a6e2 <_free_r+0x1aa>
  40a6d4:	0c9a      	lsrs	r2, r3, #18
  40a6d6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a6da:	00ff      	lsls	r7, r7, #3
  40a6dc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a6e0:	e77b      	b.n	40a5da <_free_r+0xa2>
  40a6e2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a6e6:	257e      	movs	r5, #126	; 0x7e
  40a6e8:	e777      	b.n	40a5da <_free_r+0xa2>
  40a6ea:	f043 0101 	orr.w	r1, r3, #1
  40a6ee:	6061      	str	r1, [r4, #4]
  40a6f0:	6013      	str	r3, [r2, #0]
  40a6f2:	e763      	b.n	40a5bc <_free_r+0x84>
  40a6f4:	204005c8 	.word	0x204005c8
  40a6f8:	204005d0 	.word	0x204005d0
  40a6fc:	204009d4 	.word	0x204009d4
  40a700:	2040cf18 	.word	0x2040cf18

0040a704 <__sfvwrite_r>:
  40a704:	6893      	ldr	r3, [r2, #8]
  40a706:	2b00      	cmp	r3, #0
  40a708:	d073      	beq.n	40a7f2 <__sfvwrite_r+0xee>
  40a70a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a70e:	898b      	ldrh	r3, [r1, #12]
  40a710:	b083      	sub	sp, #12
  40a712:	460c      	mov	r4, r1
  40a714:	0719      	lsls	r1, r3, #28
  40a716:	9000      	str	r0, [sp, #0]
  40a718:	4616      	mov	r6, r2
  40a71a:	d526      	bpl.n	40a76a <__sfvwrite_r+0x66>
  40a71c:	6922      	ldr	r2, [r4, #16]
  40a71e:	b322      	cbz	r2, 40a76a <__sfvwrite_r+0x66>
  40a720:	f013 0002 	ands.w	r0, r3, #2
  40a724:	6835      	ldr	r5, [r6, #0]
  40a726:	d02c      	beq.n	40a782 <__sfvwrite_r+0x7e>
  40a728:	f04f 0900 	mov.w	r9, #0
  40a72c:	4fb0      	ldr	r7, [pc, #704]	; (40a9f0 <__sfvwrite_r+0x2ec>)
  40a72e:	46c8      	mov	r8, r9
  40a730:	46b2      	mov	sl, r6
  40a732:	45b8      	cmp	r8, r7
  40a734:	4643      	mov	r3, r8
  40a736:	464a      	mov	r2, r9
  40a738:	bf28      	it	cs
  40a73a:	463b      	movcs	r3, r7
  40a73c:	9800      	ldr	r0, [sp, #0]
  40a73e:	f1b8 0f00 	cmp.w	r8, #0
  40a742:	d050      	beq.n	40a7e6 <__sfvwrite_r+0xe2>
  40a744:	69e1      	ldr	r1, [r4, #28]
  40a746:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a748:	47b0      	blx	r6
  40a74a:	2800      	cmp	r0, #0
  40a74c:	dd58      	ble.n	40a800 <__sfvwrite_r+0xfc>
  40a74e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a752:	1a1b      	subs	r3, r3, r0
  40a754:	4481      	add	r9, r0
  40a756:	eba8 0800 	sub.w	r8, r8, r0
  40a75a:	f8ca 3008 	str.w	r3, [sl, #8]
  40a75e:	2b00      	cmp	r3, #0
  40a760:	d1e7      	bne.n	40a732 <__sfvwrite_r+0x2e>
  40a762:	2000      	movs	r0, #0
  40a764:	b003      	add	sp, #12
  40a766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a76a:	4621      	mov	r1, r4
  40a76c:	9800      	ldr	r0, [sp, #0]
  40a76e:	f7fe fc91 	bl	409094 <__swsetup_r>
  40a772:	2800      	cmp	r0, #0
  40a774:	f040 8133 	bne.w	40a9de <__sfvwrite_r+0x2da>
  40a778:	89a3      	ldrh	r3, [r4, #12]
  40a77a:	6835      	ldr	r5, [r6, #0]
  40a77c:	f013 0002 	ands.w	r0, r3, #2
  40a780:	d1d2      	bne.n	40a728 <__sfvwrite_r+0x24>
  40a782:	f013 0901 	ands.w	r9, r3, #1
  40a786:	d145      	bne.n	40a814 <__sfvwrite_r+0x110>
  40a788:	464f      	mov	r7, r9
  40a78a:	9601      	str	r6, [sp, #4]
  40a78c:	b337      	cbz	r7, 40a7dc <__sfvwrite_r+0xd8>
  40a78e:	059a      	lsls	r2, r3, #22
  40a790:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40a794:	f140 8083 	bpl.w	40a89e <__sfvwrite_r+0x19a>
  40a798:	4547      	cmp	r7, r8
  40a79a:	46c3      	mov	fp, r8
  40a79c:	f0c0 80ab 	bcc.w	40a8f6 <__sfvwrite_r+0x1f2>
  40a7a0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40a7a4:	f040 80ac 	bne.w	40a900 <__sfvwrite_r+0x1fc>
  40a7a8:	6820      	ldr	r0, [r4, #0]
  40a7aa:	46ba      	mov	sl, r7
  40a7ac:	465a      	mov	r2, fp
  40a7ae:	4649      	mov	r1, r9
  40a7b0:	f000 fd36 	bl	40b220 <memmove>
  40a7b4:	68a2      	ldr	r2, [r4, #8]
  40a7b6:	6823      	ldr	r3, [r4, #0]
  40a7b8:	eba2 0208 	sub.w	r2, r2, r8
  40a7bc:	445b      	add	r3, fp
  40a7be:	60a2      	str	r2, [r4, #8]
  40a7c0:	6023      	str	r3, [r4, #0]
  40a7c2:	9a01      	ldr	r2, [sp, #4]
  40a7c4:	6893      	ldr	r3, [r2, #8]
  40a7c6:	eba3 030a 	sub.w	r3, r3, sl
  40a7ca:	44d1      	add	r9, sl
  40a7cc:	eba7 070a 	sub.w	r7, r7, sl
  40a7d0:	6093      	str	r3, [r2, #8]
  40a7d2:	2b00      	cmp	r3, #0
  40a7d4:	d0c5      	beq.n	40a762 <__sfvwrite_r+0x5e>
  40a7d6:	89a3      	ldrh	r3, [r4, #12]
  40a7d8:	2f00      	cmp	r7, #0
  40a7da:	d1d8      	bne.n	40a78e <__sfvwrite_r+0x8a>
  40a7dc:	f8d5 9000 	ldr.w	r9, [r5]
  40a7e0:	686f      	ldr	r7, [r5, #4]
  40a7e2:	3508      	adds	r5, #8
  40a7e4:	e7d2      	b.n	40a78c <__sfvwrite_r+0x88>
  40a7e6:	f8d5 9000 	ldr.w	r9, [r5]
  40a7ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40a7ee:	3508      	adds	r5, #8
  40a7f0:	e79f      	b.n	40a732 <__sfvwrite_r+0x2e>
  40a7f2:	2000      	movs	r0, #0
  40a7f4:	4770      	bx	lr
  40a7f6:	4621      	mov	r1, r4
  40a7f8:	9800      	ldr	r0, [sp, #0]
  40a7fa:	f7ff fd1f 	bl	40a23c <_fflush_r>
  40a7fe:	b370      	cbz	r0, 40a85e <__sfvwrite_r+0x15a>
  40a800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a808:	f04f 30ff 	mov.w	r0, #4294967295
  40a80c:	81a3      	strh	r3, [r4, #12]
  40a80e:	b003      	add	sp, #12
  40a810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a814:	4681      	mov	r9, r0
  40a816:	4633      	mov	r3, r6
  40a818:	464e      	mov	r6, r9
  40a81a:	46a8      	mov	r8, r5
  40a81c:	469a      	mov	sl, r3
  40a81e:	464d      	mov	r5, r9
  40a820:	b34e      	cbz	r6, 40a876 <__sfvwrite_r+0x172>
  40a822:	b380      	cbz	r0, 40a886 <__sfvwrite_r+0x182>
  40a824:	6820      	ldr	r0, [r4, #0]
  40a826:	6923      	ldr	r3, [r4, #16]
  40a828:	6962      	ldr	r2, [r4, #20]
  40a82a:	45b1      	cmp	r9, r6
  40a82c:	46cb      	mov	fp, r9
  40a82e:	bf28      	it	cs
  40a830:	46b3      	movcs	fp, r6
  40a832:	4298      	cmp	r0, r3
  40a834:	465f      	mov	r7, fp
  40a836:	d904      	bls.n	40a842 <__sfvwrite_r+0x13e>
  40a838:	68a3      	ldr	r3, [r4, #8]
  40a83a:	4413      	add	r3, r2
  40a83c:	459b      	cmp	fp, r3
  40a83e:	f300 80a6 	bgt.w	40a98e <__sfvwrite_r+0x28a>
  40a842:	4593      	cmp	fp, r2
  40a844:	db4b      	blt.n	40a8de <__sfvwrite_r+0x1da>
  40a846:	4613      	mov	r3, r2
  40a848:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40a84a:	69e1      	ldr	r1, [r4, #28]
  40a84c:	9800      	ldr	r0, [sp, #0]
  40a84e:	462a      	mov	r2, r5
  40a850:	47b8      	blx	r7
  40a852:	1e07      	subs	r7, r0, #0
  40a854:	ddd4      	ble.n	40a800 <__sfvwrite_r+0xfc>
  40a856:	ebb9 0907 	subs.w	r9, r9, r7
  40a85a:	d0cc      	beq.n	40a7f6 <__sfvwrite_r+0xf2>
  40a85c:	2001      	movs	r0, #1
  40a85e:	f8da 3008 	ldr.w	r3, [sl, #8]
  40a862:	1bdb      	subs	r3, r3, r7
  40a864:	443d      	add	r5, r7
  40a866:	1bf6      	subs	r6, r6, r7
  40a868:	f8ca 3008 	str.w	r3, [sl, #8]
  40a86c:	2b00      	cmp	r3, #0
  40a86e:	f43f af78 	beq.w	40a762 <__sfvwrite_r+0x5e>
  40a872:	2e00      	cmp	r6, #0
  40a874:	d1d5      	bne.n	40a822 <__sfvwrite_r+0x11e>
  40a876:	f108 0308 	add.w	r3, r8, #8
  40a87a:	e913 0060 	ldmdb	r3, {r5, r6}
  40a87e:	4698      	mov	r8, r3
  40a880:	3308      	adds	r3, #8
  40a882:	2e00      	cmp	r6, #0
  40a884:	d0f9      	beq.n	40a87a <__sfvwrite_r+0x176>
  40a886:	4632      	mov	r2, r6
  40a888:	210a      	movs	r1, #10
  40a88a:	4628      	mov	r0, r5
  40a88c:	f000 fc48 	bl	40b120 <memchr>
  40a890:	2800      	cmp	r0, #0
  40a892:	f000 80a1 	beq.w	40a9d8 <__sfvwrite_r+0x2d4>
  40a896:	3001      	adds	r0, #1
  40a898:	eba0 0905 	sub.w	r9, r0, r5
  40a89c:	e7c2      	b.n	40a824 <__sfvwrite_r+0x120>
  40a89e:	6820      	ldr	r0, [r4, #0]
  40a8a0:	6923      	ldr	r3, [r4, #16]
  40a8a2:	4298      	cmp	r0, r3
  40a8a4:	d802      	bhi.n	40a8ac <__sfvwrite_r+0x1a8>
  40a8a6:	6963      	ldr	r3, [r4, #20]
  40a8a8:	429f      	cmp	r7, r3
  40a8aa:	d25d      	bcs.n	40a968 <__sfvwrite_r+0x264>
  40a8ac:	45b8      	cmp	r8, r7
  40a8ae:	bf28      	it	cs
  40a8b0:	46b8      	movcs	r8, r7
  40a8b2:	4642      	mov	r2, r8
  40a8b4:	4649      	mov	r1, r9
  40a8b6:	f000 fcb3 	bl	40b220 <memmove>
  40a8ba:	68a3      	ldr	r3, [r4, #8]
  40a8bc:	6822      	ldr	r2, [r4, #0]
  40a8be:	eba3 0308 	sub.w	r3, r3, r8
  40a8c2:	4442      	add	r2, r8
  40a8c4:	60a3      	str	r3, [r4, #8]
  40a8c6:	6022      	str	r2, [r4, #0]
  40a8c8:	b10b      	cbz	r3, 40a8ce <__sfvwrite_r+0x1ca>
  40a8ca:	46c2      	mov	sl, r8
  40a8cc:	e779      	b.n	40a7c2 <__sfvwrite_r+0xbe>
  40a8ce:	4621      	mov	r1, r4
  40a8d0:	9800      	ldr	r0, [sp, #0]
  40a8d2:	f7ff fcb3 	bl	40a23c <_fflush_r>
  40a8d6:	2800      	cmp	r0, #0
  40a8d8:	d192      	bne.n	40a800 <__sfvwrite_r+0xfc>
  40a8da:	46c2      	mov	sl, r8
  40a8dc:	e771      	b.n	40a7c2 <__sfvwrite_r+0xbe>
  40a8de:	465a      	mov	r2, fp
  40a8e0:	4629      	mov	r1, r5
  40a8e2:	f000 fc9d 	bl	40b220 <memmove>
  40a8e6:	68a2      	ldr	r2, [r4, #8]
  40a8e8:	6823      	ldr	r3, [r4, #0]
  40a8ea:	eba2 020b 	sub.w	r2, r2, fp
  40a8ee:	445b      	add	r3, fp
  40a8f0:	60a2      	str	r2, [r4, #8]
  40a8f2:	6023      	str	r3, [r4, #0]
  40a8f4:	e7af      	b.n	40a856 <__sfvwrite_r+0x152>
  40a8f6:	6820      	ldr	r0, [r4, #0]
  40a8f8:	46b8      	mov	r8, r7
  40a8fa:	46ba      	mov	sl, r7
  40a8fc:	46bb      	mov	fp, r7
  40a8fe:	e755      	b.n	40a7ac <__sfvwrite_r+0xa8>
  40a900:	6962      	ldr	r2, [r4, #20]
  40a902:	6820      	ldr	r0, [r4, #0]
  40a904:	6921      	ldr	r1, [r4, #16]
  40a906:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40a90a:	eba0 0a01 	sub.w	sl, r0, r1
  40a90e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40a912:	f10a 0001 	add.w	r0, sl, #1
  40a916:	ea4f 0868 	mov.w	r8, r8, asr #1
  40a91a:	4438      	add	r0, r7
  40a91c:	4540      	cmp	r0, r8
  40a91e:	4642      	mov	r2, r8
  40a920:	bf84      	itt	hi
  40a922:	4680      	movhi	r8, r0
  40a924:	4642      	movhi	r2, r8
  40a926:	055b      	lsls	r3, r3, #21
  40a928:	d544      	bpl.n	40a9b4 <__sfvwrite_r+0x2b0>
  40a92a:	4611      	mov	r1, r2
  40a92c:	9800      	ldr	r0, [sp, #0]
  40a92e:	f000 f92f 	bl	40ab90 <_malloc_r>
  40a932:	4683      	mov	fp, r0
  40a934:	2800      	cmp	r0, #0
  40a936:	d055      	beq.n	40a9e4 <__sfvwrite_r+0x2e0>
  40a938:	4652      	mov	r2, sl
  40a93a:	6921      	ldr	r1, [r4, #16]
  40a93c:	f7fb fc90 	bl	406260 <memcpy>
  40a940:	89a3      	ldrh	r3, [r4, #12]
  40a942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40a946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a94a:	81a3      	strh	r3, [r4, #12]
  40a94c:	eb0b 000a 	add.w	r0, fp, sl
  40a950:	eba8 030a 	sub.w	r3, r8, sl
  40a954:	f8c4 b010 	str.w	fp, [r4, #16]
  40a958:	f8c4 8014 	str.w	r8, [r4, #20]
  40a95c:	6020      	str	r0, [r4, #0]
  40a95e:	60a3      	str	r3, [r4, #8]
  40a960:	46b8      	mov	r8, r7
  40a962:	46ba      	mov	sl, r7
  40a964:	46bb      	mov	fp, r7
  40a966:	e721      	b.n	40a7ac <__sfvwrite_r+0xa8>
  40a968:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a96c:	42b9      	cmp	r1, r7
  40a96e:	bf28      	it	cs
  40a970:	4639      	movcs	r1, r7
  40a972:	464a      	mov	r2, r9
  40a974:	fb91 f1f3 	sdiv	r1, r1, r3
  40a978:	9800      	ldr	r0, [sp, #0]
  40a97a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a97c:	fb03 f301 	mul.w	r3, r3, r1
  40a980:	69e1      	ldr	r1, [r4, #28]
  40a982:	47b0      	blx	r6
  40a984:	f1b0 0a00 	subs.w	sl, r0, #0
  40a988:	f73f af1b 	bgt.w	40a7c2 <__sfvwrite_r+0xbe>
  40a98c:	e738      	b.n	40a800 <__sfvwrite_r+0xfc>
  40a98e:	461a      	mov	r2, r3
  40a990:	4629      	mov	r1, r5
  40a992:	9301      	str	r3, [sp, #4]
  40a994:	f000 fc44 	bl	40b220 <memmove>
  40a998:	6822      	ldr	r2, [r4, #0]
  40a99a:	9b01      	ldr	r3, [sp, #4]
  40a99c:	9800      	ldr	r0, [sp, #0]
  40a99e:	441a      	add	r2, r3
  40a9a0:	6022      	str	r2, [r4, #0]
  40a9a2:	4621      	mov	r1, r4
  40a9a4:	f7ff fc4a 	bl	40a23c <_fflush_r>
  40a9a8:	9b01      	ldr	r3, [sp, #4]
  40a9aa:	2800      	cmp	r0, #0
  40a9ac:	f47f af28 	bne.w	40a800 <__sfvwrite_r+0xfc>
  40a9b0:	461f      	mov	r7, r3
  40a9b2:	e750      	b.n	40a856 <__sfvwrite_r+0x152>
  40a9b4:	9800      	ldr	r0, [sp, #0]
  40a9b6:	f000 ff9d 	bl	40b8f4 <_realloc_r>
  40a9ba:	4683      	mov	fp, r0
  40a9bc:	2800      	cmp	r0, #0
  40a9be:	d1c5      	bne.n	40a94c <__sfvwrite_r+0x248>
  40a9c0:	9d00      	ldr	r5, [sp, #0]
  40a9c2:	6921      	ldr	r1, [r4, #16]
  40a9c4:	4628      	mov	r0, r5
  40a9c6:	f7ff fdb7 	bl	40a538 <_free_r>
  40a9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a9ce:	220c      	movs	r2, #12
  40a9d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a9d4:	602a      	str	r2, [r5, #0]
  40a9d6:	e715      	b.n	40a804 <__sfvwrite_r+0x100>
  40a9d8:	f106 0901 	add.w	r9, r6, #1
  40a9dc:	e722      	b.n	40a824 <__sfvwrite_r+0x120>
  40a9de:	f04f 30ff 	mov.w	r0, #4294967295
  40a9e2:	e6bf      	b.n	40a764 <__sfvwrite_r+0x60>
  40a9e4:	9a00      	ldr	r2, [sp, #0]
  40a9e6:	230c      	movs	r3, #12
  40a9e8:	6013      	str	r3, [r2, #0]
  40a9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a9ee:	e709      	b.n	40a804 <__sfvwrite_r+0x100>
  40a9f0:	7ffffc00 	.word	0x7ffffc00

0040a9f4 <_fwalk_reent>:
  40a9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a9f8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a9fc:	d01f      	beq.n	40aa3e <_fwalk_reent+0x4a>
  40a9fe:	4688      	mov	r8, r1
  40aa00:	4606      	mov	r6, r0
  40aa02:	f04f 0900 	mov.w	r9, #0
  40aa06:	687d      	ldr	r5, [r7, #4]
  40aa08:	68bc      	ldr	r4, [r7, #8]
  40aa0a:	3d01      	subs	r5, #1
  40aa0c:	d411      	bmi.n	40aa32 <_fwalk_reent+0x3e>
  40aa0e:	89a3      	ldrh	r3, [r4, #12]
  40aa10:	2b01      	cmp	r3, #1
  40aa12:	f105 35ff 	add.w	r5, r5, #4294967295
  40aa16:	d908      	bls.n	40aa2a <_fwalk_reent+0x36>
  40aa18:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40aa1c:	3301      	adds	r3, #1
  40aa1e:	4621      	mov	r1, r4
  40aa20:	4630      	mov	r0, r6
  40aa22:	d002      	beq.n	40aa2a <_fwalk_reent+0x36>
  40aa24:	47c0      	blx	r8
  40aa26:	ea49 0900 	orr.w	r9, r9, r0
  40aa2a:	1c6b      	adds	r3, r5, #1
  40aa2c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40aa30:	d1ed      	bne.n	40aa0e <_fwalk_reent+0x1a>
  40aa32:	683f      	ldr	r7, [r7, #0]
  40aa34:	2f00      	cmp	r7, #0
  40aa36:	d1e6      	bne.n	40aa06 <_fwalk_reent+0x12>
  40aa38:	4648      	mov	r0, r9
  40aa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40aa3e:	46b9      	mov	r9, r7
  40aa40:	4648      	mov	r0, r9
  40aa42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40aa46:	bf00      	nop

0040aa48 <__locale_mb_cur_max>:
  40aa48:	4b04      	ldr	r3, [pc, #16]	; (40aa5c <__locale_mb_cur_max+0x14>)
  40aa4a:	4a05      	ldr	r2, [pc, #20]	; (40aa60 <__locale_mb_cur_max+0x18>)
  40aa4c:	681b      	ldr	r3, [r3, #0]
  40aa4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40aa50:	2b00      	cmp	r3, #0
  40aa52:	bf08      	it	eq
  40aa54:	4613      	moveq	r3, r2
  40aa56:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40aa5a:	4770      	bx	lr
  40aa5c:	20400028 	.word	0x20400028
  40aa60:	2040045c 	.word	0x2040045c

0040aa64 <_localeconv_r>:
  40aa64:	4a04      	ldr	r2, [pc, #16]	; (40aa78 <_localeconv_r+0x14>)
  40aa66:	4b05      	ldr	r3, [pc, #20]	; (40aa7c <_localeconv_r+0x18>)
  40aa68:	6812      	ldr	r2, [r2, #0]
  40aa6a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40aa6c:	2800      	cmp	r0, #0
  40aa6e:	bf08      	it	eq
  40aa70:	4618      	moveq	r0, r3
  40aa72:	30f0      	adds	r0, #240	; 0xf0
  40aa74:	4770      	bx	lr
  40aa76:	bf00      	nop
  40aa78:	20400028 	.word	0x20400028
  40aa7c:	2040045c 	.word	0x2040045c

0040aa80 <__retarget_lock_init_recursive>:
  40aa80:	4770      	bx	lr
  40aa82:	bf00      	nop

0040aa84 <__retarget_lock_close_recursive>:
  40aa84:	4770      	bx	lr
  40aa86:	bf00      	nop

0040aa88 <__retarget_lock_acquire_recursive>:
  40aa88:	4770      	bx	lr
  40aa8a:	bf00      	nop

0040aa8c <__retarget_lock_release_recursive>:
  40aa8c:	4770      	bx	lr
  40aa8e:	bf00      	nop

0040aa90 <__swhatbuf_r>:
  40aa90:	b570      	push	{r4, r5, r6, lr}
  40aa92:	460c      	mov	r4, r1
  40aa94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40aa98:	2900      	cmp	r1, #0
  40aa9a:	b090      	sub	sp, #64	; 0x40
  40aa9c:	4615      	mov	r5, r2
  40aa9e:	461e      	mov	r6, r3
  40aaa0:	db14      	blt.n	40aacc <__swhatbuf_r+0x3c>
  40aaa2:	aa01      	add	r2, sp, #4
  40aaa4:	f001 fbc0 	bl	40c228 <_fstat_r>
  40aaa8:	2800      	cmp	r0, #0
  40aaaa:	db0f      	blt.n	40aacc <__swhatbuf_r+0x3c>
  40aaac:	9a02      	ldr	r2, [sp, #8]
  40aaae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40aab2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40aab6:	fab2 f282 	clz	r2, r2
  40aaba:	0952      	lsrs	r2, r2, #5
  40aabc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40aac0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40aac4:	6032      	str	r2, [r6, #0]
  40aac6:	602b      	str	r3, [r5, #0]
  40aac8:	b010      	add	sp, #64	; 0x40
  40aaca:	bd70      	pop	{r4, r5, r6, pc}
  40aacc:	89a2      	ldrh	r2, [r4, #12]
  40aace:	2300      	movs	r3, #0
  40aad0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40aad4:	6033      	str	r3, [r6, #0]
  40aad6:	d004      	beq.n	40aae2 <__swhatbuf_r+0x52>
  40aad8:	2240      	movs	r2, #64	; 0x40
  40aada:	4618      	mov	r0, r3
  40aadc:	602a      	str	r2, [r5, #0]
  40aade:	b010      	add	sp, #64	; 0x40
  40aae0:	bd70      	pop	{r4, r5, r6, pc}
  40aae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40aae6:	602b      	str	r3, [r5, #0]
  40aae8:	b010      	add	sp, #64	; 0x40
  40aaea:	bd70      	pop	{r4, r5, r6, pc}

0040aaec <__smakebuf_r>:
  40aaec:	898a      	ldrh	r2, [r1, #12]
  40aaee:	0792      	lsls	r2, r2, #30
  40aaf0:	460b      	mov	r3, r1
  40aaf2:	d506      	bpl.n	40ab02 <__smakebuf_r+0x16>
  40aaf4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40aaf8:	2101      	movs	r1, #1
  40aafa:	601a      	str	r2, [r3, #0]
  40aafc:	611a      	str	r2, [r3, #16]
  40aafe:	6159      	str	r1, [r3, #20]
  40ab00:	4770      	bx	lr
  40ab02:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ab04:	b083      	sub	sp, #12
  40ab06:	ab01      	add	r3, sp, #4
  40ab08:	466a      	mov	r2, sp
  40ab0a:	460c      	mov	r4, r1
  40ab0c:	4606      	mov	r6, r0
  40ab0e:	f7ff ffbf 	bl	40aa90 <__swhatbuf_r>
  40ab12:	9900      	ldr	r1, [sp, #0]
  40ab14:	4605      	mov	r5, r0
  40ab16:	4630      	mov	r0, r6
  40ab18:	f000 f83a 	bl	40ab90 <_malloc_r>
  40ab1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ab20:	b1d8      	cbz	r0, 40ab5a <__smakebuf_r+0x6e>
  40ab22:	9a01      	ldr	r2, [sp, #4]
  40ab24:	4f15      	ldr	r7, [pc, #84]	; (40ab7c <__smakebuf_r+0x90>)
  40ab26:	9900      	ldr	r1, [sp, #0]
  40ab28:	63f7      	str	r7, [r6, #60]	; 0x3c
  40ab2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40ab2e:	81a3      	strh	r3, [r4, #12]
  40ab30:	6020      	str	r0, [r4, #0]
  40ab32:	6120      	str	r0, [r4, #16]
  40ab34:	6161      	str	r1, [r4, #20]
  40ab36:	b91a      	cbnz	r2, 40ab40 <__smakebuf_r+0x54>
  40ab38:	432b      	orrs	r3, r5
  40ab3a:	81a3      	strh	r3, [r4, #12]
  40ab3c:	b003      	add	sp, #12
  40ab3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ab40:	4630      	mov	r0, r6
  40ab42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40ab46:	f001 fb83 	bl	40c250 <_isatty_r>
  40ab4a:	b1a0      	cbz	r0, 40ab76 <__smakebuf_r+0x8a>
  40ab4c:	89a3      	ldrh	r3, [r4, #12]
  40ab4e:	f023 0303 	bic.w	r3, r3, #3
  40ab52:	f043 0301 	orr.w	r3, r3, #1
  40ab56:	b21b      	sxth	r3, r3
  40ab58:	e7ee      	b.n	40ab38 <__smakebuf_r+0x4c>
  40ab5a:	059a      	lsls	r2, r3, #22
  40ab5c:	d4ee      	bmi.n	40ab3c <__smakebuf_r+0x50>
  40ab5e:	f023 0303 	bic.w	r3, r3, #3
  40ab62:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40ab66:	f043 0302 	orr.w	r3, r3, #2
  40ab6a:	2101      	movs	r1, #1
  40ab6c:	81a3      	strh	r3, [r4, #12]
  40ab6e:	6022      	str	r2, [r4, #0]
  40ab70:	6122      	str	r2, [r4, #16]
  40ab72:	6161      	str	r1, [r4, #20]
  40ab74:	e7e2      	b.n	40ab3c <__smakebuf_r+0x50>
  40ab76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ab7a:	e7dd      	b.n	40ab38 <__smakebuf_r+0x4c>
  40ab7c:	0040a291 	.word	0x0040a291

0040ab80 <malloc>:
  40ab80:	4b02      	ldr	r3, [pc, #8]	; (40ab8c <malloc+0xc>)
  40ab82:	4601      	mov	r1, r0
  40ab84:	6818      	ldr	r0, [r3, #0]
  40ab86:	f000 b803 	b.w	40ab90 <_malloc_r>
  40ab8a:	bf00      	nop
  40ab8c:	20400028 	.word	0x20400028

0040ab90 <_malloc_r>:
  40ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ab94:	f101 060b 	add.w	r6, r1, #11
  40ab98:	2e16      	cmp	r6, #22
  40ab9a:	b083      	sub	sp, #12
  40ab9c:	4605      	mov	r5, r0
  40ab9e:	f240 809e 	bls.w	40acde <_malloc_r+0x14e>
  40aba2:	f036 0607 	bics.w	r6, r6, #7
  40aba6:	f100 80bd 	bmi.w	40ad24 <_malloc_r+0x194>
  40abaa:	42b1      	cmp	r1, r6
  40abac:	f200 80ba 	bhi.w	40ad24 <_malloc_r+0x194>
  40abb0:	f000 fb9a 	bl	40b2e8 <__malloc_lock>
  40abb4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40abb8:	f0c0 8293 	bcc.w	40b0e2 <_malloc_r+0x552>
  40abbc:	0a73      	lsrs	r3, r6, #9
  40abbe:	f000 80b8 	beq.w	40ad32 <_malloc_r+0x1a2>
  40abc2:	2b04      	cmp	r3, #4
  40abc4:	f200 8179 	bhi.w	40aeba <_malloc_r+0x32a>
  40abc8:	09b3      	lsrs	r3, r6, #6
  40abca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40abce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40abd2:	00c3      	lsls	r3, r0, #3
  40abd4:	4fbf      	ldr	r7, [pc, #764]	; (40aed4 <_malloc_r+0x344>)
  40abd6:	443b      	add	r3, r7
  40abd8:	f1a3 0108 	sub.w	r1, r3, #8
  40abdc:	685c      	ldr	r4, [r3, #4]
  40abde:	42a1      	cmp	r1, r4
  40abe0:	d106      	bne.n	40abf0 <_malloc_r+0x60>
  40abe2:	e00c      	b.n	40abfe <_malloc_r+0x6e>
  40abe4:	2a00      	cmp	r2, #0
  40abe6:	f280 80aa 	bge.w	40ad3e <_malloc_r+0x1ae>
  40abea:	68e4      	ldr	r4, [r4, #12]
  40abec:	42a1      	cmp	r1, r4
  40abee:	d006      	beq.n	40abfe <_malloc_r+0x6e>
  40abf0:	6863      	ldr	r3, [r4, #4]
  40abf2:	f023 0303 	bic.w	r3, r3, #3
  40abf6:	1b9a      	subs	r2, r3, r6
  40abf8:	2a0f      	cmp	r2, #15
  40abfa:	ddf3      	ble.n	40abe4 <_malloc_r+0x54>
  40abfc:	4670      	mov	r0, lr
  40abfe:	693c      	ldr	r4, [r7, #16]
  40ac00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40aee8 <_malloc_r+0x358>
  40ac04:	4574      	cmp	r4, lr
  40ac06:	f000 81ab 	beq.w	40af60 <_malloc_r+0x3d0>
  40ac0a:	6863      	ldr	r3, [r4, #4]
  40ac0c:	f023 0303 	bic.w	r3, r3, #3
  40ac10:	1b9a      	subs	r2, r3, r6
  40ac12:	2a0f      	cmp	r2, #15
  40ac14:	f300 8190 	bgt.w	40af38 <_malloc_r+0x3a8>
  40ac18:	2a00      	cmp	r2, #0
  40ac1a:	f8c7 e014 	str.w	lr, [r7, #20]
  40ac1e:	f8c7 e010 	str.w	lr, [r7, #16]
  40ac22:	f280 809d 	bge.w	40ad60 <_malloc_r+0x1d0>
  40ac26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ac2a:	f080 8161 	bcs.w	40aef0 <_malloc_r+0x360>
  40ac2e:	08db      	lsrs	r3, r3, #3
  40ac30:	f103 0c01 	add.w	ip, r3, #1
  40ac34:	1099      	asrs	r1, r3, #2
  40ac36:	687a      	ldr	r2, [r7, #4]
  40ac38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40ac3c:	f8c4 8008 	str.w	r8, [r4, #8]
  40ac40:	2301      	movs	r3, #1
  40ac42:	408b      	lsls	r3, r1
  40ac44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40ac48:	4313      	orrs	r3, r2
  40ac4a:	3908      	subs	r1, #8
  40ac4c:	60e1      	str	r1, [r4, #12]
  40ac4e:	607b      	str	r3, [r7, #4]
  40ac50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40ac54:	f8c8 400c 	str.w	r4, [r8, #12]
  40ac58:	1082      	asrs	r2, r0, #2
  40ac5a:	2401      	movs	r4, #1
  40ac5c:	4094      	lsls	r4, r2
  40ac5e:	429c      	cmp	r4, r3
  40ac60:	f200 808b 	bhi.w	40ad7a <_malloc_r+0x1ea>
  40ac64:	421c      	tst	r4, r3
  40ac66:	d106      	bne.n	40ac76 <_malloc_r+0xe6>
  40ac68:	f020 0003 	bic.w	r0, r0, #3
  40ac6c:	0064      	lsls	r4, r4, #1
  40ac6e:	421c      	tst	r4, r3
  40ac70:	f100 0004 	add.w	r0, r0, #4
  40ac74:	d0fa      	beq.n	40ac6c <_malloc_r+0xdc>
  40ac76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40ac7a:	46cc      	mov	ip, r9
  40ac7c:	4680      	mov	r8, r0
  40ac7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40ac82:	459c      	cmp	ip, r3
  40ac84:	d107      	bne.n	40ac96 <_malloc_r+0x106>
  40ac86:	e16d      	b.n	40af64 <_malloc_r+0x3d4>
  40ac88:	2a00      	cmp	r2, #0
  40ac8a:	f280 817b 	bge.w	40af84 <_malloc_r+0x3f4>
  40ac8e:	68db      	ldr	r3, [r3, #12]
  40ac90:	459c      	cmp	ip, r3
  40ac92:	f000 8167 	beq.w	40af64 <_malloc_r+0x3d4>
  40ac96:	6859      	ldr	r1, [r3, #4]
  40ac98:	f021 0103 	bic.w	r1, r1, #3
  40ac9c:	1b8a      	subs	r2, r1, r6
  40ac9e:	2a0f      	cmp	r2, #15
  40aca0:	ddf2      	ble.n	40ac88 <_malloc_r+0xf8>
  40aca2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40aca6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40acaa:	9300      	str	r3, [sp, #0]
  40acac:	199c      	adds	r4, r3, r6
  40acae:	4628      	mov	r0, r5
  40acb0:	f046 0601 	orr.w	r6, r6, #1
  40acb4:	f042 0501 	orr.w	r5, r2, #1
  40acb8:	605e      	str	r6, [r3, #4]
  40acba:	f8c8 c00c 	str.w	ip, [r8, #12]
  40acbe:	f8cc 8008 	str.w	r8, [ip, #8]
  40acc2:	617c      	str	r4, [r7, #20]
  40acc4:	613c      	str	r4, [r7, #16]
  40acc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  40acca:	f8c4 e008 	str.w	lr, [r4, #8]
  40acce:	6065      	str	r5, [r4, #4]
  40acd0:	505a      	str	r2, [r3, r1]
  40acd2:	f000 fb0f 	bl	40b2f4 <__malloc_unlock>
  40acd6:	9b00      	ldr	r3, [sp, #0]
  40acd8:	f103 0408 	add.w	r4, r3, #8
  40acdc:	e01e      	b.n	40ad1c <_malloc_r+0x18c>
  40acde:	2910      	cmp	r1, #16
  40ace0:	d820      	bhi.n	40ad24 <_malloc_r+0x194>
  40ace2:	f000 fb01 	bl	40b2e8 <__malloc_lock>
  40ace6:	2610      	movs	r6, #16
  40ace8:	2318      	movs	r3, #24
  40acea:	2002      	movs	r0, #2
  40acec:	4f79      	ldr	r7, [pc, #484]	; (40aed4 <_malloc_r+0x344>)
  40acee:	443b      	add	r3, r7
  40acf0:	f1a3 0208 	sub.w	r2, r3, #8
  40acf4:	685c      	ldr	r4, [r3, #4]
  40acf6:	4294      	cmp	r4, r2
  40acf8:	f000 813d 	beq.w	40af76 <_malloc_r+0x3e6>
  40acfc:	6863      	ldr	r3, [r4, #4]
  40acfe:	68e1      	ldr	r1, [r4, #12]
  40ad00:	68a6      	ldr	r6, [r4, #8]
  40ad02:	f023 0303 	bic.w	r3, r3, #3
  40ad06:	4423      	add	r3, r4
  40ad08:	4628      	mov	r0, r5
  40ad0a:	685a      	ldr	r2, [r3, #4]
  40ad0c:	60f1      	str	r1, [r6, #12]
  40ad0e:	f042 0201 	orr.w	r2, r2, #1
  40ad12:	608e      	str	r6, [r1, #8]
  40ad14:	605a      	str	r2, [r3, #4]
  40ad16:	f000 faed 	bl	40b2f4 <__malloc_unlock>
  40ad1a:	3408      	adds	r4, #8
  40ad1c:	4620      	mov	r0, r4
  40ad1e:	b003      	add	sp, #12
  40ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad24:	2400      	movs	r4, #0
  40ad26:	230c      	movs	r3, #12
  40ad28:	4620      	mov	r0, r4
  40ad2a:	602b      	str	r3, [r5, #0]
  40ad2c:	b003      	add	sp, #12
  40ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad32:	2040      	movs	r0, #64	; 0x40
  40ad34:	f44f 7300 	mov.w	r3, #512	; 0x200
  40ad38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40ad3c:	e74a      	b.n	40abd4 <_malloc_r+0x44>
  40ad3e:	4423      	add	r3, r4
  40ad40:	68e1      	ldr	r1, [r4, #12]
  40ad42:	685a      	ldr	r2, [r3, #4]
  40ad44:	68a6      	ldr	r6, [r4, #8]
  40ad46:	f042 0201 	orr.w	r2, r2, #1
  40ad4a:	60f1      	str	r1, [r6, #12]
  40ad4c:	4628      	mov	r0, r5
  40ad4e:	608e      	str	r6, [r1, #8]
  40ad50:	605a      	str	r2, [r3, #4]
  40ad52:	f000 facf 	bl	40b2f4 <__malloc_unlock>
  40ad56:	3408      	adds	r4, #8
  40ad58:	4620      	mov	r0, r4
  40ad5a:	b003      	add	sp, #12
  40ad5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad60:	4423      	add	r3, r4
  40ad62:	4628      	mov	r0, r5
  40ad64:	685a      	ldr	r2, [r3, #4]
  40ad66:	f042 0201 	orr.w	r2, r2, #1
  40ad6a:	605a      	str	r2, [r3, #4]
  40ad6c:	f000 fac2 	bl	40b2f4 <__malloc_unlock>
  40ad70:	3408      	adds	r4, #8
  40ad72:	4620      	mov	r0, r4
  40ad74:	b003      	add	sp, #12
  40ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad7a:	68bc      	ldr	r4, [r7, #8]
  40ad7c:	6863      	ldr	r3, [r4, #4]
  40ad7e:	f023 0803 	bic.w	r8, r3, #3
  40ad82:	45b0      	cmp	r8, r6
  40ad84:	d304      	bcc.n	40ad90 <_malloc_r+0x200>
  40ad86:	eba8 0306 	sub.w	r3, r8, r6
  40ad8a:	2b0f      	cmp	r3, #15
  40ad8c:	f300 8085 	bgt.w	40ae9a <_malloc_r+0x30a>
  40ad90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40aeec <_malloc_r+0x35c>
  40ad94:	4b50      	ldr	r3, [pc, #320]	; (40aed8 <_malloc_r+0x348>)
  40ad96:	f8d9 2000 	ldr.w	r2, [r9]
  40ad9a:	681b      	ldr	r3, [r3, #0]
  40ad9c:	3201      	adds	r2, #1
  40ad9e:	4433      	add	r3, r6
  40ada0:	eb04 0a08 	add.w	sl, r4, r8
  40ada4:	f000 8155 	beq.w	40b052 <_malloc_r+0x4c2>
  40ada8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40adac:	330f      	adds	r3, #15
  40adae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40adb2:	f02b 0b0f 	bic.w	fp, fp, #15
  40adb6:	4659      	mov	r1, fp
  40adb8:	4628      	mov	r0, r5
  40adba:	f000 ff41 	bl	40bc40 <_sbrk_r>
  40adbe:	1c41      	adds	r1, r0, #1
  40adc0:	4602      	mov	r2, r0
  40adc2:	f000 80fc 	beq.w	40afbe <_malloc_r+0x42e>
  40adc6:	4582      	cmp	sl, r0
  40adc8:	f200 80f7 	bhi.w	40afba <_malloc_r+0x42a>
  40adcc:	4b43      	ldr	r3, [pc, #268]	; (40aedc <_malloc_r+0x34c>)
  40adce:	6819      	ldr	r1, [r3, #0]
  40add0:	4459      	add	r1, fp
  40add2:	6019      	str	r1, [r3, #0]
  40add4:	f000 814d 	beq.w	40b072 <_malloc_r+0x4e2>
  40add8:	f8d9 0000 	ldr.w	r0, [r9]
  40addc:	3001      	adds	r0, #1
  40adde:	bf1b      	ittet	ne
  40ade0:	eba2 0a0a 	subne.w	sl, r2, sl
  40ade4:	4451      	addne	r1, sl
  40ade6:	f8c9 2000 	streq.w	r2, [r9]
  40adea:	6019      	strne	r1, [r3, #0]
  40adec:	f012 0107 	ands.w	r1, r2, #7
  40adf0:	f000 8115 	beq.w	40b01e <_malloc_r+0x48e>
  40adf4:	f1c1 0008 	rsb	r0, r1, #8
  40adf8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40adfc:	4402      	add	r2, r0
  40adfe:	3108      	adds	r1, #8
  40ae00:	eb02 090b 	add.w	r9, r2, fp
  40ae04:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40ae08:	eba1 0909 	sub.w	r9, r1, r9
  40ae0c:	4649      	mov	r1, r9
  40ae0e:	4628      	mov	r0, r5
  40ae10:	9301      	str	r3, [sp, #4]
  40ae12:	9200      	str	r2, [sp, #0]
  40ae14:	f000 ff14 	bl	40bc40 <_sbrk_r>
  40ae18:	1c43      	adds	r3, r0, #1
  40ae1a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ae1e:	f000 8143 	beq.w	40b0a8 <_malloc_r+0x518>
  40ae22:	1a80      	subs	r0, r0, r2
  40ae24:	4448      	add	r0, r9
  40ae26:	f040 0001 	orr.w	r0, r0, #1
  40ae2a:	6819      	ldr	r1, [r3, #0]
  40ae2c:	60ba      	str	r2, [r7, #8]
  40ae2e:	4449      	add	r1, r9
  40ae30:	42bc      	cmp	r4, r7
  40ae32:	6050      	str	r0, [r2, #4]
  40ae34:	6019      	str	r1, [r3, #0]
  40ae36:	d017      	beq.n	40ae68 <_malloc_r+0x2d8>
  40ae38:	f1b8 0f0f 	cmp.w	r8, #15
  40ae3c:	f240 80fb 	bls.w	40b036 <_malloc_r+0x4a6>
  40ae40:	6860      	ldr	r0, [r4, #4]
  40ae42:	f1a8 020c 	sub.w	r2, r8, #12
  40ae46:	f022 0207 	bic.w	r2, r2, #7
  40ae4a:	eb04 0e02 	add.w	lr, r4, r2
  40ae4e:	f000 0001 	and.w	r0, r0, #1
  40ae52:	f04f 0c05 	mov.w	ip, #5
  40ae56:	4310      	orrs	r0, r2
  40ae58:	2a0f      	cmp	r2, #15
  40ae5a:	6060      	str	r0, [r4, #4]
  40ae5c:	f8ce c004 	str.w	ip, [lr, #4]
  40ae60:	f8ce c008 	str.w	ip, [lr, #8]
  40ae64:	f200 8117 	bhi.w	40b096 <_malloc_r+0x506>
  40ae68:	4b1d      	ldr	r3, [pc, #116]	; (40aee0 <_malloc_r+0x350>)
  40ae6a:	68bc      	ldr	r4, [r7, #8]
  40ae6c:	681a      	ldr	r2, [r3, #0]
  40ae6e:	4291      	cmp	r1, r2
  40ae70:	bf88      	it	hi
  40ae72:	6019      	strhi	r1, [r3, #0]
  40ae74:	4b1b      	ldr	r3, [pc, #108]	; (40aee4 <_malloc_r+0x354>)
  40ae76:	681a      	ldr	r2, [r3, #0]
  40ae78:	4291      	cmp	r1, r2
  40ae7a:	6862      	ldr	r2, [r4, #4]
  40ae7c:	bf88      	it	hi
  40ae7e:	6019      	strhi	r1, [r3, #0]
  40ae80:	f022 0203 	bic.w	r2, r2, #3
  40ae84:	4296      	cmp	r6, r2
  40ae86:	eba2 0306 	sub.w	r3, r2, r6
  40ae8a:	d801      	bhi.n	40ae90 <_malloc_r+0x300>
  40ae8c:	2b0f      	cmp	r3, #15
  40ae8e:	dc04      	bgt.n	40ae9a <_malloc_r+0x30a>
  40ae90:	4628      	mov	r0, r5
  40ae92:	f000 fa2f 	bl	40b2f4 <__malloc_unlock>
  40ae96:	2400      	movs	r4, #0
  40ae98:	e740      	b.n	40ad1c <_malloc_r+0x18c>
  40ae9a:	19a2      	adds	r2, r4, r6
  40ae9c:	f043 0301 	orr.w	r3, r3, #1
  40aea0:	f046 0601 	orr.w	r6, r6, #1
  40aea4:	6066      	str	r6, [r4, #4]
  40aea6:	4628      	mov	r0, r5
  40aea8:	60ba      	str	r2, [r7, #8]
  40aeaa:	6053      	str	r3, [r2, #4]
  40aeac:	f000 fa22 	bl	40b2f4 <__malloc_unlock>
  40aeb0:	3408      	adds	r4, #8
  40aeb2:	4620      	mov	r0, r4
  40aeb4:	b003      	add	sp, #12
  40aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aeba:	2b14      	cmp	r3, #20
  40aebc:	d971      	bls.n	40afa2 <_malloc_r+0x412>
  40aebe:	2b54      	cmp	r3, #84	; 0x54
  40aec0:	f200 80a3 	bhi.w	40b00a <_malloc_r+0x47a>
  40aec4:	0b33      	lsrs	r3, r6, #12
  40aec6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40aeca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40aece:	00c3      	lsls	r3, r0, #3
  40aed0:	e680      	b.n	40abd4 <_malloc_r+0x44>
  40aed2:	bf00      	nop
  40aed4:	204005c8 	.word	0x204005c8
  40aed8:	2040cf18 	.word	0x2040cf18
  40aedc:	2040cee8 	.word	0x2040cee8
  40aee0:	2040cf10 	.word	0x2040cf10
  40aee4:	2040cf14 	.word	0x2040cf14
  40aee8:	204005d0 	.word	0x204005d0
  40aeec:	204009d0 	.word	0x204009d0
  40aef0:	0a5a      	lsrs	r2, r3, #9
  40aef2:	2a04      	cmp	r2, #4
  40aef4:	d95b      	bls.n	40afae <_malloc_r+0x41e>
  40aef6:	2a14      	cmp	r2, #20
  40aef8:	f200 80ae 	bhi.w	40b058 <_malloc_r+0x4c8>
  40aefc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40af00:	00c9      	lsls	r1, r1, #3
  40af02:	325b      	adds	r2, #91	; 0x5b
  40af04:	eb07 0c01 	add.w	ip, r7, r1
  40af08:	5879      	ldr	r1, [r7, r1]
  40af0a:	f1ac 0c08 	sub.w	ip, ip, #8
  40af0e:	458c      	cmp	ip, r1
  40af10:	f000 8088 	beq.w	40b024 <_malloc_r+0x494>
  40af14:	684a      	ldr	r2, [r1, #4]
  40af16:	f022 0203 	bic.w	r2, r2, #3
  40af1a:	4293      	cmp	r3, r2
  40af1c:	d273      	bcs.n	40b006 <_malloc_r+0x476>
  40af1e:	6889      	ldr	r1, [r1, #8]
  40af20:	458c      	cmp	ip, r1
  40af22:	d1f7      	bne.n	40af14 <_malloc_r+0x384>
  40af24:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40af28:	687b      	ldr	r3, [r7, #4]
  40af2a:	60e2      	str	r2, [r4, #12]
  40af2c:	f8c4 c008 	str.w	ip, [r4, #8]
  40af30:	6094      	str	r4, [r2, #8]
  40af32:	f8cc 400c 	str.w	r4, [ip, #12]
  40af36:	e68f      	b.n	40ac58 <_malloc_r+0xc8>
  40af38:	19a1      	adds	r1, r4, r6
  40af3a:	f046 0c01 	orr.w	ip, r6, #1
  40af3e:	f042 0601 	orr.w	r6, r2, #1
  40af42:	f8c4 c004 	str.w	ip, [r4, #4]
  40af46:	4628      	mov	r0, r5
  40af48:	6179      	str	r1, [r7, #20]
  40af4a:	6139      	str	r1, [r7, #16]
  40af4c:	f8c1 e00c 	str.w	lr, [r1, #12]
  40af50:	f8c1 e008 	str.w	lr, [r1, #8]
  40af54:	604e      	str	r6, [r1, #4]
  40af56:	50e2      	str	r2, [r4, r3]
  40af58:	f000 f9cc 	bl	40b2f4 <__malloc_unlock>
  40af5c:	3408      	adds	r4, #8
  40af5e:	e6dd      	b.n	40ad1c <_malloc_r+0x18c>
  40af60:	687b      	ldr	r3, [r7, #4]
  40af62:	e679      	b.n	40ac58 <_malloc_r+0xc8>
  40af64:	f108 0801 	add.w	r8, r8, #1
  40af68:	f018 0f03 	tst.w	r8, #3
  40af6c:	f10c 0c08 	add.w	ip, ip, #8
  40af70:	f47f ae85 	bne.w	40ac7e <_malloc_r+0xee>
  40af74:	e02d      	b.n	40afd2 <_malloc_r+0x442>
  40af76:	68dc      	ldr	r4, [r3, #12]
  40af78:	42a3      	cmp	r3, r4
  40af7a:	bf08      	it	eq
  40af7c:	3002      	addeq	r0, #2
  40af7e:	f43f ae3e 	beq.w	40abfe <_malloc_r+0x6e>
  40af82:	e6bb      	b.n	40acfc <_malloc_r+0x16c>
  40af84:	4419      	add	r1, r3
  40af86:	461c      	mov	r4, r3
  40af88:	684a      	ldr	r2, [r1, #4]
  40af8a:	68db      	ldr	r3, [r3, #12]
  40af8c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40af90:	f042 0201 	orr.w	r2, r2, #1
  40af94:	604a      	str	r2, [r1, #4]
  40af96:	4628      	mov	r0, r5
  40af98:	60f3      	str	r3, [r6, #12]
  40af9a:	609e      	str	r6, [r3, #8]
  40af9c:	f000 f9aa 	bl	40b2f4 <__malloc_unlock>
  40afa0:	e6bc      	b.n	40ad1c <_malloc_r+0x18c>
  40afa2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40afa6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40afaa:	00c3      	lsls	r3, r0, #3
  40afac:	e612      	b.n	40abd4 <_malloc_r+0x44>
  40afae:	099a      	lsrs	r2, r3, #6
  40afb0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40afb4:	00c9      	lsls	r1, r1, #3
  40afb6:	3238      	adds	r2, #56	; 0x38
  40afb8:	e7a4      	b.n	40af04 <_malloc_r+0x374>
  40afba:	42bc      	cmp	r4, r7
  40afbc:	d054      	beq.n	40b068 <_malloc_r+0x4d8>
  40afbe:	68bc      	ldr	r4, [r7, #8]
  40afc0:	6862      	ldr	r2, [r4, #4]
  40afc2:	f022 0203 	bic.w	r2, r2, #3
  40afc6:	e75d      	b.n	40ae84 <_malloc_r+0x2f4>
  40afc8:	f859 3908 	ldr.w	r3, [r9], #-8
  40afcc:	4599      	cmp	r9, r3
  40afce:	f040 8086 	bne.w	40b0de <_malloc_r+0x54e>
  40afd2:	f010 0f03 	tst.w	r0, #3
  40afd6:	f100 30ff 	add.w	r0, r0, #4294967295
  40afda:	d1f5      	bne.n	40afc8 <_malloc_r+0x438>
  40afdc:	687b      	ldr	r3, [r7, #4]
  40afde:	ea23 0304 	bic.w	r3, r3, r4
  40afe2:	607b      	str	r3, [r7, #4]
  40afe4:	0064      	lsls	r4, r4, #1
  40afe6:	429c      	cmp	r4, r3
  40afe8:	f63f aec7 	bhi.w	40ad7a <_malloc_r+0x1ea>
  40afec:	2c00      	cmp	r4, #0
  40afee:	f43f aec4 	beq.w	40ad7a <_malloc_r+0x1ea>
  40aff2:	421c      	tst	r4, r3
  40aff4:	4640      	mov	r0, r8
  40aff6:	f47f ae3e 	bne.w	40ac76 <_malloc_r+0xe6>
  40affa:	0064      	lsls	r4, r4, #1
  40affc:	421c      	tst	r4, r3
  40affe:	f100 0004 	add.w	r0, r0, #4
  40b002:	d0fa      	beq.n	40affa <_malloc_r+0x46a>
  40b004:	e637      	b.n	40ac76 <_malloc_r+0xe6>
  40b006:	468c      	mov	ip, r1
  40b008:	e78c      	b.n	40af24 <_malloc_r+0x394>
  40b00a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40b00e:	d815      	bhi.n	40b03c <_malloc_r+0x4ac>
  40b010:	0bf3      	lsrs	r3, r6, #15
  40b012:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40b016:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40b01a:	00c3      	lsls	r3, r0, #3
  40b01c:	e5da      	b.n	40abd4 <_malloc_r+0x44>
  40b01e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40b022:	e6ed      	b.n	40ae00 <_malloc_r+0x270>
  40b024:	687b      	ldr	r3, [r7, #4]
  40b026:	1092      	asrs	r2, r2, #2
  40b028:	2101      	movs	r1, #1
  40b02a:	fa01 f202 	lsl.w	r2, r1, r2
  40b02e:	4313      	orrs	r3, r2
  40b030:	607b      	str	r3, [r7, #4]
  40b032:	4662      	mov	r2, ip
  40b034:	e779      	b.n	40af2a <_malloc_r+0x39a>
  40b036:	2301      	movs	r3, #1
  40b038:	6053      	str	r3, [r2, #4]
  40b03a:	e729      	b.n	40ae90 <_malloc_r+0x300>
  40b03c:	f240 5254 	movw	r2, #1364	; 0x554
  40b040:	4293      	cmp	r3, r2
  40b042:	d822      	bhi.n	40b08a <_malloc_r+0x4fa>
  40b044:	0cb3      	lsrs	r3, r6, #18
  40b046:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40b04a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40b04e:	00c3      	lsls	r3, r0, #3
  40b050:	e5c0      	b.n	40abd4 <_malloc_r+0x44>
  40b052:	f103 0b10 	add.w	fp, r3, #16
  40b056:	e6ae      	b.n	40adb6 <_malloc_r+0x226>
  40b058:	2a54      	cmp	r2, #84	; 0x54
  40b05a:	d829      	bhi.n	40b0b0 <_malloc_r+0x520>
  40b05c:	0b1a      	lsrs	r2, r3, #12
  40b05e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40b062:	00c9      	lsls	r1, r1, #3
  40b064:	326e      	adds	r2, #110	; 0x6e
  40b066:	e74d      	b.n	40af04 <_malloc_r+0x374>
  40b068:	4b20      	ldr	r3, [pc, #128]	; (40b0ec <_malloc_r+0x55c>)
  40b06a:	6819      	ldr	r1, [r3, #0]
  40b06c:	4459      	add	r1, fp
  40b06e:	6019      	str	r1, [r3, #0]
  40b070:	e6b2      	b.n	40add8 <_malloc_r+0x248>
  40b072:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40b076:	2800      	cmp	r0, #0
  40b078:	f47f aeae 	bne.w	40add8 <_malloc_r+0x248>
  40b07c:	eb08 030b 	add.w	r3, r8, fp
  40b080:	68ba      	ldr	r2, [r7, #8]
  40b082:	f043 0301 	orr.w	r3, r3, #1
  40b086:	6053      	str	r3, [r2, #4]
  40b088:	e6ee      	b.n	40ae68 <_malloc_r+0x2d8>
  40b08a:	207f      	movs	r0, #127	; 0x7f
  40b08c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40b090:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40b094:	e59e      	b.n	40abd4 <_malloc_r+0x44>
  40b096:	f104 0108 	add.w	r1, r4, #8
  40b09a:	4628      	mov	r0, r5
  40b09c:	9300      	str	r3, [sp, #0]
  40b09e:	f7ff fa4b 	bl	40a538 <_free_r>
  40b0a2:	9b00      	ldr	r3, [sp, #0]
  40b0a4:	6819      	ldr	r1, [r3, #0]
  40b0a6:	e6df      	b.n	40ae68 <_malloc_r+0x2d8>
  40b0a8:	2001      	movs	r0, #1
  40b0aa:	f04f 0900 	mov.w	r9, #0
  40b0ae:	e6bc      	b.n	40ae2a <_malloc_r+0x29a>
  40b0b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b0b4:	d805      	bhi.n	40b0c2 <_malloc_r+0x532>
  40b0b6:	0bda      	lsrs	r2, r3, #15
  40b0b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40b0bc:	00c9      	lsls	r1, r1, #3
  40b0be:	3277      	adds	r2, #119	; 0x77
  40b0c0:	e720      	b.n	40af04 <_malloc_r+0x374>
  40b0c2:	f240 5154 	movw	r1, #1364	; 0x554
  40b0c6:	428a      	cmp	r2, r1
  40b0c8:	d805      	bhi.n	40b0d6 <_malloc_r+0x546>
  40b0ca:	0c9a      	lsrs	r2, r3, #18
  40b0cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40b0d0:	00c9      	lsls	r1, r1, #3
  40b0d2:	327c      	adds	r2, #124	; 0x7c
  40b0d4:	e716      	b.n	40af04 <_malloc_r+0x374>
  40b0d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40b0da:	227e      	movs	r2, #126	; 0x7e
  40b0dc:	e712      	b.n	40af04 <_malloc_r+0x374>
  40b0de:	687b      	ldr	r3, [r7, #4]
  40b0e0:	e780      	b.n	40afe4 <_malloc_r+0x454>
  40b0e2:	08f0      	lsrs	r0, r6, #3
  40b0e4:	f106 0308 	add.w	r3, r6, #8
  40b0e8:	e600      	b.n	40acec <_malloc_r+0x15c>
  40b0ea:	bf00      	nop
  40b0ec:	2040cee8 	.word	0x2040cee8

0040b0f0 <__ascii_mbtowc>:
  40b0f0:	b082      	sub	sp, #8
  40b0f2:	b149      	cbz	r1, 40b108 <__ascii_mbtowc+0x18>
  40b0f4:	b15a      	cbz	r2, 40b10e <__ascii_mbtowc+0x1e>
  40b0f6:	b16b      	cbz	r3, 40b114 <__ascii_mbtowc+0x24>
  40b0f8:	7813      	ldrb	r3, [r2, #0]
  40b0fa:	600b      	str	r3, [r1, #0]
  40b0fc:	7812      	ldrb	r2, [r2, #0]
  40b0fe:	1c10      	adds	r0, r2, #0
  40b100:	bf18      	it	ne
  40b102:	2001      	movne	r0, #1
  40b104:	b002      	add	sp, #8
  40b106:	4770      	bx	lr
  40b108:	a901      	add	r1, sp, #4
  40b10a:	2a00      	cmp	r2, #0
  40b10c:	d1f3      	bne.n	40b0f6 <__ascii_mbtowc+0x6>
  40b10e:	4610      	mov	r0, r2
  40b110:	b002      	add	sp, #8
  40b112:	4770      	bx	lr
  40b114:	f06f 0001 	mvn.w	r0, #1
  40b118:	e7f4      	b.n	40b104 <__ascii_mbtowc+0x14>
  40b11a:	bf00      	nop
  40b11c:	0000      	movs	r0, r0
	...

0040b120 <memchr>:
  40b120:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b124:	2a10      	cmp	r2, #16
  40b126:	db2b      	blt.n	40b180 <memchr+0x60>
  40b128:	f010 0f07 	tst.w	r0, #7
  40b12c:	d008      	beq.n	40b140 <memchr+0x20>
  40b12e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b132:	3a01      	subs	r2, #1
  40b134:	428b      	cmp	r3, r1
  40b136:	d02d      	beq.n	40b194 <memchr+0x74>
  40b138:	f010 0f07 	tst.w	r0, #7
  40b13c:	b342      	cbz	r2, 40b190 <memchr+0x70>
  40b13e:	d1f6      	bne.n	40b12e <memchr+0xe>
  40b140:	b4f0      	push	{r4, r5, r6, r7}
  40b142:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40b146:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40b14a:	f022 0407 	bic.w	r4, r2, #7
  40b14e:	f07f 0700 	mvns.w	r7, #0
  40b152:	2300      	movs	r3, #0
  40b154:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40b158:	3c08      	subs	r4, #8
  40b15a:	ea85 0501 	eor.w	r5, r5, r1
  40b15e:	ea86 0601 	eor.w	r6, r6, r1
  40b162:	fa85 f547 	uadd8	r5, r5, r7
  40b166:	faa3 f587 	sel	r5, r3, r7
  40b16a:	fa86 f647 	uadd8	r6, r6, r7
  40b16e:	faa5 f687 	sel	r6, r5, r7
  40b172:	b98e      	cbnz	r6, 40b198 <memchr+0x78>
  40b174:	d1ee      	bne.n	40b154 <memchr+0x34>
  40b176:	bcf0      	pop	{r4, r5, r6, r7}
  40b178:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40b17c:	f002 0207 	and.w	r2, r2, #7
  40b180:	b132      	cbz	r2, 40b190 <memchr+0x70>
  40b182:	f810 3b01 	ldrb.w	r3, [r0], #1
  40b186:	3a01      	subs	r2, #1
  40b188:	ea83 0301 	eor.w	r3, r3, r1
  40b18c:	b113      	cbz	r3, 40b194 <memchr+0x74>
  40b18e:	d1f8      	bne.n	40b182 <memchr+0x62>
  40b190:	2000      	movs	r0, #0
  40b192:	4770      	bx	lr
  40b194:	3801      	subs	r0, #1
  40b196:	4770      	bx	lr
  40b198:	2d00      	cmp	r5, #0
  40b19a:	bf06      	itte	eq
  40b19c:	4635      	moveq	r5, r6
  40b19e:	3803      	subeq	r0, #3
  40b1a0:	3807      	subne	r0, #7
  40b1a2:	f015 0f01 	tst.w	r5, #1
  40b1a6:	d107      	bne.n	40b1b8 <memchr+0x98>
  40b1a8:	3001      	adds	r0, #1
  40b1aa:	f415 7f80 	tst.w	r5, #256	; 0x100
  40b1ae:	bf02      	ittt	eq
  40b1b0:	3001      	addeq	r0, #1
  40b1b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40b1b6:	3001      	addeq	r0, #1
  40b1b8:	bcf0      	pop	{r4, r5, r6, r7}
  40b1ba:	3801      	subs	r0, #1
  40b1bc:	4770      	bx	lr
  40b1be:	bf00      	nop

0040b1c0 <memcmp>:
  40b1c0:	2a03      	cmp	r2, #3
  40b1c2:	b470      	push	{r4, r5, r6}
  40b1c4:	d922      	bls.n	40b20c <memcmp+0x4c>
  40b1c6:	ea40 0301 	orr.w	r3, r0, r1
  40b1ca:	079b      	lsls	r3, r3, #30
  40b1cc:	d011      	beq.n	40b1f2 <memcmp+0x32>
  40b1ce:	7803      	ldrb	r3, [r0, #0]
  40b1d0:	780c      	ldrb	r4, [r1, #0]
  40b1d2:	42a3      	cmp	r3, r4
  40b1d4:	d11d      	bne.n	40b212 <memcmp+0x52>
  40b1d6:	440a      	add	r2, r1
  40b1d8:	3101      	adds	r1, #1
  40b1da:	e005      	b.n	40b1e8 <memcmp+0x28>
  40b1dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40b1e0:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b1e4:	42a3      	cmp	r3, r4
  40b1e6:	d114      	bne.n	40b212 <memcmp+0x52>
  40b1e8:	4291      	cmp	r1, r2
  40b1ea:	d1f7      	bne.n	40b1dc <memcmp+0x1c>
  40b1ec:	2000      	movs	r0, #0
  40b1ee:	bc70      	pop	{r4, r5, r6}
  40b1f0:	4770      	bx	lr
  40b1f2:	680d      	ldr	r5, [r1, #0]
  40b1f4:	6806      	ldr	r6, [r0, #0]
  40b1f6:	42ae      	cmp	r6, r5
  40b1f8:	460c      	mov	r4, r1
  40b1fa:	4603      	mov	r3, r0
  40b1fc:	f101 0104 	add.w	r1, r1, #4
  40b200:	f100 0004 	add.w	r0, r0, #4
  40b204:	d108      	bne.n	40b218 <memcmp+0x58>
  40b206:	3a04      	subs	r2, #4
  40b208:	2a03      	cmp	r2, #3
  40b20a:	d8f2      	bhi.n	40b1f2 <memcmp+0x32>
  40b20c:	2a00      	cmp	r2, #0
  40b20e:	d1de      	bne.n	40b1ce <memcmp+0xe>
  40b210:	e7ec      	b.n	40b1ec <memcmp+0x2c>
  40b212:	1b18      	subs	r0, r3, r4
  40b214:	bc70      	pop	{r4, r5, r6}
  40b216:	4770      	bx	lr
  40b218:	4621      	mov	r1, r4
  40b21a:	4618      	mov	r0, r3
  40b21c:	e7d7      	b.n	40b1ce <memcmp+0xe>
  40b21e:	bf00      	nop

0040b220 <memmove>:
  40b220:	4288      	cmp	r0, r1
  40b222:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b224:	d90d      	bls.n	40b242 <memmove+0x22>
  40b226:	188b      	adds	r3, r1, r2
  40b228:	4298      	cmp	r0, r3
  40b22a:	d20a      	bcs.n	40b242 <memmove+0x22>
  40b22c:	1884      	adds	r4, r0, r2
  40b22e:	2a00      	cmp	r2, #0
  40b230:	d051      	beq.n	40b2d6 <memmove+0xb6>
  40b232:	4622      	mov	r2, r4
  40b234:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40b238:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40b23c:	4299      	cmp	r1, r3
  40b23e:	d1f9      	bne.n	40b234 <memmove+0x14>
  40b240:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b242:	2a0f      	cmp	r2, #15
  40b244:	d948      	bls.n	40b2d8 <memmove+0xb8>
  40b246:	ea41 0300 	orr.w	r3, r1, r0
  40b24a:	079b      	lsls	r3, r3, #30
  40b24c:	d146      	bne.n	40b2dc <memmove+0xbc>
  40b24e:	f100 0410 	add.w	r4, r0, #16
  40b252:	f101 0310 	add.w	r3, r1, #16
  40b256:	4615      	mov	r5, r2
  40b258:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40b25c:	f844 6c10 	str.w	r6, [r4, #-16]
  40b260:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40b264:	f844 6c0c 	str.w	r6, [r4, #-12]
  40b268:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40b26c:	f844 6c08 	str.w	r6, [r4, #-8]
  40b270:	3d10      	subs	r5, #16
  40b272:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40b276:	f844 6c04 	str.w	r6, [r4, #-4]
  40b27a:	2d0f      	cmp	r5, #15
  40b27c:	f103 0310 	add.w	r3, r3, #16
  40b280:	f104 0410 	add.w	r4, r4, #16
  40b284:	d8e8      	bhi.n	40b258 <memmove+0x38>
  40b286:	f1a2 0310 	sub.w	r3, r2, #16
  40b28a:	f023 030f 	bic.w	r3, r3, #15
  40b28e:	f002 0e0f 	and.w	lr, r2, #15
  40b292:	3310      	adds	r3, #16
  40b294:	f1be 0f03 	cmp.w	lr, #3
  40b298:	4419      	add	r1, r3
  40b29a:	4403      	add	r3, r0
  40b29c:	d921      	bls.n	40b2e2 <memmove+0xc2>
  40b29e:	1f1e      	subs	r6, r3, #4
  40b2a0:	460d      	mov	r5, r1
  40b2a2:	4674      	mov	r4, lr
  40b2a4:	3c04      	subs	r4, #4
  40b2a6:	f855 7b04 	ldr.w	r7, [r5], #4
  40b2aa:	f846 7f04 	str.w	r7, [r6, #4]!
  40b2ae:	2c03      	cmp	r4, #3
  40b2b0:	d8f8      	bhi.n	40b2a4 <memmove+0x84>
  40b2b2:	f1ae 0404 	sub.w	r4, lr, #4
  40b2b6:	f024 0403 	bic.w	r4, r4, #3
  40b2ba:	3404      	adds	r4, #4
  40b2bc:	4421      	add	r1, r4
  40b2be:	4423      	add	r3, r4
  40b2c0:	f002 0203 	and.w	r2, r2, #3
  40b2c4:	b162      	cbz	r2, 40b2e0 <memmove+0xc0>
  40b2c6:	3b01      	subs	r3, #1
  40b2c8:	440a      	add	r2, r1
  40b2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
  40b2d2:	428a      	cmp	r2, r1
  40b2d4:	d1f9      	bne.n	40b2ca <memmove+0xaa>
  40b2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b2d8:	4603      	mov	r3, r0
  40b2da:	e7f3      	b.n	40b2c4 <memmove+0xa4>
  40b2dc:	4603      	mov	r3, r0
  40b2de:	e7f2      	b.n	40b2c6 <memmove+0xa6>
  40b2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b2e2:	4672      	mov	r2, lr
  40b2e4:	e7ee      	b.n	40b2c4 <memmove+0xa4>
  40b2e6:	bf00      	nop

0040b2e8 <__malloc_lock>:
  40b2e8:	4801      	ldr	r0, [pc, #4]	; (40b2f0 <__malloc_lock+0x8>)
  40b2ea:	f7ff bbcd 	b.w	40aa88 <__retarget_lock_acquire_recursive>
  40b2ee:	bf00      	nop
  40b2f0:	2040d048 	.word	0x2040d048

0040b2f4 <__malloc_unlock>:
  40b2f4:	4801      	ldr	r0, [pc, #4]	; (40b2fc <__malloc_unlock+0x8>)
  40b2f6:	f7ff bbc9 	b.w	40aa8c <__retarget_lock_release_recursive>
  40b2fa:	bf00      	nop
  40b2fc:	2040d048 	.word	0x2040d048

0040b300 <_Balloc>:
  40b300:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b302:	b570      	push	{r4, r5, r6, lr}
  40b304:	4605      	mov	r5, r0
  40b306:	460c      	mov	r4, r1
  40b308:	b14b      	cbz	r3, 40b31e <_Balloc+0x1e>
  40b30a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40b30e:	b180      	cbz	r0, 40b332 <_Balloc+0x32>
  40b310:	6802      	ldr	r2, [r0, #0]
  40b312:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40b316:	2300      	movs	r3, #0
  40b318:	6103      	str	r3, [r0, #16]
  40b31a:	60c3      	str	r3, [r0, #12]
  40b31c:	bd70      	pop	{r4, r5, r6, pc}
  40b31e:	2221      	movs	r2, #33	; 0x21
  40b320:	2104      	movs	r1, #4
  40b322:	f000 fedd 	bl	40c0e0 <_calloc_r>
  40b326:	64e8      	str	r0, [r5, #76]	; 0x4c
  40b328:	4603      	mov	r3, r0
  40b32a:	2800      	cmp	r0, #0
  40b32c:	d1ed      	bne.n	40b30a <_Balloc+0xa>
  40b32e:	2000      	movs	r0, #0
  40b330:	bd70      	pop	{r4, r5, r6, pc}
  40b332:	2101      	movs	r1, #1
  40b334:	fa01 f604 	lsl.w	r6, r1, r4
  40b338:	1d72      	adds	r2, r6, #5
  40b33a:	4628      	mov	r0, r5
  40b33c:	0092      	lsls	r2, r2, #2
  40b33e:	f000 fecf 	bl	40c0e0 <_calloc_r>
  40b342:	2800      	cmp	r0, #0
  40b344:	d0f3      	beq.n	40b32e <_Balloc+0x2e>
  40b346:	6044      	str	r4, [r0, #4]
  40b348:	6086      	str	r6, [r0, #8]
  40b34a:	e7e4      	b.n	40b316 <_Balloc+0x16>

0040b34c <_Bfree>:
  40b34c:	b131      	cbz	r1, 40b35c <_Bfree+0x10>
  40b34e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b350:	684a      	ldr	r2, [r1, #4]
  40b352:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40b356:	6008      	str	r0, [r1, #0]
  40b358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40b35c:	4770      	bx	lr
  40b35e:	bf00      	nop

0040b360 <__multadd>:
  40b360:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b362:	690c      	ldr	r4, [r1, #16]
  40b364:	b083      	sub	sp, #12
  40b366:	460d      	mov	r5, r1
  40b368:	4606      	mov	r6, r0
  40b36a:	f101 0e14 	add.w	lr, r1, #20
  40b36e:	2700      	movs	r7, #0
  40b370:	f8de 0000 	ldr.w	r0, [lr]
  40b374:	b281      	uxth	r1, r0
  40b376:	fb02 3301 	mla	r3, r2, r1, r3
  40b37a:	0c01      	lsrs	r1, r0, #16
  40b37c:	0c18      	lsrs	r0, r3, #16
  40b37e:	fb02 0101 	mla	r1, r2, r1, r0
  40b382:	b29b      	uxth	r3, r3
  40b384:	3701      	adds	r7, #1
  40b386:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40b38a:	42bc      	cmp	r4, r7
  40b38c:	f84e 3b04 	str.w	r3, [lr], #4
  40b390:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40b394:	dcec      	bgt.n	40b370 <__multadd+0x10>
  40b396:	b13b      	cbz	r3, 40b3a8 <__multadd+0x48>
  40b398:	68aa      	ldr	r2, [r5, #8]
  40b39a:	4294      	cmp	r4, r2
  40b39c:	da07      	bge.n	40b3ae <__multadd+0x4e>
  40b39e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40b3a2:	3401      	adds	r4, #1
  40b3a4:	6153      	str	r3, [r2, #20]
  40b3a6:	612c      	str	r4, [r5, #16]
  40b3a8:	4628      	mov	r0, r5
  40b3aa:	b003      	add	sp, #12
  40b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b3ae:	6869      	ldr	r1, [r5, #4]
  40b3b0:	9301      	str	r3, [sp, #4]
  40b3b2:	3101      	adds	r1, #1
  40b3b4:	4630      	mov	r0, r6
  40b3b6:	f7ff ffa3 	bl	40b300 <_Balloc>
  40b3ba:	692a      	ldr	r2, [r5, #16]
  40b3bc:	3202      	adds	r2, #2
  40b3be:	f105 010c 	add.w	r1, r5, #12
  40b3c2:	4607      	mov	r7, r0
  40b3c4:	0092      	lsls	r2, r2, #2
  40b3c6:	300c      	adds	r0, #12
  40b3c8:	f7fa ff4a 	bl	406260 <memcpy>
  40b3cc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40b3ce:	6869      	ldr	r1, [r5, #4]
  40b3d0:	9b01      	ldr	r3, [sp, #4]
  40b3d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40b3d6:	6028      	str	r0, [r5, #0]
  40b3d8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40b3dc:	463d      	mov	r5, r7
  40b3de:	e7de      	b.n	40b39e <__multadd+0x3e>

0040b3e0 <__hi0bits>:
  40b3e0:	0c02      	lsrs	r2, r0, #16
  40b3e2:	0412      	lsls	r2, r2, #16
  40b3e4:	4603      	mov	r3, r0
  40b3e6:	b9b2      	cbnz	r2, 40b416 <__hi0bits+0x36>
  40b3e8:	0403      	lsls	r3, r0, #16
  40b3ea:	2010      	movs	r0, #16
  40b3ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40b3f0:	bf04      	itt	eq
  40b3f2:	021b      	lsleq	r3, r3, #8
  40b3f4:	3008      	addeq	r0, #8
  40b3f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40b3fa:	bf04      	itt	eq
  40b3fc:	011b      	lsleq	r3, r3, #4
  40b3fe:	3004      	addeq	r0, #4
  40b400:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40b404:	bf04      	itt	eq
  40b406:	009b      	lsleq	r3, r3, #2
  40b408:	3002      	addeq	r0, #2
  40b40a:	2b00      	cmp	r3, #0
  40b40c:	db02      	blt.n	40b414 <__hi0bits+0x34>
  40b40e:	005b      	lsls	r3, r3, #1
  40b410:	d403      	bmi.n	40b41a <__hi0bits+0x3a>
  40b412:	2020      	movs	r0, #32
  40b414:	4770      	bx	lr
  40b416:	2000      	movs	r0, #0
  40b418:	e7e8      	b.n	40b3ec <__hi0bits+0xc>
  40b41a:	3001      	adds	r0, #1
  40b41c:	4770      	bx	lr
  40b41e:	bf00      	nop

0040b420 <__lo0bits>:
  40b420:	6803      	ldr	r3, [r0, #0]
  40b422:	f013 0207 	ands.w	r2, r3, #7
  40b426:	4601      	mov	r1, r0
  40b428:	d007      	beq.n	40b43a <__lo0bits+0x1a>
  40b42a:	07da      	lsls	r2, r3, #31
  40b42c:	d421      	bmi.n	40b472 <__lo0bits+0x52>
  40b42e:	0798      	lsls	r0, r3, #30
  40b430:	d421      	bmi.n	40b476 <__lo0bits+0x56>
  40b432:	089b      	lsrs	r3, r3, #2
  40b434:	600b      	str	r3, [r1, #0]
  40b436:	2002      	movs	r0, #2
  40b438:	4770      	bx	lr
  40b43a:	b298      	uxth	r0, r3
  40b43c:	b198      	cbz	r0, 40b466 <__lo0bits+0x46>
  40b43e:	4610      	mov	r0, r2
  40b440:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b444:	bf04      	itt	eq
  40b446:	0a1b      	lsreq	r3, r3, #8
  40b448:	3008      	addeq	r0, #8
  40b44a:	071a      	lsls	r2, r3, #28
  40b44c:	bf04      	itt	eq
  40b44e:	091b      	lsreq	r3, r3, #4
  40b450:	3004      	addeq	r0, #4
  40b452:	079a      	lsls	r2, r3, #30
  40b454:	bf04      	itt	eq
  40b456:	089b      	lsreq	r3, r3, #2
  40b458:	3002      	addeq	r0, #2
  40b45a:	07da      	lsls	r2, r3, #31
  40b45c:	d407      	bmi.n	40b46e <__lo0bits+0x4e>
  40b45e:	085b      	lsrs	r3, r3, #1
  40b460:	d104      	bne.n	40b46c <__lo0bits+0x4c>
  40b462:	2020      	movs	r0, #32
  40b464:	4770      	bx	lr
  40b466:	0c1b      	lsrs	r3, r3, #16
  40b468:	2010      	movs	r0, #16
  40b46a:	e7e9      	b.n	40b440 <__lo0bits+0x20>
  40b46c:	3001      	adds	r0, #1
  40b46e:	600b      	str	r3, [r1, #0]
  40b470:	4770      	bx	lr
  40b472:	2000      	movs	r0, #0
  40b474:	4770      	bx	lr
  40b476:	085b      	lsrs	r3, r3, #1
  40b478:	600b      	str	r3, [r1, #0]
  40b47a:	2001      	movs	r0, #1
  40b47c:	4770      	bx	lr
  40b47e:	bf00      	nop

0040b480 <__i2b>:
  40b480:	b510      	push	{r4, lr}
  40b482:	460c      	mov	r4, r1
  40b484:	2101      	movs	r1, #1
  40b486:	f7ff ff3b 	bl	40b300 <_Balloc>
  40b48a:	2201      	movs	r2, #1
  40b48c:	6144      	str	r4, [r0, #20]
  40b48e:	6102      	str	r2, [r0, #16]
  40b490:	bd10      	pop	{r4, pc}
  40b492:	bf00      	nop

0040b494 <__multiply>:
  40b494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b498:	690c      	ldr	r4, [r1, #16]
  40b49a:	6915      	ldr	r5, [r2, #16]
  40b49c:	42ac      	cmp	r4, r5
  40b49e:	b083      	sub	sp, #12
  40b4a0:	468b      	mov	fp, r1
  40b4a2:	4616      	mov	r6, r2
  40b4a4:	da04      	bge.n	40b4b0 <__multiply+0x1c>
  40b4a6:	4622      	mov	r2, r4
  40b4a8:	46b3      	mov	fp, r6
  40b4aa:	462c      	mov	r4, r5
  40b4ac:	460e      	mov	r6, r1
  40b4ae:	4615      	mov	r5, r2
  40b4b0:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b4b4:	f8db 1004 	ldr.w	r1, [fp, #4]
  40b4b8:	eb04 0805 	add.w	r8, r4, r5
  40b4bc:	4598      	cmp	r8, r3
  40b4be:	bfc8      	it	gt
  40b4c0:	3101      	addgt	r1, #1
  40b4c2:	f7ff ff1d 	bl	40b300 <_Balloc>
  40b4c6:	f100 0914 	add.w	r9, r0, #20
  40b4ca:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40b4ce:	45d1      	cmp	r9, sl
  40b4d0:	9000      	str	r0, [sp, #0]
  40b4d2:	d205      	bcs.n	40b4e0 <__multiply+0x4c>
  40b4d4:	464b      	mov	r3, r9
  40b4d6:	2100      	movs	r1, #0
  40b4d8:	f843 1b04 	str.w	r1, [r3], #4
  40b4dc:	459a      	cmp	sl, r3
  40b4de:	d8fb      	bhi.n	40b4d8 <__multiply+0x44>
  40b4e0:	f106 0c14 	add.w	ip, r6, #20
  40b4e4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40b4e8:	f10b 0b14 	add.w	fp, fp, #20
  40b4ec:	459c      	cmp	ip, r3
  40b4ee:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40b4f2:	d24c      	bcs.n	40b58e <__multiply+0xfa>
  40b4f4:	f8cd a004 	str.w	sl, [sp, #4]
  40b4f8:	469a      	mov	sl, r3
  40b4fa:	f8dc 5000 	ldr.w	r5, [ip]
  40b4fe:	b2af      	uxth	r7, r5
  40b500:	b1ef      	cbz	r7, 40b53e <__multiply+0xaa>
  40b502:	2100      	movs	r1, #0
  40b504:	464d      	mov	r5, r9
  40b506:	465e      	mov	r6, fp
  40b508:	460c      	mov	r4, r1
  40b50a:	f856 2b04 	ldr.w	r2, [r6], #4
  40b50e:	6828      	ldr	r0, [r5, #0]
  40b510:	b293      	uxth	r3, r2
  40b512:	b281      	uxth	r1, r0
  40b514:	fb07 1303 	mla	r3, r7, r3, r1
  40b518:	0c12      	lsrs	r2, r2, #16
  40b51a:	0c01      	lsrs	r1, r0, #16
  40b51c:	4423      	add	r3, r4
  40b51e:	fb07 1102 	mla	r1, r7, r2, r1
  40b522:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40b526:	b29b      	uxth	r3, r3
  40b528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40b52c:	45b6      	cmp	lr, r6
  40b52e:	f845 3b04 	str.w	r3, [r5], #4
  40b532:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40b536:	d8e8      	bhi.n	40b50a <__multiply+0x76>
  40b538:	602c      	str	r4, [r5, #0]
  40b53a:	f8dc 5000 	ldr.w	r5, [ip]
  40b53e:	0c2d      	lsrs	r5, r5, #16
  40b540:	d01d      	beq.n	40b57e <__multiply+0xea>
  40b542:	f8d9 3000 	ldr.w	r3, [r9]
  40b546:	4648      	mov	r0, r9
  40b548:	461c      	mov	r4, r3
  40b54a:	4659      	mov	r1, fp
  40b54c:	2200      	movs	r2, #0
  40b54e:	880e      	ldrh	r6, [r1, #0]
  40b550:	0c24      	lsrs	r4, r4, #16
  40b552:	fb05 4406 	mla	r4, r5, r6, r4
  40b556:	4422      	add	r2, r4
  40b558:	b29b      	uxth	r3, r3
  40b55a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40b55e:	f840 3b04 	str.w	r3, [r0], #4
  40b562:	f851 3b04 	ldr.w	r3, [r1], #4
  40b566:	6804      	ldr	r4, [r0, #0]
  40b568:	0c1b      	lsrs	r3, r3, #16
  40b56a:	b2a6      	uxth	r6, r4
  40b56c:	fb05 6303 	mla	r3, r5, r3, r6
  40b570:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40b574:	458e      	cmp	lr, r1
  40b576:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40b57a:	d8e8      	bhi.n	40b54e <__multiply+0xba>
  40b57c:	6003      	str	r3, [r0, #0]
  40b57e:	f10c 0c04 	add.w	ip, ip, #4
  40b582:	45e2      	cmp	sl, ip
  40b584:	f109 0904 	add.w	r9, r9, #4
  40b588:	d8b7      	bhi.n	40b4fa <__multiply+0x66>
  40b58a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40b58e:	f1b8 0f00 	cmp.w	r8, #0
  40b592:	dd0b      	ble.n	40b5ac <__multiply+0x118>
  40b594:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40b598:	f1aa 0a04 	sub.w	sl, sl, #4
  40b59c:	b11b      	cbz	r3, 40b5a6 <__multiply+0x112>
  40b59e:	e005      	b.n	40b5ac <__multiply+0x118>
  40b5a0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40b5a4:	b913      	cbnz	r3, 40b5ac <__multiply+0x118>
  40b5a6:	f1b8 0801 	subs.w	r8, r8, #1
  40b5aa:	d1f9      	bne.n	40b5a0 <__multiply+0x10c>
  40b5ac:	9800      	ldr	r0, [sp, #0]
  40b5ae:	f8c0 8010 	str.w	r8, [r0, #16]
  40b5b2:	b003      	add	sp, #12
  40b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b5b8 <__pow5mult>:
  40b5b8:	f012 0303 	ands.w	r3, r2, #3
  40b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b5c0:	4614      	mov	r4, r2
  40b5c2:	4607      	mov	r7, r0
  40b5c4:	d12e      	bne.n	40b624 <__pow5mult+0x6c>
  40b5c6:	460d      	mov	r5, r1
  40b5c8:	10a4      	asrs	r4, r4, #2
  40b5ca:	d01c      	beq.n	40b606 <__pow5mult+0x4e>
  40b5cc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40b5ce:	b396      	cbz	r6, 40b636 <__pow5mult+0x7e>
  40b5d0:	07e3      	lsls	r3, r4, #31
  40b5d2:	f04f 0800 	mov.w	r8, #0
  40b5d6:	d406      	bmi.n	40b5e6 <__pow5mult+0x2e>
  40b5d8:	1064      	asrs	r4, r4, #1
  40b5da:	d014      	beq.n	40b606 <__pow5mult+0x4e>
  40b5dc:	6830      	ldr	r0, [r6, #0]
  40b5de:	b1a8      	cbz	r0, 40b60c <__pow5mult+0x54>
  40b5e0:	4606      	mov	r6, r0
  40b5e2:	07e3      	lsls	r3, r4, #31
  40b5e4:	d5f8      	bpl.n	40b5d8 <__pow5mult+0x20>
  40b5e6:	4632      	mov	r2, r6
  40b5e8:	4629      	mov	r1, r5
  40b5ea:	4638      	mov	r0, r7
  40b5ec:	f7ff ff52 	bl	40b494 <__multiply>
  40b5f0:	b1b5      	cbz	r5, 40b620 <__pow5mult+0x68>
  40b5f2:	686a      	ldr	r2, [r5, #4]
  40b5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b5f6:	1064      	asrs	r4, r4, #1
  40b5f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b5fc:	6029      	str	r1, [r5, #0]
  40b5fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b602:	4605      	mov	r5, r0
  40b604:	d1ea      	bne.n	40b5dc <__pow5mult+0x24>
  40b606:	4628      	mov	r0, r5
  40b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b60c:	4632      	mov	r2, r6
  40b60e:	4631      	mov	r1, r6
  40b610:	4638      	mov	r0, r7
  40b612:	f7ff ff3f 	bl	40b494 <__multiply>
  40b616:	6030      	str	r0, [r6, #0]
  40b618:	f8c0 8000 	str.w	r8, [r0]
  40b61c:	4606      	mov	r6, r0
  40b61e:	e7e0      	b.n	40b5e2 <__pow5mult+0x2a>
  40b620:	4605      	mov	r5, r0
  40b622:	e7d9      	b.n	40b5d8 <__pow5mult+0x20>
  40b624:	1e5a      	subs	r2, r3, #1
  40b626:	4d0b      	ldr	r5, [pc, #44]	; (40b654 <__pow5mult+0x9c>)
  40b628:	2300      	movs	r3, #0
  40b62a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b62e:	f7ff fe97 	bl	40b360 <__multadd>
  40b632:	4605      	mov	r5, r0
  40b634:	e7c8      	b.n	40b5c8 <__pow5mult+0x10>
  40b636:	2101      	movs	r1, #1
  40b638:	4638      	mov	r0, r7
  40b63a:	f7ff fe61 	bl	40b300 <_Balloc>
  40b63e:	f240 2171 	movw	r1, #625	; 0x271
  40b642:	2201      	movs	r2, #1
  40b644:	2300      	movs	r3, #0
  40b646:	6141      	str	r1, [r0, #20]
  40b648:	6102      	str	r2, [r0, #16]
  40b64a:	4606      	mov	r6, r0
  40b64c:	64b8      	str	r0, [r7, #72]	; 0x48
  40b64e:	6003      	str	r3, [r0, #0]
  40b650:	e7be      	b.n	40b5d0 <__pow5mult+0x18>
  40b652:	bf00      	nop
  40b654:	0040e108 	.word	0x0040e108

0040b658 <__lshift>:
  40b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b65c:	4691      	mov	r9, r2
  40b65e:	690a      	ldr	r2, [r1, #16]
  40b660:	688b      	ldr	r3, [r1, #8]
  40b662:	ea4f 1469 	mov.w	r4, r9, asr #5
  40b666:	eb04 0802 	add.w	r8, r4, r2
  40b66a:	f108 0501 	add.w	r5, r8, #1
  40b66e:	429d      	cmp	r5, r3
  40b670:	460e      	mov	r6, r1
  40b672:	4607      	mov	r7, r0
  40b674:	6849      	ldr	r1, [r1, #4]
  40b676:	dd04      	ble.n	40b682 <__lshift+0x2a>
  40b678:	005b      	lsls	r3, r3, #1
  40b67a:	429d      	cmp	r5, r3
  40b67c:	f101 0101 	add.w	r1, r1, #1
  40b680:	dcfa      	bgt.n	40b678 <__lshift+0x20>
  40b682:	4638      	mov	r0, r7
  40b684:	f7ff fe3c 	bl	40b300 <_Balloc>
  40b688:	2c00      	cmp	r4, #0
  40b68a:	f100 0314 	add.w	r3, r0, #20
  40b68e:	dd06      	ble.n	40b69e <__lshift+0x46>
  40b690:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40b694:	2100      	movs	r1, #0
  40b696:	f843 1b04 	str.w	r1, [r3], #4
  40b69a:	429a      	cmp	r2, r3
  40b69c:	d1fb      	bne.n	40b696 <__lshift+0x3e>
  40b69e:	6934      	ldr	r4, [r6, #16]
  40b6a0:	f106 0114 	add.w	r1, r6, #20
  40b6a4:	f019 091f 	ands.w	r9, r9, #31
  40b6a8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40b6ac:	d01d      	beq.n	40b6ea <__lshift+0x92>
  40b6ae:	f1c9 0c20 	rsb	ip, r9, #32
  40b6b2:	2200      	movs	r2, #0
  40b6b4:	680c      	ldr	r4, [r1, #0]
  40b6b6:	fa04 f409 	lsl.w	r4, r4, r9
  40b6ba:	4314      	orrs	r4, r2
  40b6bc:	f843 4b04 	str.w	r4, [r3], #4
  40b6c0:	f851 2b04 	ldr.w	r2, [r1], #4
  40b6c4:	458e      	cmp	lr, r1
  40b6c6:	fa22 f20c 	lsr.w	r2, r2, ip
  40b6ca:	d8f3      	bhi.n	40b6b4 <__lshift+0x5c>
  40b6cc:	601a      	str	r2, [r3, #0]
  40b6ce:	b10a      	cbz	r2, 40b6d4 <__lshift+0x7c>
  40b6d0:	f108 0502 	add.w	r5, r8, #2
  40b6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b6d6:	6872      	ldr	r2, [r6, #4]
  40b6d8:	3d01      	subs	r5, #1
  40b6da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b6de:	6105      	str	r5, [r0, #16]
  40b6e0:	6031      	str	r1, [r6, #0]
  40b6e2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b6ea:	3b04      	subs	r3, #4
  40b6ec:	f851 2b04 	ldr.w	r2, [r1], #4
  40b6f0:	f843 2f04 	str.w	r2, [r3, #4]!
  40b6f4:	458e      	cmp	lr, r1
  40b6f6:	d8f9      	bhi.n	40b6ec <__lshift+0x94>
  40b6f8:	e7ec      	b.n	40b6d4 <__lshift+0x7c>
  40b6fa:	bf00      	nop

0040b6fc <__mcmp>:
  40b6fc:	b430      	push	{r4, r5}
  40b6fe:	690b      	ldr	r3, [r1, #16]
  40b700:	4605      	mov	r5, r0
  40b702:	6900      	ldr	r0, [r0, #16]
  40b704:	1ac0      	subs	r0, r0, r3
  40b706:	d10f      	bne.n	40b728 <__mcmp+0x2c>
  40b708:	009b      	lsls	r3, r3, #2
  40b70a:	3514      	adds	r5, #20
  40b70c:	3114      	adds	r1, #20
  40b70e:	4419      	add	r1, r3
  40b710:	442b      	add	r3, r5
  40b712:	e001      	b.n	40b718 <__mcmp+0x1c>
  40b714:	429d      	cmp	r5, r3
  40b716:	d207      	bcs.n	40b728 <__mcmp+0x2c>
  40b718:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b71c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b720:	4294      	cmp	r4, r2
  40b722:	d0f7      	beq.n	40b714 <__mcmp+0x18>
  40b724:	d302      	bcc.n	40b72c <__mcmp+0x30>
  40b726:	2001      	movs	r0, #1
  40b728:	bc30      	pop	{r4, r5}
  40b72a:	4770      	bx	lr
  40b72c:	f04f 30ff 	mov.w	r0, #4294967295
  40b730:	e7fa      	b.n	40b728 <__mcmp+0x2c>
  40b732:	bf00      	nop

0040b734 <__mdiff>:
  40b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b738:	690f      	ldr	r7, [r1, #16]
  40b73a:	460e      	mov	r6, r1
  40b73c:	6911      	ldr	r1, [r2, #16]
  40b73e:	1a7f      	subs	r7, r7, r1
  40b740:	2f00      	cmp	r7, #0
  40b742:	4690      	mov	r8, r2
  40b744:	d117      	bne.n	40b776 <__mdiff+0x42>
  40b746:	0089      	lsls	r1, r1, #2
  40b748:	f106 0514 	add.w	r5, r6, #20
  40b74c:	f102 0e14 	add.w	lr, r2, #20
  40b750:	186b      	adds	r3, r5, r1
  40b752:	4471      	add	r1, lr
  40b754:	e001      	b.n	40b75a <__mdiff+0x26>
  40b756:	429d      	cmp	r5, r3
  40b758:	d25c      	bcs.n	40b814 <__mdiff+0xe0>
  40b75a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40b75e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40b762:	42a2      	cmp	r2, r4
  40b764:	d0f7      	beq.n	40b756 <__mdiff+0x22>
  40b766:	d25e      	bcs.n	40b826 <__mdiff+0xf2>
  40b768:	4633      	mov	r3, r6
  40b76a:	462c      	mov	r4, r5
  40b76c:	4646      	mov	r6, r8
  40b76e:	4675      	mov	r5, lr
  40b770:	4698      	mov	r8, r3
  40b772:	2701      	movs	r7, #1
  40b774:	e005      	b.n	40b782 <__mdiff+0x4e>
  40b776:	db58      	blt.n	40b82a <__mdiff+0xf6>
  40b778:	f106 0514 	add.w	r5, r6, #20
  40b77c:	f108 0414 	add.w	r4, r8, #20
  40b780:	2700      	movs	r7, #0
  40b782:	6871      	ldr	r1, [r6, #4]
  40b784:	f7ff fdbc 	bl	40b300 <_Balloc>
  40b788:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b78c:	6936      	ldr	r6, [r6, #16]
  40b78e:	60c7      	str	r7, [r0, #12]
  40b790:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40b794:	46a6      	mov	lr, r4
  40b796:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40b79a:	f100 0414 	add.w	r4, r0, #20
  40b79e:	2300      	movs	r3, #0
  40b7a0:	f85e 1b04 	ldr.w	r1, [lr], #4
  40b7a4:	f855 8b04 	ldr.w	r8, [r5], #4
  40b7a8:	b28a      	uxth	r2, r1
  40b7aa:	fa13 f388 	uxtah	r3, r3, r8
  40b7ae:	0c09      	lsrs	r1, r1, #16
  40b7b0:	1a9a      	subs	r2, r3, r2
  40b7b2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40b7b6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40b7ba:	b292      	uxth	r2, r2
  40b7bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40b7c0:	45f4      	cmp	ip, lr
  40b7c2:	f844 2b04 	str.w	r2, [r4], #4
  40b7c6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40b7ca:	d8e9      	bhi.n	40b7a0 <__mdiff+0x6c>
  40b7cc:	42af      	cmp	r7, r5
  40b7ce:	d917      	bls.n	40b800 <__mdiff+0xcc>
  40b7d0:	46a4      	mov	ip, r4
  40b7d2:	46ae      	mov	lr, r5
  40b7d4:	f85e 2b04 	ldr.w	r2, [lr], #4
  40b7d8:	fa13 f382 	uxtah	r3, r3, r2
  40b7dc:	1419      	asrs	r1, r3, #16
  40b7de:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40b7e2:	b29b      	uxth	r3, r3
  40b7e4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40b7e8:	4577      	cmp	r7, lr
  40b7ea:	f84c 2b04 	str.w	r2, [ip], #4
  40b7ee:	ea4f 4321 	mov.w	r3, r1, asr #16
  40b7f2:	d8ef      	bhi.n	40b7d4 <__mdiff+0xa0>
  40b7f4:	43ed      	mvns	r5, r5
  40b7f6:	442f      	add	r7, r5
  40b7f8:	f027 0703 	bic.w	r7, r7, #3
  40b7fc:	3704      	adds	r7, #4
  40b7fe:	443c      	add	r4, r7
  40b800:	3c04      	subs	r4, #4
  40b802:	b922      	cbnz	r2, 40b80e <__mdiff+0xda>
  40b804:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40b808:	3e01      	subs	r6, #1
  40b80a:	2b00      	cmp	r3, #0
  40b80c:	d0fa      	beq.n	40b804 <__mdiff+0xd0>
  40b80e:	6106      	str	r6, [r0, #16]
  40b810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b814:	2100      	movs	r1, #0
  40b816:	f7ff fd73 	bl	40b300 <_Balloc>
  40b81a:	2201      	movs	r2, #1
  40b81c:	2300      	movs	r3, #0
  40b81e:	6102      	str	r2, [r0, #16]
  40b820:	6143      	str	r3, [r0, #20]
  40b822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b826:	4674      	mov	r4, lr
  40b828:	e7ab      	b.n	40b782 <__mdiff+0x4e>
  40b82a:	4633      	mov	r3, r6
  40b82c:	f106 0414 	add.w	r4, r6, #20
  40b830:	f102 0514 	add.w	r5, r2, #20
  40b834:	4616      	mov	r6, r2
  40b836:	2701      	movs	r7, #1
  40b838:	4698      	mov	r8, r3
  40b83a:	e7a2      	b.n	40b782 <__mdiff+0x4e>

0040b83c <__d2b>:
  40b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b840:	b082      	sub	sp, #8
  40b842:	2101      	movs	r1, #1
  40b844:	461c      	mov	r4, r3
  40b846:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40b84a:	4615      	mov	r5, r2
  40b84c:	9e08      	ldr	r6, [sp, #32]
  40b84e:	f7ff fd57 	bl	40b300 <_Balloc>
  40b852:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40b856:	4680      	mov	r8, r0
  40b858:	b10f      	cbz	r7, 40b85e <__d2b+0x22>
  40b85a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40b85e:	9401      	str	r4, [sp, #4]
  40b860:	b31d      	cbz	r5, 40b8aa <__d2b+0x6e>
  40b862:	a802      	add	r0, sp, #8
  40b864:	f840 5d08 	str.w	r5, [r0, #-8]!
  40b868:	f7ff fdda 	bl	40b420 <__lo0bits>
  40b86c:	2800      	cmp	r0, #0
  40b86e:	d134      	bne.n	40b8da <__d2b+0x9e>
  40b870:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40b874:	f8c8 2014 	str.w	r2, [r8, #20]
  40b878:	2b00      	cmp	r3, #0
  40b87a:	bf0c      	ite	eq
  40b87c:	2101      	moveq	r1, #1
  40b87e:	2102      	movne	r1, #2
  40b880:	f8c8 3018 	str.w	r3, [r8, #24]
  40b884:	f8c8 1010 	str.w	r1, [r8, #16]
  40b888:	b9df      	cbnz	r7, 40b8c2 <__d2b+0x86>
  40b88a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40b88e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40b892:	6030      	str	r0, [r6, #0]
  40b894:	6918      	ldr	r0, [r3, #16]
  40b896:	f7ff fda3 	bl	40b3e0 <__hi0bits>
  40b89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b89c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40b8a0:	6018      	str	r0, [r3, #0]
  40b8a2:	4640      	mov	r0, r8
  40b8a4:	b002      	add	sp, #8
  40b8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b8aa:	a801      	add	r0, sp, #4
  40b8ac:	f7ff fdb8 	bl	40b420 <__lo0bits>
  40b8b0:	9b01      	ldr	r3, [sp, #4]
  40b8b2:	f8c8 3014 	str.w	r3, [r8, #20]
  40b8b6:	2101      	movs	r1, #1
  40b8b8:	3020      	adds	r0, #32
  40b8ba:	f8c8 1010 	str.w	r1, [r8, #16]
  40b8be:	2f00      	cmp	r7, #0
  40b8c0:	d0e3      	beq.n	40b88a <__d2b+0x4e>
  40b8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b8c4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40b8c8:	4407      	add	r7, r0
  40b8ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40b8ce:	6037      	str	r7, [r6, #0]
  40b8d0:	6018      	str	r0, [r3, #0]
  40b8d2:	4640      	mov	r0, r8
  40b8d4:	b002      	add	sp, #8
  40b8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b8da:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40b8de:	f1c0 0220 	rsb	r2, r0, #32
  40b8e2:	fa03 f202 	lsl.w	r2, r3, r2
  40b8e6:	430a      	orrs	r2, r1
  40b8e8:	40c3      	lsrs	r3, r0
  40b8ea:	9301      	str	r3, [sp, #4]
  40b8ec:	f8c8 2014 	str.w	r2, [r8, #20]
  40b8f0:	e7c2      	b.n	40b878 <__d2b+0x3c>
  40b8f2:	bf00      	nop

0040b8f4 <_realloc_r>:
  40b8f4:	2900      	cmp	r1, #0
  40b8f6:	f000 8095 	beq.w	40ba24 <_realloc_r+0x130>
  40b8fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b8fe:	460d      	mov	r5, r1
  40b900:	4616      	mov	r6, r2
  40b902:	b083      	sub	sp, #12
  40b904:	4680      	mov	r8, r0
  40b906:	f106 070b 	add.w	r7, r6, #11
  40b90a:	f7ff fced 	bl	40b2e8 <__malloc_lock>
  40b90e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40b912:	2f16      	cmp	r7, #22
  40b914:	f02e 0403 	bic.w	r4, lr, #3
  40b918:	f1a5 0908 	sub.w	r9, r5, #8
  40b91c:	d83c      	bhi.n	40b998 <_realloc_r+0xa4>
  40b91e:	2210      	movs	r2, #16
  40b920:	4617      	mov	r7, r2
  40b922:	42be      	cmp	r6, r7
  40b924:	d83d      	bhi.n	40b9a2 <_realloc_r+0xae>
  40b926:	4294      	cmp	r4, r2
  40b928:	da43      	bge.n	40b9b2 <_realloc_r+0xbe>
  40b92a:	4bc4      	ldr	r3, [pc, #784]	; (40bc3c <_realloc_r+0x348>)
  40b92c:	6899      	ldr	r1, [r3, #8]
  40b92e:	eb09 0004 	add.w	r0, r9, r4
  40b932:	4288      	cmp	r0, r1
  40b934:	f000 80b4 	beq.w	40baa0 <_realloc_r+0x1ac>
  40b938:	6843      	ldr	r3, [r0, #4]
  40b93a:	f023 0101 	bic.w	r1, r3, #1
  40b93e:	4401      	add	r1, r0
  40b940:	6849      	ldr	r1, [r1, #4]
  40b942:	07c9      	lsls	r1, r1, #31
  40b944:	d54c      	bpl.n	40b9e0 <_realloc_r+0xec>
  40b946:	f01e 0f01 	tst.w	lr, #1
  40b94a:	f000 809b 	beq.w	40ba84 <_realloc_r+0x190>
  40b94e:	4631      	mov	r1, r6
  40b950:	4640      	mov	r0, r8
  40b952:	f7ff f91d 	bl	40ab90 <_malloc_r>
  40b956:	4606      	mov	r6, r0
  40b958:	2800      	cmp	r0, #0
  40b95a:	d03a      	beq.n	40b9d2 <_realloc_r+0xde>
  40b95c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b960:	f023 0301 	bic.w	r3, r3, #1
  40b964:	444b      	add	r3, r9
  40b966:	f1a0 0208 	sub.w	r2, r0, #8
  40b96a:	429a      	cmp	r2, r3
  40b96c:	f000 8121 	beq.w	40bbb2 <_realloc_r+0x2be>
  40b970:	1f22      	subs	r2, r4, #4
  40b972:	2a24      	cmp	r2, #36	; 0x24
  40b974:	f200 8107 	bhi.w	40bb86 <_realloc_r+0x292>
  40b978:	2a13      	cmp	r2, #19
  40b97a:	f200 80db 	bhi.w	40bb34 <_realloc_r+0x240>
  40b97e:	4603      	mov	r3, r0
  40b980:	462a      	mov	r2, r5
  40b982:	6811      	ldr	r1, [r2, #0]
  40b984:	6019      	str	r1, [r3, #0]
  40b986:	6851      	ldr	r1, [r2, #4]
  40b988:	6059      	str	r1, [r3, #4]
  40b98a:	6892      	ldr	r2, [r2, #8]
  40b98c:	609a      	str	r2, [r3, #8]
  40b98e:	4629      	mov	r1, r5
  40b990:	4640      	mov	r0, r8
  40b992:	f7fe fdd1 	bl	40a538 <_free_r>
  40b996:	e01c      	b.n	40b9d2 <_realloc_r+0xde>
  40b998:	f027 0707 	bic.w	r7, r7, #7
  40b99c:	2f00      	cmp	r7, #0
  40b99e:	463a      	mov	r2, r7
  40b9a0:	dabf      	bge.n	40b922 <_realloc_r+0x2e>
  40b9a2:	2600      	movs	r6, #0
  40b9a4:	230c      	movs	r3, #12
  40b9a6:	4630      	mov	r0, r6
  40b9a8:	f8c8 3000 	str.w	r3, [r8]
  40b9ac:	b003      	add	sp, #12
  40b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b9b2:	462e      	mov	r6, r5
  40b9b4:	1be3      	subs	r3, r4, r7
  40b9b6:	2b0f      	cmp	r3, #15
  40b9b8:	d81e      	bhi.n	40b9f8 <_realloc_r+0x104>
  40b9ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40b9be:	f003 0301 	and.w	r3, r3, #1
  40b9c2:	4323      	orrs	r3, r4
  40b9c4:	444c      	add	r4, r9
  40b9c6:	f8c9 3004 	str.w	r3, [r9, #4]
  40b9ca:	6863      	ldr	r3, [r4, #4]
  40b9cc:	f043 0301 	orr.w	r3, r3, #1
  40b9d0:	6063      	str	r3, [r4, #4]
  40b9d2:	4640      	mov	r0, r8
  40b9d4:	f7ff fc8e 	bl	40b2f4 <__malloc_unlock>
  40b9d8:	4630      	mov	r0, r6
  40b9da:	b003      	add	sp, #12
  40b9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b9e0:	f023 0303 	bic.w	r3, r3, #3
  40b9e4:	18e1      	adds	r1, r4, r3
  40b9e6:	4291      	cmp	r1, r2
  40b9e8:	db1f      	blt.n	40ba2a <_realloc_r+0x136>
  40b9ea:	68c3      	ldr	r3, [r0, #12]
  40b9ec:	6882      	ldr	r2, [r0, #8]
  40b9ee:	462e      	mov	r6, r5
  40b9f0:	60d3      	str	r3, [r2, #12]
  40b9f2:	460c      	mov	r4, r1
  40b9f4:	609a      	str	r2, [r3, #8]
  40b9f6:	e7dd      	b.n	40b9b4 <_realloc_r+0xc0>
  40b9f8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b9fc:	eb09 0107 	add.w	r1, r9, r7
  40ba00:	f002 0201 	and.w	r2, r2, #1
  40ba04:	444c      	add	r4, r9
  40ba06:	f043 0301 	orr.w	r3, r3, #1
  40ba0a:	4317      	orrs	r7, r2
  40ba0c:	f8c9 7004 	str.w	r7, [r9, #4]
  40ba10:	604b      	str	r3, [r1, #4]
  40ba12:	6863      	ldr	r3, [r4, #4]
  40ba14:	f043 0301 	orr.w	r3, r3, #1
  40ba18:	3108      	adds	r1, #8
  40ba1a:	6063      	str	r3, [r4, #4]
  40ba1c:	4640      	mov	r0, r8
  40ba1e:	f7fe fd8b 	bl	40a538 <_free_r>
  40ba22:	e7d6      	b.n	40b9d2 <_realloc_r+0xde>
  40ba24:	4611      	mov	r1, r2
  40ba26:	f7ff b8b3 	b.w	40ab90 <_malloc_r>
  40ba2a:	f01e 0f01 	tst.w	lr, #1
  40ba2e:	d18e      	bne.n	40b94e <_realloc_r+0x5a>
  40ba30:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ba34:	eba9 0a01 	sub.w	sl, r9, r1
  40ba38:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ba3c:	f021 0103 	bic.w	r1, r1, #3
  40ba40:	440b      	add	r3, r1
  40ba42:	4423      	add	r3, r4
  40ba44:	4293      	cmp	r3, r2
  40ba46:	db25      	blt.n	40ba94 <_realloc_r+0x1a0>
  40ba48:	68c2      	ldr	r2, [r0, #12]
  40ba4a:	6881      	ldr	r1, [r0, #8]
  40ba4c:	4656      	mov	r6, sl
  40ba4e:	60ca      	str	r2, [r1, #12]
  40ba50:	6091      	str	r1, [r2, #8]
  40ba52:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ba56:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ba5a:	1f22      	subs	r2, r4, #4
  40ba5c:	2a24      	cmp	r2, #36	; 0x24
  40ba5e:	60c1      	str	r1, [r0, #12]
  40ba60:	6088      	str	r0, [r1, #8]
  40ba62:	f200 8094 	bhi.w	40bb8e <_realloc_r+0x29a>
  40ba66:	2a13      	cmp	r2, #19
  40ba68:	d96f      	bls.n	40bb4a <_realloc_r+0x256>
  40ba6a:	6829      	ldr	r1, [r5, #0]
  40ba6c:	f8ca 1008 	str.w	r1, [sl, #8]
  40ba70:	6869      	ldr	r1, [r5, #4]
  40ba72:	f8ca 100c 	str.w	r1, [sl, #12]
  40ba76:	2a1b      	cmp	r2, #27
  40ba78:	f200 80a2 	bhi.w	40bbc0 <_realloc_r+0x2cc>
  40ba7c:	3508      	adds	r5, #8
  40ba7e:	f10a 0210 	add.w	r2, sl, #16
  40ba82:	e063      	b.n	40bb4c <_realloc_r+0x258>
  40ba84:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40ba88:	eba9 0a03 	sub.w	sl, r9, r3
  40ba8c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ba90:	f021 0103 	bic.w	r1, r1, #3
  40ba94:	1863      	adds	r3, r4, r1
  40ba96:	4293      	cmp	r3, r2
  40ba98:	f6ff af59 	blt.w	40b94e <_realloc_r+0x5a>
  40ba9c:	4656      	mov	r6, sl
  40ba9e:	e7d8      	b.n	40ba52 <_realloc_r+0x15e>
  40baa0:	6841      	ldr	r1, [r0, #4]
  40baa2:	f021 0b03 	bic.w	fp, r1, #3
  40baa6:	44a3      	add	fp, r4
  40baa8:	f107 0010 	add.w	r0, r7, #16
  40baac:	4583      	cmp	fp, r0
  40baae:	da56      	bge.n	40bb5e <_realloc_r+0x26a>
  40bab0:	f01e 0f01 	tst.w	lr, #1
  40bab4:	f47f af4b 	bne.w	40b94e <_realloc_r+0x5a>
  40bab8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40babc:	eba9 0a01 	sub.w	sl, r9, r1
  40bac0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40bac4:	f021 0103 	bic.w	r1, r1, #3
  40bac8:	448b      	add	fp, r1
  40baca:	4558      	cmp	r0, fp
  40bacc:	dce2      	bgt.n	40ba94 <_realloc_r+0x1a0>
  40bace:	4656      	mov	r6, sl
  40bad0:	f8da 100c 	ldr.w	r1, [sl, #12]
  40bad4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40bad8:	1f22      	subs	r2, r4, #4
  40bada:	2a24      	cmp	r2, #36	; 0x24
  40badc:	60c1      	str	r1, [r0, #12]
  40bade:	6088      	str	r0, [r1, #8]
  40bae0:	f200 808f 	bhi.w	40bc02 <_realloc_r+0x30e>
  40bae4:	2a13      	cmp	r2, #19
  40bae6:	f240 808a 	bls.w	40bbfe <_realloc_r+0x30a>
  40baea:	6829      	ldr	r1, [r5, #0]
  40baec:	f8ca 1008 	str.w	r1, [sl, #8]
  40baf0:	6869      	ldr	r1, [r5, #4]
  40baf2:	f8ca 100c 	str.w	r1, [sl, #12]
  40baf6:	2a1b      	cmp	r2, #27
  40baf8:	f200 808a 	bhi.w	40bc10 <_realloc_r+0x31c>
  40bafc:	3508      	adds	r5, #8
  40bafe:	f10a 0210 	add.w	r2, sl, #16
  40bb02:	6829      	ldr	r1, [r5, #0]
  40bb04:	6011      	str	r1, [r2, #0]
  40bb06:	6869      	ldr	r1, [r5, #4]
  40bb08:	6051      	str	r1, [r2, #4]
  40bb0a:	68a9      	ldr	r1, [r5, #8]
  40bb0c:	6091      	str	r1, [r2, #8]
  40bb0e:	eb0a 0107 	add.w	r1, sl, r7
  40bb12:	ebab 0207 	sub.w	r2, fp, r7
  40bb16:	f042 0201 	orr.w	r2, r2, #1
  40bb1a:	6099      	str	r1, [r3, #8]
  40bb1c:	604a      	str	r2, [r1, #4]
  40bb1e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40bb22:	f003 0301 	and.w	r3, r3, #1
  40bb26:	431f      	orrs	r7, r3
  40bb28:	4640      	mov	r0, r8
  40bb2a:	f8ca 7004 	str.w	r7, [sl, #4]
  40bb2e:	f7ff fbe1 	bl	40b2f4 <__malloc_unlock>
  40bb32:	e751      	b.n	40b9d8 <_realloc_r+0xe4>
  40bb34:	682b      	ldr	r3, [r5, #0]
  40bb36:	6003      	str	r3, [r0, #0]
  40bb38:	686b      	ldr	r3, [r5, #4]
  40bb3a:	6043      	str	r3, [r0, #4]
  40bb3c:	2a1b      	cmp	r2, #27
  40bb3e:	d82d      	bhi.n	40bb9c <_realloc_r+0x2a8>
  40bb40:	f100 0308 	add.w	r3, r0, #8
  40bb44:	f105 0208 	add.w	r2, r5, #8
  40bb48:	e71b      	b.n	40b982 <_realloc_r+0x8e>
  40bb4a:	4632      	mov	r2, r6
  40bb4c:	6829      	ldr	r1, [r5, #0]
  40bb4e:	6011      	str	r1, [r2, #0]
  40bb50:	6869      	ldr	r1, [r5, #4]
  40bb52:	6051      	str	r1, [r2, #4]
  40bb54:	68a9      	ldr	r1, [r5, #8]
  40bb56:	6091      	str	r1, [r2, #8]
  40bb58:	461c      	mov	r4, r3
  40bb5a:	46d1      	mov	r9, sl
  40bb5c:	e72a      	b.n	40b9b4 <_realloc_r+0xc0>
  40bb5e:	eb09 0107 	add.w	r1, r9, r7
  40bb62:	ebab 0b07 	sub.w	fp, fp, r7
  40bb66:	f04b 0201 	orr.w	r2, fp, #1
  40bb6a:	6099      	str	r1, [r3, #8]
  40bb6c:	604a      	str	r2, [r1, #4]
  40bb6e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40bb72:	f003 0301 	and.w	r3, r3, #1
  40bb76:	431f      	orrs	r7, r3
  40bb78:	4640      	mov	r0, r8
  40bb7a:	f845 7c04 	str.w	r7, [r5, #-4]
  40bb7e:	f7ff fbb9 	bl	40b2f4 <__malloc_unlock>
  40bb82:	462e      	mov	r6, r5
  40bb84:	e728      	b.n	40b9d8 <_realloc_r+0xe4>
  40bb86:	4629      	mov	r1, r5
  40bb88:	f7ff fb4a 	bl	40b220 <memmove>
  40bb8c:	e6ff      	b.n	40b98e <_realloc_r+0x9a>
  40bb8e:	4629      	mov	r1, r5
  40bb90:	4630      	mov	r0, r6
  40bb92:	461c      	mov	r4, r3
  40bb94:	46d1      	mov	r9, sl
  40bb96:	f7ff fb43 	bl	40b220 <memmove>
  40bb9a:	e70b      	b.n	40b9b4 <_realloc_r+0xc0>
  40bb9c:	68ab      	ldr	r3, [r5, #8]
  40bb9e:	6083      	str	r3, [r0, #8]
  40bba0:	68eb      	ldr	r3, [r5, #12]
  40bba2:	60c3      	str	r3, [r0, #12]
  40bba4:	2a24      	cmp	r2, #36	; 0x24
  40bba6:	d017      	beq.n	40bbd8 <_realloc_r+0x2e4>
  40bba8:	f100 0310 	add.w	r3, r0, #16
  40bbac:	f105 0210 	add.w	r2, r5, #16
  40bbb0:	e6e7      	b.n	40b982 <_realloc_r+0x8e>
  40bbb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40bbb6:	f023 0303 	bic.w	r3, r3, #3
  40bbba:	441c      	add	r4, r3
  40bbbc:	462e      	mov	r6, r5
  40bbbe:	e6f9      	b.n	40b9b4 <_realloc_r+0xc0>
  40bbc0:	68a9      	ldr	r1, [r5, #8]
  40bbc2:	f8ca 1010 	str.w	r1, [sl, #16]
  40bbc6:	68e9      	ldr	r1, [r5, #12]
  40bbc8:	f8ca 1014 	str.w	r1, [sl, #20]
  40bbcc:	2a24      	cmp	r2, #36	; 0x24
  40bbce:	d00c      	beq.n	40bbea <_realloc_r+0x2f6>
  40bbd0:	3510      	adds	r5, #16
  40bbd2:	f10a 0218 	add.w	r2, sl, #24
  40bbd6:	e7b9      	b.n	40bb4c <_realloc_r+0x258>
  40bbd8:	692b      	ldr	r3, [r5, #16]
  40bbda:	6103      	str	r3, [r0, #16]
  40bbdc:	696b      	ldr	r3, [r5, #20]
  40bbde:	6143      	str	r3, [r0, #20]
  40bbe0:	f105 0218 	add.w	r2, r5, #24
  40bbe4:	f100 0318 	add.w	r3, r0, #24
  40bbe8:	e6cb      	b.n	40b982 <_realloc_r+0x8e>
  40bbea:	692a      	ldr	r2, [r5, #16]
  40bbec:	f8ca 2018 	str.w	r2, [sl, #24]
  40bbf0:	696a      	ldr	r2, [r5, #20]
  40bbf2:	f8ca 201c 	str.w	r2, [sl, #28]
  40bbf6:	3518      	adds	r5, #24
  40bbf8:	f10a 0220 	add.w	r2, sl, #32
  40bbfc:	e7a6      	b.n	40bb4c <_realloc_r+0x258>
  40bbfe:	4632      	mov	r2, r6
  40bc00:	e77f      	b.n	40bb02 <_realloc_r+0x20e>
  40bc02:	4629      	mov	r1, r5
  40bc04:	4630      	mov	r0, r6
  40bc06:	9301      	str	r3, [sp, #4]
  40bc08:	f7ff fb0a 	bl	40b220 <memmove>
  40bc0c:	9b01      	ldr	r3, [sp, #4]
  40bc0e:	e77e      	b.n	40bb0e <_realloc_r+0x21a>
  40bc10:	68a9      	ldr	r1, [r5, #8]
  40bc12:	f8ca 1010 	str.w	r1, [sl, #16]
  40bc16:	68e9      	ldr	r1, [r5, #12]
  40bc18:	f8ca 1014 	str.w	r1, [sl, #20]
  40bc1c:	2a24      	cmp	r2, #36	; 0x24
  40bc1e:	d003      	beq.n	40bc28 <_realloc_r+0x334>
  40bc20:	3510      	adds	r5, #16
  40bc22:	f10a 0218 	add.w	r2, sl, #24
  40bc26:	e76c      	b.n	40bb02 <_realloc_r+0x20e>
  40bc28:	692a      	ldr	r2, [r5, #16]
  40bc2a:	f8ca 2018 	str.w	r2, [sl, #24]
  40bc2e:	696a      	ldr	r2, [r5, #20]
  40bc30:	f8ca 201c 	str.w	r2, [sl, #28]
  40bc34:	3518      	adds	r5, #24
  40bc36:	f10a 0220 	add.w	r2, sl, #32
  40bc3a:	e762      	b.n	40bb02 <_realloc_r+0x20e>
  40bc3c:	204005c8 	.word	0x204005c8

0040bc40 <_sbrk_r>:
  40bc40:	b538      	push	{r3, r4, r5, lr}
  40bc42:	4c07      	ldr	r4, [pc, #28]	; (40bc60 <_sbrk_r+0x20>)
  40bc44:	2300      	movs	r3, #0
  40bc46:	4605      	mov	r5, r0
  40bc48:	4608      	mov	r0, r1
  40bc4a:	6023      	str	r3, [r4, #0]
  40bc4c:	f7f9 fef0 	bl	405a30 <_sbrk>
  40bc50:	1c43      	adds	r3, r0, #1
  40bc52:	d000      	beq.n	40bc56 <_sbrk_r+0x16>
  40bc54:	bd38      	pop	{r3, r4, r5, pc}
  40bc56:	6823      	ldr	r3, [r4, #0]
  40bc58:	2b00      	cmp	r3, #0
  40bc5a:	d0fb      	beq.n	40bc54 <_sbrk_r+0x14>
  40bc5c:	602b      	str	r3, [r5, #0]
  40bc5e:	bd38      	pop	{r3, r4, r5, pc}
  40bc60:	2040d05c 	.word	0x2040d05c

0040bc64 <__sread>:
  40bc64:	b510      	push	{r4, lr}
  40bc66:	460c      	mov	r4, r1
  40bc68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bc6c:	f000 fb18 	bl	40c2a0 <_read_r>
  40bc70:	2800      	cmp	r0, #0
  40bc72:	db03      	blt.n	40bc7c <__sread+0x18>
  40bc74:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40bc76:	4403      	add	r3, r0
  40bc78:	6523      	str	r3, [r4, #80]	; 0x50
  40bc7a:	bd10      	pop	{r4, pc}
  40bc7c:	89a3      	ldrh	r3, [r4, #12]
  40bc7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40bc82:	81a3      	strh	r3, [r4, #12]
  40bc84:	bd10      	pop	{r4, pc}
  40bc86:	bf00      	nop

0040bc88 <__swrite>:
  40bc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bc8c:	4616      	mov	r6, r2
  40bc8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40bc92:	461f      	mov	r7, r3
  40bc94:	05d3      	lsls	r3, r2, #23
  40bc96:	460c      	mov	r4, r1
  40bc98:	4605      	mov	r5, r0
  40bc9a:	d507      	bpl.n	40bcac <__swrite+0x24>
  40bc9c:	2200      	movs	r2, #0
  40bc9e:	2302      	movs	r3, #2
  40bca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bca4:	f000 fae6 	bl	40c274 <_lseek_r>
  40bca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bcac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40bcb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40bcb4:	81a2      	strh	r2, [r4, #12]
  40bcb6:	463b      	mov	r3, r7
  40bcb8:	4632      	mov	r2, r6
  40bcba:	4628      	mov	r0, r5
  40bcbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bcc0:	f000 b996 	b.w	40bff0 <_write_r>

0040bcc4 <__sseek>:
  40bcc4:	b510      	push	{r4, lr}
  40bcc6:	460c      	mov	r4, r1
  40bcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bccc:	f000 fad2 	bl	40c274 <_lseek_r>
  40bcd0:	89a3      	ldrh	r3, [r4, #12]
  40bcd2:	1c42      	adds	r2, r0, #1
  40bcd4:	bf0e      	itee	eq
  40bcd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40bcda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40bcde:	6520      	strne	r0, [r4, #80]	; 0x50
  40bce0:	81a3      	strh	r3, [r4, #12]
  40bce2:	bd10      	pop	{r4, pc}

0040bce4 <__sclose>:
  40bce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40bce8:	f000 ba2a 	b.w	40c140 <_close_r>

0040bcec <strchr>:
  40bcec:	b2c9      	uxtb	r1, r1
  40bcee:	2900      	cmp	r1, #0
  40bcf0:	d041      	beq.n	40bd76 <strchr+0x8a>
  40bcf2:	0782      	lsls	r2, r0, #30
  40bcf4:	b4f0      	push	{r4, r5, r6, r7}
  40bcf6:	d067      	beq.n	40bdc8 <strchr+0xdc>
  40bcf8:	7803      	ldrb	r3, [r0, #0]
  40bcfa:	2b00      	cmp	r3, #0
  40bcfc:	d068      	beq.n	40bdd0 <strchr+0xe4>
  40bcfe:	4299      	cmp	r1, r3
  40bd00:	d037      	beq.n	40bd72 <strchr+0x86>
  40bd02:	1c43      	adds	r3, r0, #1
  40bd04:	e004      	b.n	40bd10 <strchr+0x24>
  40bd06:	f813 0b01 	ldrb.w	r0, [r3], #1
  40bd0a:	b390      	cbz	r0, 40bd72 <strchr+0x86>
  40bd0c:	4281      	cmp	r1, r0
  40bd0e:	d02f      	beq.n	40bd70 <strchr+0x84>
  40bd10:	079a      	lsls	r2, r3, #30
  40bd12:	461c      	mov	r4, r3
  40bd14:	d1f7      	bne.n	40bd06 <strchr+0x1a>
  40bd16:	6825      	ldr	r5, [r4, #0]
  40bd18:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  40bd1c:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40bd20:	ea83 0605 	eor.w	r6, r3, r5
  40bd24:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  40bd28:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  40bd2c:	ea20 0006 	bic.w	r0, r0, r6
  40bd30:	ea22 0205 	bic.w	r2, r2, r5
  40bd34:	4302      	orrs	r2, r0
  40bd36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40bd3a:	d111      	bne.n	40bd60 <strchr+0x74>
  40bd3c:	4620      	mov	r0, r4
  40bd3e:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40bd42:	ea83 0706 	eor.w	r7, r3, r6
  40bd46:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  40bd4a:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40bd4e:	ea25 0507 	bic.w	r5, r5, r7
  40bd52:	ea22 0206 	bic.w	r2, r2, r6
  40bd56:	432a      	orrs	r2, r5
  40bd58:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40bd5c:	d0ef      	beq.n	40bd3e <strchr+0x52>
  40bd5e:	4604      	mov	r4, r0
  40bd60:	7820      	ldrb	r0, [r4, #0]
  40bd62:	b918      	cbnz	r0, 40bd6c <strchr+0x80>
  40bd64:	e005      	b.n	40bd72 <strchr+0x86>
  40bd66:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  40bd6a:	b110      	cbz	r0, 40bd72 <strchr+0x86>
  40bd6c:	4281      	cmp	r1, r0
  40bd6e:	d1fa      	bne.n	40bd66 <strchr+0x7a>
  40bd70:	4620      	mov	r0, r4
  40bd72:	bcf0      	pop	{r4, r5, r6, r7}
  40bd74:	4770      	bx	lr
  40bd76:	0783      	lsls	r3, r0, #30
  40bd78:	d024      	beq.n	40bdc4 <strchr+0xd8>
  40bd7a:	7803      	ldrb	r3, [r0, #0]
  40bd7c:	2b00      	cmp	r3, #0
  40bd7e:	d0f9      	beq.n	40bd74 <strchr+0x88>
  40bd80:	1c43      	adds	r3, r0, #1
  40bd82:	e003      	b.n	40bd8c <strchr+0xa0>
  40bd84:	7802      	ldrb	r2, [r0, #0]
  40bd86:	3301      	adds	r3, #1
  40bd88:	2a00      	cmp	r2, #0
  40bd8a:	d0f3      	beq.n	40bd74 <strchr+0x88>
  40bd8c:	0799      	lsls	r1, r3, #30
  40bd8e:	4618      	mov	r0, r3
  40bd90:	d1f8      	bne.n	40bd84 <strchr+0x98>
  40bd92:	6819      	ldr	r1, [r3, #0]
  40bd94:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40bd98:	ea22 0201 	bic.w	r2, r2, r1
  40bd9c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40bda0:	d108      	bne.n	40bdb4 <strchr+0xc8>
  40bda2:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40bda6:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40bdaa:	ea22 0201 	bic.w	r2, r2, r1
  40bdae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40bdb2:	d0f6      	beq.n	40bda2 <strchr+0xb6>
  40bdb4:	781a      	ldrb	r2, [r3, #0]
  40bdb6:	4618      	mov	r0, r3
  40bdb8:	b142      	cbz	r2, 40bdcc <strchr+0xe0>
  40bdba:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40bdbe:	2b00      	cmp	r3, #0
  40bdc0:	d1fb      	bne.n	40bdba <strchr+0xce>
  40bdc2:	4770      	bx	lr
  40bdc4:	4603      	mov	r3, r0
  40bdc6:	e7e4      	b.n	40bd92 <strchr+0xa6>
  40bdc8:	4604      	mov	r4, r0
  40bdca:	e7a4      	b.n	40bd16 <strchr+0x2a>
  40bdcc:	4618      	mov	r0, r3
  40bdce:	4770      	bx	lr
  40bdd0:	4618      	mov	r0, r3
  40bdd2:	e7ce      	b.n	40bd72 <strchr+0x86>

0040bdd4 <__ssprint_r>:
  40bdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bdd8:	6893      	ldr	r3, [r2, #8]
  40bdda:	b083      	sub	sp, #12
  40bddc:	4690      	mov	r8, r2
  40bdde:	2b00      	cmp	r3, #0
  40bde0:	d070      	beq.n	40bec4 <__ssprint_r+0xf0>
  40bde2:	4682      	mov	sl, r0
  40bde4:	460c      	mov	r4, r1
  40bde6:	6817      	ldr	r7, [r2, #0]
  40bde8:	688d      	ldr	r5, [r1, #8]
  40bdea:	6808      	ldr	r0, [r1, #0]
  40bdec:	e042      	b.n	40be74 <__ssprint_r+0xa0>
  40bdee:	89a3      	ldrh	r3, [r4, #12]
  40bdf0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40bdf4:	d02e      	beq.n	40be54 <__ssprint_r+0x80>
  40bdf6:	6965      	ldr	r5, [r4, #20]
  40bdf8:	6921      	ldr	r1, [r4, #16]
  40bdfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40bdfe:	eba0 0b01 	sub.w	fp, r0, r1
  40be02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40be06:	f10b 0001 	add.w	r0, fp, #1
  40be0a:	106d      	asrs	r5, r5, #1
  40be0c:	4430      	add	r0, r6
  40be0e:	42a8      	cmp	r0, r5
  40be10:	462a      	mov	r2, r5
  40be12:	bf84      	itt	hi
  40be14:	4605      	movhi	r5, r0
  40be16:	462a      	movhi	r2, r5
  40be18:	055b      	lsls	r3, r3, #21
  40be1a:	d538      	bpl.n	40be8e <__ssprint_r+0xba>
  40be1c:	4611      	mov	r1, r2
  40be1e:	4650      	mov	r0, sl
  40be20:	f7fe feb6 	bl	40ab90 <_malloc_r>
  40be24:	2800      	cmp	r0, #0
  40be26:	d03c      	beq.n	40bea2 <__ssprint_r+0xce>
  40be28:	465a      	mov	r2, fp
  40be2a:	6921      	ldr	r1, [r4, #16]
  40be2c:	9001      	str	r0, [sp, #4]
  40be2e:	f7fa fa17 	bl	406260 <memcpy>
  40be32:	89a2      	ldrh	r2, [r4, #12]
  40be34:	9b01      	ldr	r3, [sp, #4]
  40be36:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40be3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40be3e:	81a2      	strh	r2, [r4, #12]
  40be40:	eba5 020b 	sub.w	r2, r5, fp
  40be44:	eb03 000b 	add.w	r0, r3, fp
  40be48:	6165      	str	r5, [r4, #20]
  40be4a:	6123      	str	r3, [r4, #16]
  40be4c:	6020      	str	r0, [r4, #0]
  40be4e:	60a2      	str	r2, [r4, #8]
  40be50:	4635      	mov	r5, r6
  40be52:	46b3      	mov	fp, r6
  40be54:	465a      	mov	r2, fp
  40be56:	4649      	mov	r1, r9
  40be58:	f7ff f9e2 	bl	40b220 <memmove>
  40be5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40be60:	68a2      	ldr	r2, [r4, #8]
  40be62:	6820      	ldr	r0, [r4, #0]
  40be64:	1b55      	subs	r5, r2, r5
  40be66:	4458      	add	r0, fp
  40be68:	1b9e      	subs	r6, r3, r6
  40be6a:	60a5      	str	r5, [r4, #8]
  40be6c:	6020      	str	r0, [r4, #0]
  40be6e:	f8c8 6008 	str.w	r6, [r8, #8]
  40be72:	b33e      	cbz	r6, 40bec4 <__ssprint_r+0xf0>
  40be74:	687e      	ldr	r6, [r7, #4]
  40be76:	463b      	mov	r3, r7
  40be78:	3708      	adds	r7, #8
  40be7a:	2e00      	cmp	r6, #0
  40be7c:	d0fa      	beq.n	40be74 <__ssprint_r+0xa0>
  40be7e:	42ae      	cmp	r6, r5
  40be80:	f8d3 9000 	ldr.w	r9, [r3]
  40be84:	46ab      	mov	fp, r5
  40be86:	d2b2      	bcs.n	40bdee <__ssprint_r+0x1a>
  40be88:	4635      	mov	r5, r6
  40be8a:	46b3      	mov	fp, r6
  40be8c:	e7e2      	b.n	40be54 <__ssprint_r+0x80>
  40be8e:	4650      	mov	r0, sl
  40be90:	f7ff fd30 	bl	40b8f4 <_realloc_r>
  40be94:	4603      	mov	r3, r0
  40be96:	2800      	cmp	r0, #0
  40be98:	d1d2      	bne.n	40be40 <__ssprint_r+0x6c>
  40be9a:	6921      	ldr	r1, [r4, #16]
  40be9c:	4650      	mov	r0, sl
  40be9e:	f7fe fb4b 	bl	40a538 <_free_r>
  40bea2:	230c      	movs	r3, #12
  40bea4:	f8ca 3000 	str.w	r3, [sl]
  40bea8:	89a3      	ldrh	r3, [r4, #12]
  40beaa:	2200      	movs	r2, #0
  40beac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40beb0:	f04f 30ff 	mov.w	r0, #4294967295
  40beb4:	81a3      	strh	r3, [r4, #12]
  40beb6:	f8c8 2008 	str.w	r2, [r8, #8]
  40beba:	f8c8 2004 	str.w	r2, [r8, #4]
  40bebe:	b003      	add	sp, #12
  40bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bec4:	2000      	movs	r0, #0
  40bec6:	f8c8 0004 	str.w	r0, [r8, #4]
  40beca:	b003      	add	sp, #12
  40becc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bed0 <__swbuf_r>:
  40bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bed2:	460d      	mov	r5, r1
  40bed4:	4614      	mov	r4, r2
  40bed6:	4606      	mov	r6, r0
  40bed8:	b110      	cbz	r0, 40bee0 <__swbuf_r+0x10>
  40beda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40bedc:	2b00      	cmp	r3, #0
  40bede:	d04b      	beq.n	40bf78 <__swbuf_r+0xa8>
  40bee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bee4:	69a3      	ldr	r3, [r4, #24]
  40bee6:	60a3      	str	r3, [r4, #8]
  40bee8:	b291      	uxth	r1, r2
  40beea:	0708      	lsls	r0, r1, #28
  40beec:	d539      	bpl.n	40bf62 <__swbuf_r+0x92>
  40beee:	6923      	ldr	r3, [r4, #16]
  40bef0:	2b00      	cmp	r3, #0
  40bef2:	d036      	beq.n	40bf62 <__swbuf_r+0x92>
  40bef4:	b2ed      	uxtb	r5, r5
  40bef6:	0489      	lsls	r1, r1, #18
  40bef8:	462f      	mov	r7, r5
  40befa:	d515      	bpl.n	40bf28 <__swbuf_r+0x58>
  40befc:	6822      	ldr	r2, [r4, #0]
  40befe:	6961      	ldr	r1, [r4, #20]
  40bf00:	1ad3      	subs	r3, r2, r3
  40bf02:	428b      	cmp	r3, r1
  40bf04:	da1c      	bge.n	40bf40 <__swbuf_r+0x70>
  40bf06:	3301      	adds	r3, #1
  40bf08:	68a1      	ldr	r1, [r4, #8]
  40bf0a:	1c50      	adds	r0, r2, #1
  40bf0c:	3901      	subs	r1, #1
  40bf0e:	60a1      	str	r1, [r4, #8]
  40bf10:	6020      	str	r0, [r4, #0]
  40bf12:	7015      	strb	r5, [r2, #0]
  40bf14:	6962      	ldr	r2, [r4, #20]
  40bf16:	429a      	cmp	r2, r3
  40bf18:	d01a      	beq.n	40bf50 <__swbuf_r+0x80>
  40bf1a:	89a3      	ldrh	r3, [r4, #12]
  40bf1c:	07db      	lsls	r3, r3, #31
  40bf1e:	d501      	bpl.n	40bf24 <__swbuf_r+0x54>
  40bf20:	2d0a      	cmp	r5, #10
  40bf22:	d015      	beq.n	40bf50 <__swbuf_r+0x80>
  40bf24:	4638      	mov	r0, r7
  40bf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bf28:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40bf2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40bf2e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40bf32:	81a2      	strh	r2, [r4, #12]
  40bf34:	6822      	ldr	r2, [r4, #0]
  40bf36:	6661      	str	r1, [r4, #100]	; 0x64
  40bf38:	6961      	ldr	r1, [r4, #20]
  40bf3a:	1ad3      	subs	r3, r2, r3
  40bf3c:	428b      	cmp	r3, r1
  40bf3e:	dbe2      	blt.n	40bf06 <__swbuf_r+0x36>
  40bf40:	4621      	mov	r1, r4
  40bf42:	4630      	mov	r0, r6
  40bf44:	f7fe f97a 	bl	40a23c <_fflush_r>
  40bf48:	b940      	cbnz	r0, 40bf5c <__swbuf_r+0x8c>
  40bf4a:	6822      	ldr	r2, [r4, #0]
  40bf4c:	2301      	movs	r3, #1
  40bf4e:	e7db      	b.n	40bf08 <__swbuf_r+0x38>
  40bf50:	4621      	mov	r1, r4
  40bf52:	4630      	mov	r0, r6
  40bf54:	f7fe f972 	bl	40a23c <_fflush_r>
  40bf58:	2800      	cmp	r0, #0
  40bf5a:	d0e3      	beq.n	40bf24 <__swbuf_r+0x54>
  40bf5c:	f04f 37ff 	mov.w	r7, #4294967295
  40bf60:	e7e0      	b.n	40bf24 <__swbuf_r+0x54>
  40bf62:	4621      	mov	r1, r4
  40bf64:	4630      	mov	r0, r6
  40bf66:	f7fd f895 	bl	409094 <__swsetup_r>
  40bf6a:	2800      	cmp	r0, #0
  40bf6c:	d1f6      	bne.n	40bf5c <__swbuf_r+0x8c>
  40bf6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40bf72:	6923      	ldr	r3, [r4, #16]
  40bf74:	b291      	uxth	r1, r2
  40bf76:	e7bd      	b.n	40bef4 <__swbuf_r+0x24>
  40bf78:	f7fe f9b8 	bl	40a2ec <__sinit>
  40bf7c:	e7b0      	b.n	40bee0 <__swbuf_r+0x10>
  40bf7e:	bf00      	nop

0040bf80 <_wcrtomb_r>:
  40bf80:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bf82:	4606      	mov	r6, r0
  40bf84:	b085      	sub	sp, #20
  40bf86:	461f      	mov	r7, r3
  40bf88:	b189      	cbz	r1, 40bfae <_wcrtomb_r+0x2e>
  40bf8a:	4c10      	ldr	r4, [pc, #64]	; (40bfcc <_wcrtomb_r+0x4c>)
  40bf8c:	4d10      	ldr	r5, [pc, #64]	; (40bfd0 <_wcrtomb_r+0x50>)
  40bf8e:	6824      	ldr	r4, [r4, #0]
  40bf90:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40bf92:	2c00      	cmp	r4, #0
  40bf94:	bf08      	it	eq
  40bf96:	462c      	moveq	r4, r5
  40bf98:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40bf9c:	47a0      	blx	r4
  40bf9e:	1c43      	adds	r3, r0, #1
  40bfa0:	d103      	bne.n	40bfaa <_wcrtomb_r+0x2a>
  40bfa2:	2200      	movs	r2, #0
  40bfa4:	238a      	movs	r3, #138	; 0x8a
  40bfa6:	603a      	str	r2, [r7, #0]
  40bfa8:	6033      	str	r3, [r6, #0]
  40bfaa:	b005      	add	sp, #20
  40bfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bfae:	460c      	mov	r4, r1
  40bfb0:	4906      	ldr	r1, [pc, #24]	; (40bfcc <_wcrtomb_r+0x4c>)
  40bfb2:	4a07      	ldr	r2, [pc, #28]	; (40bfd0 <_wcrtomb_r+0x50>)
  40bfb4:	6809      	ldr	r1, [r1, #0]
  40bfb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40bfb8:	2900      	cmp	r1, #0
  40bfba:	bf08      	it	eq
  40bfbc:	4611      	moveq	r1, r2
  40bfbe:	4622      	mov	r2, r4
  40bfc0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40bfc4:	a901      	add	r1, sp, #4
  40bfc6:	47a0      	blx	r4
  40bfc8:	e7e9      	b.n	40bf9e <_wcrtomb_r+0x1e>
  40bfca:	bf00      	nop
  40bfcc:	20400028 	.word	0x20400028
  40bfd0:	2040045c 	.word	0x2040045c

0040bfd4 <__ascii_wctomb>:
  40bfd4:	b121      	cbz	r1, 40bfe0 <__ascii_wctomb+0xc>
  40bfd6:	2aff      	cmp	r2, #255	; 0xff
  40bfd8:	d804      	bhi.n	40bfe4 <__ascii_wctomb+0x10>
  40bfda:	700a      	strb	r2, [r1, #0]
  40bfdc:	2001      	movs	r0, #1
  40bfde:	4770      	bx	lr
  40bfe0:	4608      	mov	r0, r1
  40bfe2:	4770      	bx	lr
  40bfe4:	238a      	movs	r3, #138	; 0x8a
  40bfe6:	6003      	str	r3, [r0, #0]
  40bfe8:	f04f 30ff 	mov.w	r0, #4294967295
  40bfec:	4770      	bx	lr
  40bfee:	bf00      	nop

0040bff0 <_write_r>:
  40bff0:	b570      	push	{r4, r5, r6, lr}
  40bff2:	460d      	mov	r5, r1
  40bff4:	4c08      	ldr	r4, [pc, #32]	; (40c018 <_write_r+0x28>)
  40bff6:	4611      	mov	r1, r2
  40bff8:	4606      	mov	r6, r0
  40bffa:	461a      	mov	r2, r3
  40bffc:	4628      	mov	r0, r5
  40bffe:	2300      	movs	r3, #0
  40c000:	6023      	str	r3, [r4, #0]
  40c002:	f7f8 fee1 	bl	404dc8 <_write>
  40c006:	1c43      	adds	r3, r0, #1
  40c008:	d000      	beq.n	40c00c <_write_r+0x1c>
  40c00a:	bd70      	pop	{r4, r5, r6, pc}
  40c00c:	6823      	ldr	r3, [r4, #0]
  40c00e:	2b00      	cmp	r3, #0
  40c010:	d0fb      	beq.n	40c00a <_write_r+0x1a>
  40c012:	6033      	str	r3, [r6, #0]
  40c014:	bd70      	pop	{r4, r5, r6, pc}
  40c016:	bf00      	nop
  40c018:	2040d05c 	.word	0x2040d05c

0040c01c <__register_exitproc>:
  40c01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c020:	4d2c      	ldr	r5, [pc, #176]	; (40c0d4 <__register_exitproc+0xb8>)
  40c022:	4606      	mov	r6, r0
  40c024:	6828      	ldr	r0, [r5, #0]
  40c026:	4698      	mov	r8, r3
  40c028:	460f      	mov	r7, r1
  40c02a:	4691      	mov	r9, r2
  40c02c:	f7fe fd2c 	bl	40aa88 <__retarget_lock_acquire_recursive>
  40c030:	4b29      	ldr	r3, [pc, #164]	; (40c0d8 <__register_exitproc+0xbc>)
  40c032:	681c      	ldr	r4, [r3, #0]
  40c034:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40c038:	2b00      	cmp	r3, #0
  40c03a:	d03e      	beq.n	40c0ba <__register_exitproc+0x9e>
  40c03c:	685a      	ldr	r2, [r3, #4]
  40c03e:	2a1f      	cmp	r2, #31
  40c040:	dc1c      	bgt.n	40c07c <__register_exitproc+0x60>
  40c042:	f102 0e01 	add.w	lr, r2, #1
  40c046:	b176      	cbz	r6, 40c066 <__register_exitproc+0x4a>
  40c048:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40c04c:	2401      	movs	r4, #1
  40c04e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40c052:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40c056:	4094      	lsls	r4, r2
  40c058:	4320      	orrs	r0, r4
  40c05a:	2e02      	cmp	r6, #2
  40c05c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40c060:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40c064:	d023      	beq.n	40c0ae <__register_exitproc+0x92>
  40c066:	3202      	adds	r2, #2
  40c068:	f8c3 e004 	str.w	lr, [r3, #4]
  40c06c:	6828      	ldr	r0, [r5, #0]
  40c06e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40c072:	f7fe fd0b 	bl	40aa8c <__retarget_lock_release_recursive>
  40c076:	2000      	movs	r0, #0
  40c078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c07c:	4b17      	ldr	r3, [pc, #92]	; (40c0dc <__register_exitproc+0xc0>)
  40c07e:	b30b      	cbz	r3, 40c0c4 <__register_exitproc+0xa8>
  40c080:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40c084:	f7fe fd7c 	bl	40ab80 <malloc>
  40c088:	4603      	mov	r3, r0
  40c08a:	b1d8      	cbz	r0, 40c0c4 <__register_exitproc+0xa8>
  40c08c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40c090:	6002      	str	r2, [r0, #0]
  40c092:	2100      	movs	r1, #0
  40c094:	6041      	str	r1, [r0, #4]
  40c096:	460a      	mov	r2, r1
  40c098:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40c09c:	f04f 0e01 	mov.w	lr, #1
  40c0a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40c0a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40c0a8:	2e00      	cmp	r6, #0
  40c0aa:	d0dc      	beq.n	40c066 <__register_exitproc+0x4a>
  40c0ac:	e7cc      	b.n	40c048 <__register_exitproc+0x2c>
  40c0ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40c0b2:	430c      	orrs	r4, r1
  40c0b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40c0b8:	e7d5      	b.n	40c066 <__register_exitproc+0x4a>
  40c0ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40c0be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40c0c2:	e7bb      	b.n	40c03c <__register_exitproc+0x20>
  40c0c4:	6828      	ldr	r0, [r5, #0]
  40c0c6:	f7fe fce1 	bl	40aa8c <__retarget_lock_release_recursive>
  40c0ca:	f04f 30ff 	mov.w	r0, #4294967295
  40c0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c0d2:	bf00      	nop
  40c0d4:	20400458 	.word	0x20400458
  40c0d8:	0040df70 	.word	0x0040df70
  40c0dc:	0040ab81 	.word	0x0040ab81

0040c0e0 <_calloc_r>:
  40c0e0:	b510      	push	{r4, lr}
  40c0e2:	fb02 f101 	mul.w	r1, r2, r1
  40c0e6:	f7fe fd53 	bl	40ab90 <_malloc_r>
  40c0ea:	4604      	mov	r4, r0
  40c0ec:	b1d8      	cbz	r0, 40c126 <_calloc_r+0x46>
  40c0ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40c0f2:	f022 0203 	bic.w	r2, r2, #3
  40c0f6:	3a04      	subs	r2, #4
  40c0f8:	2a24      	cmp	r2, #36	; 0x24
  40c0fa:	d818      	bhi.n	40c12e <_calloc_r+0x4e>
  40c0fc:	2a13      	cmp	r2, #19
  40c0fe:	d914      	bls.n	40c12a <_calloc_r+0x4a>
  40c100:	2300      	movs	r3, #0
  40c102:	2a1b      	cmp	r2, #27
  40c104:	6003      	str	r3, [r0, #0]
  40c106:	6043      	str	r3, [r0, #4]
  40c108:	d916      	bls.n	40c138 <_calloc_r+0x58>
  40c10a:	2a24      	cmp	r2, #36	; 0x24
  40c10c:	6083      	str	r3, [r0, #8]
  40c10e:	60c3      	str	r3, [r0, #12]
  40c110:	bf11      	iteee	ne
  40c112:	f100 0210 	addne.w	r2, r0, #16
  40c116:	6103      	streq	r3, [r0, #16]
  40c118:	6143      	streq	r3, [r0, #20]
  40c11a:	f100 0218 	addeq.w	r2, r0, #24
  40c11e:	2300      	movs	r3, #0
  40c120:	6013      	str	r3, [r2, #0]
  40c122:	6053      	str	r3, [r2, #4]
  40c124:	6093      	str	r3, [r2, #8]
  40c126:	4620      	mov	r0, r4
  40c128:	bd10      	pop	{r4, pc}
  40c12a:	4602      	mov	r2, r0
  40c12c:	e7f7      	b.n	40c11e <_calloc_r+0x3e>
  40c12e:	2100      	movs	r1, #0
  40c130:	f7fa f930 	bl	406394 <memset>
  40c134:	4620      	mov	r0, r4
  40c136:	bd10      	pop	{r4, pc}
  40c138:	f100 0208 	add.w	r2, r0, #8
  40c13c:	e7ef      	b.n	40c11e <_calloc_r+0x3e>
  40c13e:	bf00      	nop

0040c140 <_close_r>:
  40c140:	b538      	push	{r3, r4, r5, lr}
  40c142:	4c07      	ldr	r4, [pc, #28]	; (40c160 <_close_r+0x20>)
  40c144:	2300      	movs	r3, #0
  40c146:	4605      	mov	r5, r0
  40c148:	4608      	mov	r0, r1
  40c14a:	6023      	str	r3, [r4, #0]
  40c14c:	f7f9 fc8c 	bl	405a68 <_close>
  40c150:	1c43      	adds	r3, r0, #1
  40c152:	d000      	beq.n	40c156 <_close_r+0x16>
  40c154:	bd38      	pop	{r3, r4, r5, pc}
  40c156:	6823      	ldr	r3, [r4, #0]
  40c158:	2b00      	cmp	r3, #0
  40c15a:	d0fb      	beq.n	40c154 <_close_r+0x14>
  40c15c:	602b      	str	r3, [r5, #0]
  40c15e:	bd38      	pop	{r3, r4, r5, pc}
  40c160:	2040d05c 	.word	0x2040d05c

0040c164 <_fclose_r>:
  40c164:	b570      	push	{r4, r5, r6, lr}
  40c166:	b159      	cbz	r1, 40c180 <_fclose_r+0x1c>
  40c168:	4605      	mov	r5, r0
  40c16a:	460c      	mov	r4, r1
  40c16c:	b110      	cbz	r0, 40c174 <_fclose_r+0x10>
  40c16e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40c170:	2b00      	cmp	r3, #0
  40c172:	d03c      	beq.n	40c1ee <_fclose_r+0x8a>
  40c174:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c176:	07d8      	lsls	r0, r3, #31
  40c178:	d505      	bpl.n	40c186 <_fclose_r+0x22>
  40c17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c17e:	b92b      	cbnz	r3, 40c18c <_fclose_r+0x28>
  40c180:	2600      	movs	r6, #0
  40c182:	4630      	mov	r0, r6
  40c184:	bd70      	pop	{r4, r5, r6, pc}
  40c186:	89a3      	ldrh	r3, [r4, #12]
  40c188:	0599      	lsls	r1, r3, #22
  40c18a:	d53c      	bpl.n	40c206 <_fclose_r+0xa2>
  40c18c:	4621      	mov	r1, r4
  40c18e:	4628      	mov	r0, r5
  40c190:	f7fd ffb4 	bl	40a0fc <__sflush_r>
  40c194:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40c196:	4606      	mov	r6, r0
  40c198:	b133      	cbz	r3, 40c1a8 <_fclose_r+0x44>
  40c19a:	69e1      	ldr	r1, [r4, #28]
  40c19c:	4628      	mov	r0, r5
  40c19e:	4798      	blx	r3
  40c1a0:	2800      	cmp	r0, #0
  40c1a2:	bfb8      	it	lt
  40c1a4:	f04f 36ff 	movlt.w	r6, #4294967295
  40c1a8:	89a3      	ldrh	r3, [r4, #12]
  40c1aa:	061a      	lsls	r2, r3, #24
  40c1ac:	d422      	bmi.n	40c1f4 <_fclose_r+0x90>
  40c1ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40c1b0:	b141      	cbz	r1, 40c1c4 <_fclose_r+0x60>
  40c1b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40c1b6:	4299      	cmp	r1, r3
  40c1b8:	d002      	beq.n	40c1c0 <_fclose_r+0x5c>
  40c1ba:	4628      	mov	r0, r5
  40c1bc:	f7fe f9bc 	bl	40a538 <_free_r>
  40c1c0:	2300      	movs	r3, #0
  40c1c2:	6323      	str	r3, [r4, #48]	; 0x30
  40c1c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40c1c6:	b121      	cbz	r1, 40c1d2 <_fclose_r+0x6e>
  40c1c8:	4628      	mov	r0, r5
  40c1ca:	f7fe f9b5 	bl	40a538 <_free_r>
  40c1ce:	2300      	movs	r3, #0
  40c1d0:	6463      	str	r3, [r4, #68]	; 0x44
  40c1d2:	f7fe f8b7 	bl	40a344 <__sfp_lock_acquire>
  40c1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c1d8:	2200      	movs	r2, #0
  40c1da:	07db      	lsls	r3, r3, #31
  40c1dc:	81a2      	strh	r2, [r4, #12]
  40c1de:	d50e      	bpl.n	40c1fe <_fclose_r+0x9a>
  40c1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c1e2:	f7fe fc4f 	bl	40aa84 <__retarget_lock_close_recursive>
  40c1e6:	f7fe f8b3 	bl	40a350 <__sfp_lock_release>
  40c1ea:	4630      	mov	r0, r6
  40c1ec:	bd70      	pop	{r4, r5, r6, pc}
  40c1ee:	f7fe f87d 	bl	40a2ec <__sinit>
  40c1f2:	e7bf      	b.n	40c174 <_fclose_r+0x10>
  40c1f4:	6921      	ldr	r1, [r4, #16]
  40c1f6:	4628      	mov	r0, r5
  40c1f8:	f7fe f99e 	bl	40a538 <_free_r>
  40c1fc:	e7d7      	b.n	40c1ae <_fclose_r+0x4a>
  40c1fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c200:	f7fe fc44 	bl	40aa8c <__retarget_lock_release_recursive>
  40c204:	e7ec      	b.n	40c1e0 <_fclose_r+0x7c>
  40c206:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c208:	f7fe fc3e 	bl	40aa88 <__retarget_lock_acquire_recursive>
  40c20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40c210:	2b00      	cmp	r3, #0
  40c212:	d1bb      	bne.n	40c18c <_fclose_r+0x28>
  40c214:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40c216:	f016 0601 	ands.w	r6, r6, #1
  40c21a:	d1b1      	bne.n	40c180 <_fclose_r+0x1c>
  40c21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40c21e:	f7fe fc35 	bl	40aa8c <__retarget_lock_release_recursive>
  40c222:	4630      	mov	r0, r6
  40c224:	bd70      	pop	{r4, r5, r6, pc}
  40c226:	bf00      	nop

0040c228 <_fstat_r>:
  40c228:	b538      	push	{r3, r4, r5, lr}
  40c22a:	460b      	mov	r3, r1
  40c22c:	4c07      	ldr	r4, [pc, #28]	; (40c24c <_fstat_r+0x24>)
  40c22e:	4605      	mov	r5, r0
  40c230:	4611      	mov	r1, r2
  40c232:	4618      	mov	r0, r3
  40c234:	2300      	movs	r3, #0
  40c236:	6023      	str	r3, [r4, #0]
  40c238:	f7f9 fc19 	bl	405a6e <_fstat>
  40c23c:	1c43      	adds	r3, r0, #1
  40c23e:	d000      	beq.n	40c242 <_fstat_r+0x1a>
  40c240:	bd38      	pop	{r3, r4, r5, pc}
  40c242:	6823      	ldr	r3, [r4, #0]
  40c244:	2b00      	cmp	r3, #0
  40c246:	d0fb      	beq.n	40c240 <_fstat_r+0x18>
  40c248:	602b      	str	r3, [r5, #0]
  40c24a:	bd38      	pop	{r3, r4, r5, pc}
  40c24c:	2040d05c 	.word	0x2040d05c

0040c250 <_isatty_r>:
  40c250:	b538      	push	{r3, r4, r5, lr}
  40c252:	4c07      	ldr	r4, [pc, #28]	; (40c270 <_isatty_r+0x20>)
  40c254:	2300      	movs	r3, #0
  40c256:	4605      	mov	r5, r0
  40c258:	4608      	mov	r0, r1
  40c25a:	6023      	str	r3, [r4, #0]
  40c25c:	f7f9 fc0c 	bl	405a78 <_isatty>
  40c260:	1c43      	adds	r3, r0, #1
  40c262:	d000      	beq.n	40c266 <_isatty_r+0x16>
  40c264:	bd38      	pop	{r3, r4, r5, pc}
  40c266:	6823      	ldr	r3, [r4, #0]
  40c268:	2b00      	cmp	r3, #0
  40c26a:	d0fb      	beq.n	40c264 <_isatty_r+0x14>
  40c26c:	602b      	str	r3, [r5, #0]
  40c26e:	bd38      	pop	{r3, r4, r5, pc}
  40c270:	2040d05c 	.word	0x2040d05c

0040c274 <_lseek_r>:
  40c274:	b570      	push	{r4, r5, r6, lr}
  40c276:	460d      	mov	r5, r1
  40c278:	4c08      	ldr	r4, [pc, #32]	; (40c29c <_lseek_r+0x28>)
  40c27a:	4611      	mov	r1, r2
  40c27c:	4606      	mov	r6, r0
  40c27e:	461a      	mov	r2, r3
  40c280:	4628      	mov	r0, r5
  40c282:	2300      	movs	r3, #0
  40c284:	6023      	str	r3, [r4, #0]
  40c286:	f7f9 fbf9 	bl	405a7c <_lseek>
  40c28a:	1c43      	adds	r3, r0, #1
  40c28c:	d000      	beq.n	40c290 <_lseek_r+0x1c>
  40c28e:	bd70      	pop	{r4, r5, r6, pc}
  40c290:	6823      	ldr	r3, [r4, #0]
  40c292:	2b00      	cmp	r3, #0
  40c294:	d0fb      	beq.n	40c28e <_lseek_r+0x1a>
  40c296:	6033      	str	r3, [r6, #0]
  40c298:	bd70      	pop	{r4, r5, r6, pc}
  40c29a:	bf00      	nop
  40c29c:	2040d05c 	.word	0x2040d05c

0040c2a0 <_read_r>:
  40c2a0:	b570      	push	{r4, r5, r6, lr}
  40c2a2:	460d      	mov	r5, r1
  40c2a4:	4c08      	ldr	r4, [pc, #32]	; (40c2c8 <_read_r+0x28>)
  40c2a6:	4611      	mov	r1, r2
  40c2a8:	4606      	mov	r6, r0
  40c2aa:	461a      	mov	r2, r3
  40c2ac:	4628      	mov	r0, r5
  40c2ae:	2300      	movs	r3, #0
  40c2b0:	6023      	str	r3, [r4, #0]
  40c2b2:	f7f8 fd6b 	bl	404d8c <_read>
  40c2b6:	1c43      	adds	r3, r0, #1
  40c2b8:	d000      	beq.n	40c2bc <_read_r+0x1c>
  40c2ba:	bd70      	pop	{r4, r5, r6, pc}
  40c2bc:	6823      	ldr	r3, [r4, #0]
  40c2be:	2b00      	cmp	r3, #0
  40c2c0:	d0fb      	beq.n	40c2ba <_read_r+0x1a>
  40c2c2:	6033      	str	r3, [r6, #0]
  40c2c4:	bd70      	pop	{r4, r5, r6, pc}
  40c2c6:	bf00      	nop
  40c2c8:	2040d05c 	.word	0x2040d05c

0040c2cc <__aeabi_drsub>:
  40c2cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40c2d0:	e002      	b.n	40c2d8 <__adddf3>
  40c2d2:	bf00      	nop

0040c2d4 <__aeabi_dsub>:
  40c2d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040c2d8 <__adddf3>:
  40c2d8:	b530      	push	{r4, r5, lr}
  40c2da:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40c2de:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40c2e2:	ea94 0f05 	teq	r4, r5
  40c2e6:	bf08      	it	eq
  40c2e8:	ea90 0f02 	teqeq	r0, r2
  40c2ec:	bf1f      	itttt	ne
  40c2ee:	ea54 0c00 	orrsne.w	ip, r4, r0
  40c2f2:	ea55 0c02 	orrsne.w	ip, r5, r2
  40c2f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40c2fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c2fe:	f000 80e2 	beq.w	40c4c6 <__adddf3+0x1ee>
  40c302:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40c306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40c30a:	bfb8      	it	lt
  40c30c:	426d      	neglt	r5, r5
  40c30e:	dd0c      	ble.n	40c32a <__adddf3+0x52>
  40c310:	442c      	add	r4, r5
  40c312:	ea80 0202 	eor.w	r2, r0, r2
  40c316:	ea81 0303 	eor.w	r3, r1, r3
  40c31a:	ea82 0000 	eor.w	r0, r2, r0
  40c31e:	ea83 0101 	eor.w	r1, r3, r1
  40c322:	ea80 0202 	eor.w	r2, r0, r2
  40c326:	ea81 0303 	eor.w	r3, r1, r3
  40c32a:	2d36      	cmp	r5, #54	; 0x36
  40c32c:	bf88      	it	hi
  40c32e:	bd30      	pophi	{r4, r5, pc}
  40c330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c334:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40c33c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40c340:	d002      	beq.n	40c348 <__adddf3+0x70>
  40c342:	4240      	negs	r0, r0
  40c344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40c34c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40c354:	d002      	beq.n	40c35c <__adddf3+0x84>
  40c356:	4252      	negs	r2, r2
  40c358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c35c:	ea94 0f05 	teq	r4, r5
  40c360:	f000 80a7 	beq.w	40c4b2 <__adddf3+0x1da>
  40c364:	f1a4 0401 	sub.w	r4, r4, #1
  40c368:	f1d5 0e20 	rsbs	lr, r5, #32
  40c36c:	db0d      	blt.n	40c38a <__adddf3+0xb2>
  40c36e:	fa02 fc0e 	lsl.w	ip, r2, lr
  40c372:	fa22 f205 	lsr.w	r2, r2, r5
  40c376:	1880      	adds	r0, r0, r2
  40c378:	f141 0100 	adc.w	r1, r1, #0
  40c37c:	fa03 f20e 	lsl.w	r2, r3, lr
  40c380:	1880      	adds	r0, r0, r2
  40c382:	fa43 f305 	asr.w	r3, r3, r5
  40c386:	4159      	adcs	r1, r3
  40c388:	e00e      	b.n	40c3a8 <__adddf3+0xd0>
  40c38a:	f1a5 0520 	sub.w	r5, r5, #32
  40c38e:	f10e 0e20 	add.w	lr, lr, #32
  40c392:	2a01      	cmp	r2, #1
  40c394:	fa03 fc0e 	lsl.w	ip, r3, lr
  40c398:	bf28      	it	cs
  40c39a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40c39e:	fa43 f305 	asr.w	r3, r3, r5
  40c3a2:	18c0      	adds	r0, r0, r3
  40c3a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40c3a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c3ac:	d507      	bpl.n	40c3be <__adddf3+0xe6>
  40c3ae:	f04f 0e00 	mov.w	lr, #0
  40c3b2:	f1dc 0c00 	rsbs	ip, ip, #0
  40c3b6:	eb7e 0000 	sbcs.w	r0, lr, r0
  40c3ba:	eb6e 0101 	sbc.w	r1, lr, r1
  40c3be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40c3c2:	d31b      	bcc.n	40c3fc <__adddf3+0x124>
  40c3c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40c3c8:	d30c      	bcc.n	40c3e4 <__adddf3+0x10c>
  40c3ca:	0849      	lsrs	r1, r1, #1
  40c3cc:	ea5f 0030 	movs.w	r0, r0, rrx
  40c3d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40c3d4:	f104 0401 	add.w	r4, r4, #1
  40c3d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40c3dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40c3e0:	f080 809a 	bcs.w	40c518 <__adddf3+0x240>
  40c3e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40c3e8:	bf08      	it	eq
  40c3ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c3ee:	f150 0000 	adcs.w	r0, r0, #0
  40c3f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c3f6:	ea41 0105 	orr.w	r1, r1, r5
  40c3fa:	bd30      	pop	{r4, r5, pc}
  40c3fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40c400:	4140      	adcs	r0, r0
  40c402:	eb41 0101 	adc.w	r1, r1, r1
  40c406:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c40a:	f1a4 0401 	sub.w	r4, r4, #1
  40c40e:	d1e9      	bne.n	40c3e4 <__adddf3+0x10c>
  40c410:	f091 0f00 	teq	r1, #0
  40c414:	bf04      	itt	eq
  40c416:	4601      	moveq	r1, r0
  40c418:	2000      	moveq	r0, #0
  40c41a:	fab1 f381 	clz	r3, r1
  40c41e:	bf08      	it	eq
  40c420:	3320      	addeq	r3, #32
  40c422:	f1a3 030b 	sub.w	r3, r3, #11
  40c426:	f1b3 0220 	subs.w	r2, r3, #32
  40c42a:	da0c      	bge.n	40c446 <__adddf3+0x16e>
  40c42c:	320c      	adds	r2, #12
  40c42e:	dd08      	ble.n	40c442 <__adddf3+0x16a>
  40c430:	f102 0c14 	add.w	ip, r2, #20
  40c434:	f1c2 020c 	rsb	r2, r2, #12
  40c438:	fa01 f00c 	lsl.w	r0, r1, ip
  40c43c:	fa21 f102 	lsr.w	r1, r1, r2
  40c440:	e00c      	b.n	40c45c <__adddf3+0x184>
  40c442:	f102 0214 	add.w	r2, r2, #20
  40c446:	bfd8      	it	le
  40c448:	f1c2 0c20 	rsble	ip, r2, #32
  40c44c:	fa01 f102 	lsl.w	r1, r1, r2
  40c450:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c454:	bfdc      	itt	le
  40c456:	ea41 010c 	orrle.w	r1, r1, ip
  40c45a:	4090      	lslle	r0, r2
  40c45c:	1ae4      	subs	r4, r4, r3
  40c45e:	bfa2      	ittt	ge
  40c460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40c464:	4329      	orrge	r1, r5
  40c466:	bd30      	popge	{r4, r5, pc}
  40c468:	ea6f 0404 	mvn.w	r4, r4
  40c46c:	3c1f      	subs	r4, #31
  40c46e:	da1c      	bge.n	40c4aa <__adddf3+0x1d2>
  40c470:	340c      	adds	r4, #12
  40c472:	dc0e      	bgt.n	40c492 <__adddf3+0x1ba>
  40c474:	f104 0414 	add.w	r4, r4, #20
  40c478:	f1c4 0220 	rsb	r2, r4, #32
  40c47c:	fa20 f004 	lsr.w	r0, r0, r4
  40c480:	fa01 f302 	lsl.w	r3, r1, r2
  40c484:	ea40 0003 	orr.w	r0, r0, r3
  40c488:	fa21 f304 	lsr.w	r3, r1, r4
  40c48c:	ea45 0103 	orr.w	r1, r5, r3
  40c490:	bd30      	pop	{r4, r5, pc}
  40c492:	f1c4 040c 	rsb	r4, r4, #12
  40c496:	f1c4 0220 	rsb	r2, r4, #32
  40c49a:	fa20 f002 	lsr.w	r0, r0, r2
  40c49e:	fa01 f304 	lsl.w	r3, r1, r4
  40c4a2:	ea40 0003 	orr.w	r0, r0, r3
  40c4a6:	4629      	mov	r1, r5
  40c4a8:	bd30      	pop	{r4, r5, pc}
  40c4aa:	fa21 f004 	lsr.w	r0, r1, r4
  40c4ae:	4629      	mov	r1, r5
  40c4b0:	bd30      	pop	{r4, r5, pc}
  40c4b2:	f094 0f00 	teq	r4, #0
  40c4b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40c4ba:	bf06      	itte	eq
  40c4bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40c4c0:	3401      	addeq	r4, #1
  40c4c2:	3d01      	subne	r5, #1
  40c4c4:	e74e      	b.n	40c364 <__adddf3+0x8c>
  40c4c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c4ca:	bf18      	it	ne
  40c4cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c4d0:	d029      	beq.n	40c526 <__adddf3+0x24e>
  40c4d2:	ea94 0f05 	teq	r4, r5
  40c4d6:	bf08      	it	eq
  40c4d8:	ea90 0f02 	teqeq	r0, r2
  40c4dc:	d005      	beq.n	40c4ea <__adddf3+0x212>
  40c4de:	ea54 0c00 	orrs.w	ip, r4, r0
  40c4e2:	bf04      	itt	eq
  40c4e4:	4619      	moveq	r1, r3
  40c4e6:	4610      	moveq	r0, r2
  40c4e8:	bd30      	pop	{r4, r5, pc}
  40c4ea:	ea91 0f03 	teq	r1, r3
  40c4ee:	bf1e      	ittt	ne
  40c4f0:	2100      	movne	r1, #0
  40c4f2:	2000      	movne	r0, #0
  40c4f4:	bd30      	popne	{r4, r5, pc}
  40c4f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40c4fa:	d105      	bne.n	40c508 <__adddf3+0x230>
  40c4fc:	0040      	lsls	r0, r0, #1
  40c4fe:	4149      	adcs	r1, r1
  40c500:	bf28      	it	cs
  40c502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40c506:	bd30      	pop	{r4, r5, pc}
  40c508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40c50c:	bf3c      	itt	cc
  40c50e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40c512:	bd30      	popcc	{r4, r5, pc}
  40c514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40c51c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c520:	f04f 0000 	mov.w	r0, #0
  40c524:	bd30      	pop	{r4, r5, pc}
  40c526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c52a:	bf1a      	itte	ne
  40c52c:	4619      	movne	r1, r3
  40c52e:	4610      	movne	r0, r2
  40c530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40c534:	bf1c      	itt	ne
  40c536:	460b      	movne	r3, r1
  40c538:	4602      	movne	r2, r0
  40c53a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c53e:	bf06      	itte	eq
  40c540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40c544:	ea91 0f03 	teqeq	r1, r3
  40c548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c54c:	bd30      	pop	{r4, r5, pc}
  40c54e:	bf00      	nop

0040c550 <__aeabi_ui2d>:
  40c550:	f090 0f00 	teq	r0, #0
  40c554:	bf04      	itt	eq
  40c556:	2100      	moveq	r1, #0
  40c558:	4770      	bxeq	lr
  40c55a:	b530      	push	{r4, r5, lr}
  40c55c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c560:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c564:	f04f 0500 	mov.w	r5, #0
  40c568:	f04f 0100 	mov.w	r1, #0
  40c56c:	e750      	b.n	40c410 <__adddf3+0x138>
  40c56e:	bf00      	nop

0040c570 <__aeabi_i2d>:
  40c570:	f090 0f00 	teq	r0, #0
  40c574:	bf04      	itt	eq
  40c576:	2100      	moveq	r1, #0
  40c578:	4770      	bxeq	lr
  40c57a:	b530      	push	{r4, r5, lr}
  40c57c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c580:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c588:	bf48      	it	mi
  40c58a:	4240      	negmi	r0, r0
  40c58c:	f04f 0100 	mov.w	r1, #0
  40c590:	e73e      	b.n	40c410 <__adddf3+0x138>
  40c592:	bf00      	nop

0040c594 <__aeabi_f2d>:
  40c594:	0042      	lsls	r2, r0, #1
  40c596:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c59a:	ea4f 0131 	mov.w	r1, r1, rrx
  40c59e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c5a2:	bf1f      	itttt	ne
  40c5a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c5a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c5ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c5b0:	4770      	bxne	lr
  40c5b2:	f092 0f00 	teq	r2, #0
  40c5b6:	bf14      	ite	ne
  40c5b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c5bc:	4770      	bxeq	lr
  40c5be:	b530      	push	{r4, r5, lr}
  40c5c0:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c5c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c5cc:	e720      	b.n	40c410 <__adddf3+0x138>
  40c5ce:	bf00      	nop

0040c5d0 <__aeabi_ul2d>:
  40c5d0:	ea50 0201 	orrs.w	r2, r0, r1
  40c5d4:	bf08      	it	eq
  40c5d6:	4770      	bxeq	lr
  40c5d8:	b530      	push	{r4, r5, lr}
  40c5da:	f04f 0500 	mov.w	r5, #0
  40c5de:	e00a      	b.n	40c5f6 <__aeabi_l2d+0x16>

0040c5e0 <__aeabi_l2d>:
  40c5e0:	ea50 0201 	orrs.w	r2, r0, r1
  40c5e4:	bf08      	it	eq
  40c5e6:	4770      	bxeq	lr
  40c5e8:	b530      	push	{r4, r5, lr}
  40c5ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c5ee:	d502      	bpl.n	40c5f6 <__aeabi_l2d+0x16>
  40c5f0:	4240      	negs	r0, r0
  40c5f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c5f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c5fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c5fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c602:	f43f aedc 	beq.w	40c3be <__adddf3+0xe6>
  40c606:	f04f 0203 	mov.w	r2, #3
  40c60a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c60e:	bf18      	it	ne
  40c610:	3203      	addne	r2, #3
  40c612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c616:	bf18      	it	ne
  40c618:	3203      	addne	r2, #3
  40c61a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c61e:	f1c2 0320 	rsb	r3, r2, #32
  40c622:	fa00 fc03 	lsl.w	ip, r0, r3
  40c626:	fa20 f002 	lsr.w	r0, r0, r2
  40c62a:	fa01 fe03 	lsl.w	lr, r1, r3
  40c62e:	ea40 000e 	orr.w	r0, r0, lr
  40c632:	fa21 f102 	lsr.w	r1, r1, r2
  40c636:	4414      	add	r4, r2
  40c638:	e6c1      	b.n	40c3be <__adddf3+0xe6>
  40c63a:	bf00      	nop

0040c63c <__aeabi_dmul>:
  40c63c:	b570      	push	{r4, r5, r6, lr}
  40c63e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c64a:	bf1d      	ittte	ne
  40c64c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c650:	ea94 0f0c 	teqne	r4, ip
  40c654:	ea95 0f0c 	teqne	r5, ip
  40c658:	f000 f8de 	bleq	40c818 <__aeabi_dmul+0x1dc>
  40c65c:	442c      	add	r4, r5
  40c65e:	ea81 0603 	eor.w	r6, r1, r3
  40c662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40c666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40c66a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40c66e:	bf18      	it	ne
  40c670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40c674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40c67c:	d038      	beq.n	40c6f0 <__aeabi_dmul+0xb4>
  40c67e:	fba0 ce02 	umull	ip, lr, r0, r2
  40c682:	f04f 0500 	mov.w	r5, #0
  40c686:	fbe1 e502 	umlal	lr, r5, r1, r2
  40c68a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40c68e:	fbe0 e503 	umlal	lr, r5, r0, r3
  40c692:	f04f 0600 	mov.w	r6, #0
  40c696:	fbe1 5603 	umlal	r5, r6, r1, r3
  40c69a:	f09c 0f00 	teq	ip, #0
  40c69e:	bf18      	it	ne
  40c6a0:	f04e 0e01 	orrne.w	lr, lr, #1
  40c6a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40c6a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40c6ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40c6b0:	d204      	bcs.n	40c6bc <__aeabi_dmul+0x80>
  40c6b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40c6b6:	416d      	adcs	r5, r5
  40c6b8:	eb46 0606 	adc.w	r6, r6, r6
  40c6bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40c6c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40c6c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40c6c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40c6cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40c6d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c6d4:	bf88      	it	hi
  40c6d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c6da:	d81e      	bhi.n	40c71a <__aeabi_dmul+0xde>
  40c6dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40c6e0:	bf08      	it	eq
  40c6e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40c6e6:	f150 0000 	adcs.w	r0, r0, #0
  40c6ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c6ee:	bd70      	pop	{r4, r5, r6, pc}
  40c6f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40c6f4:	ea46 0101 	orr.w	r1, r6, r1
  40c6f8:	ea40 0002 	orr.w	r0, r0, r2
  40c6fc:	ea81 0103 	eor.w	r1, r1, r3
  40c700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40c704:	bfc2      	ittt	gt
  40c706:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c70a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c70e:	bd70      	popgt	{r4, r5, r6, pc}
  40c710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c714:	f04f 0e00 	mov.w	lr, #0
  40c718:	3c01      	subs	r4, #1
  40c71a:	f300 80ab 	bgt.w	40c874 <__aeabi_dmul+0x238>
  40c71e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40c722:	bfde      	ittt	le
  40c724:	2000      	movle	r0, #0
  40c726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40c72a:	bd70      	pople	{r4, r5, r6, pc}
  40c72c:	f1c4 0400 	rsb	r4, r4, #0
  40c730:	3c20      	subs	r4, #32
  40c732:	da35      	bge.n	40c7a0 <__aeabi_dmul+0x164>
  40c734:	340c      	adds	r4, #12
  40c736:	dc1b      	bgt.n	40c770 <__aeabi_dmul+0x134>
  40c738:	f104 0414 	add.w	r4, r4, #20
  40c73c:	f1c4 0520 	rsb	r5, r4, #32
  40c740:	fa00 f305 	lsl.w	r3, r0, r5
  40c744:	fa20 f004 	lsr.w	r0, r0, r4
  40c748:	fa01 f205 	lsl.w	r2, r1, r5
  40c74c:	ea40 0002 	orr.w	r0, r0, r2
  40c750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40c754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c75c:	fa21 f604 	lsr.w	r6, r1, r4
  40c760:	eb42 0106 	adc.w	r1, r2, r6
  40c764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c768:	bf08      	it	eq
  40c76a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c76e:	bd70      	pop	{r4, r5, r6, pc}
  40c770:	f1c4 040c 	rsb	r4, r4, #12
  40c774:	f1c4 0520 	rsb	r5, r4, #32
  40c778:	fa00 f304 	lsl.w	r3, r0, r4
  40c77c:	fa20 f005 	lsr.w	r0, r0, r5
  40c780:	fa01 f204 	lsl.w	r2, r1, r4
  40c784:	ea40 0002 	orr.w	r0, r0, r2
  40c788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c78c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c790:	f141 0100 	adc.w	r1, r1, #0
  40c794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c798:	bf08      	it	eq
  40c79a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c79e:	bd70      	pop	{r4, r5, r6, pc}
  40c7a0:	f1c4 0520 	rsb	r5, r4, #32
  40c7a4:	fa00 f205 	lsl.w	r2, r0, r5
  40c7a8:	ea4e 0e02 	orr.w	lr, lr, r2
  40c7ac:	fa20 f304 	lsr.w	r3, r0, r4
  40c7b0:	fa01 f205 	lsl.w	r2, r1, r5
  40c7b4:	ea43 0302 	orr.w	r3, r3, r2
  40c7b8:	fa21 f004 	lsr.w	r0, r1, r4
  40c7bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c7c0:	fa21 f204 	lsr.w	r2, r1, r4
  40c7c4:	ea20 0002 	bic.w	r0, r0, r2
  40c7c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40c7cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c7d0:	bf08      	it	eq
  40c7d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c7d6:	bd70      	pop	{r4, r5, r6, pc}
  40c7d8:	f094 0f00 	teq	r4, #0
  40c7dc:	d10f      	bne.n	40c7fe <__aeabi_dmul+0x1c2>
  40c7de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40c7e2:	0040      	lsls	r0, r0, #1
  40c7e4:	eb41 0101 	adc.w	r1, r1, r1
  40c7e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c7ec:	bf08      	it	eq
  40c7ee:	3c01      	subeq	r4, #1
  40c7f0:	d0f7      	beq.n	40c7e2 <__aeabi_dmul+0x1a6>
  40c7f2:	ea41 0106 	orr.w	r1, r1, r6
  40c7f6:	f095 0f00 	teq	r5, #0
  40c7fa:	bf18      	it	ne
  40c7fc:	4770      	bxne	lr
  40c7fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40c802:	0052      	lsls	r2, r2, #1
  40c804:	eb43 0303 	adc.w	r3, r3, r3
  40c808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40c80c:	bf08      	it	eq
  40c80e:	3d01      	subeq	r5, #1
  40c810:	d0f7      	beq.n	40c802 <__aeabi_dmul+0x1c6>
  40c812:	ea43 0306 	orr.w	r3, r3, r6
  40c816:	4770      	bx	lr
  40c818:	ea94 0f0c 	teq	r4, ip
  40c81c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c820:	bf18      	it	ne
  40c822:	ea95 0f0c 	teqne	r5, ip
  40c826:	d00c      	beq.n	40c842 <__aeabi_dmul+0x206>
  40c828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c82c:	bf18      	it	ne
  40c82e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c832:	d1d1      	bne.n	40c7d8 <__aeabi_dmul+0x19c>
  40c834:	ea81 0103 	eor.w	r1, r1, r3
  40c838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c83c:	f04f 0000 	mov.w	r0, #0
  40c840:	bd70      	pop	{r4, r5, r6, pc}
  40c842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c846:	bf06      	itte	eq
  40c848:	4610      	moveq	r0, r2
  40c84a:	4619      	moveq	r1, r3
  40c84c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c850:	d019      	beq.n	40c886 <__aeabi_dmul+0x24a>
  40c852:	ea94 0f0c 	teq	r4, ip
  40c856:	d102      	bne.n	40c85e <__aeabi_dmul+0x222>
  40c858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40c85c:	d113      	bne.n	40c886 <__aeabi_dmul+0x24a>
  40c85e:	ea95 0f0c 	teq	r5, ip
  40c862:	d105      	bne.n	40c870 <__aeabi_dmul+0x234>
  40c864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40c868:	bf1c      	itt	ne
  40c86a:	4610      	movne	r0, r2
  40c86c:	4619      	movne	r1, r3
  40c86e:	d10a      	bne.n	40c886 <__aeabi_dmul+0x24a>
  40c870:	ea81 0103 	eor.w	r1, r1, r3
  40c874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c87c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c880:	f04f 0000 	mov.w	r0, #0
  40c884:	bd70      	pop	{r4, r5, r6, pc}
  40c886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c88a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40c88e:	bd70      	pop	{r4, r5, r6, pc}

0040c890 <__aeabi_ddiv>:
  40c890:	b570      	push	{r4, r5, r6, lr}
  40c892:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c89a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c89e:	bf1d      	ittte	ne
  40c8a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c8a4:	ea94 0f0c 	teqne	r4, ip
  40c8a8:	ea95 0f0c 	teqne	r5, ip
  40c8ac:	f000 f8a7 	bleq	40c9fe <__aeabi_ddiv+0x16e>
  40c8b0:	eba4 0405 	sub.w	r4, r4, r5
  40c8b4:	ea81 0e03 	eor.w	lr, r1, r3
  40c8b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c8bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c8c0:	f000 8088 	beq.w	40c9d4 <__aeabi_ddiv+0x144>
  40c8c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c8c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40c8cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40c8d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40c8d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40c8d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40c8dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40c8e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40c8e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40c8e8:	429d      	cmp	r5, r3
  40c8ea:	bf08      	it	eq
  40c8ec:	4296      	cmpeq	r6, r2
  40c8ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40c8f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40c8f6:	d202      	bcs.n	40c8fe <__aeabi_ddiv+0x6e>
  40c8f8:	085b      	lsrs	r3, r3, #1
  40c8fa:	ea4f 0232 	mov.w	r2, r2, rrx
  40c8fe:	1ab6      	subs	r6, r6, r2
  40c900:	eb65 0503 	sbc.w	r5, r5, r3
  40c904:	085b      	lsrs	r3, r3, #1
  40c906:	ea4f 0232 	mov.w	r2, r2, rrx
  40c90a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40c90e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40c912:	ebb6 0e02 	subs.w	lr, r6, r2
  40c916:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c91a:	bf22      	ittt	cs
  40c91c:	1ab6      	subcs	r6, r6, r2
  40c91e:	4675      	movcs	r5, lr
  40c920:	ea40 000c 	orrcs.w	r0, r0, ip
  40c924:	085b      	lsrs	r3, r3, #1
  40c926:	ea4f 0232 	mov.w	r2, r2, rrx
  40c92a:	ebb6 0e02 	subs.w	lr, r6, r2
  40c92e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c932:	bf22      	ittt	cs
  40c934:	1ab6      	subcs	r6, r6, r2
  40c936:	4675      	movcs	r5, lr
  40c938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40c93c:	085b      	lsrs	r3, r3, #1
  40c93e:	ea4f 0232 	mov.w	r2, r2, rrx
  40c942:	ebb6 0e02 	subs.w	lr, r6, r2
  40c946:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c94a:	bf22      	ittt	cs
  40c94c:	1ab6      	subcs	r6, r6, r2
  40c94e:	4675      	movcs	r5, lr
  40c950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40c954:	085b      	lsrs	r3, r3, #1
  40c956:	ea4f 0232 	mov.w	r2, r2, rrx
  40c95a:	ebb6 0e02 	subs.w	lr, r6, r2
  40c95e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c962:	bf22      	ittt	cs
  40c964:	1ab6      	subcs	r6, r6, r2
  40c966:	4675      	movcs	r5, lr
  40c968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40c96c:	ea55 0e06 	orrs.w	lr, r5, r6
  40c970:	d018      	beq.n	40c9a4 <__aeabi_ddiv+0x114>
  40c972:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40c976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40c97a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40c97e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40c982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40c986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40c98a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40c98e:	d1c0      	bne.n	40c912 <__aeabi_ddiv+0x82>
  40c990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c994:	d10b      	bne.n	40c9ae <__aeabi_ddiv+0x11e>
  40c996:	ea41 0100 	orr.w	r1, r1, r0
  40c99a:	f04f 0000 	mov.w	r0, #0
  40c99e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40c9a2:	e7b6      	b.n	40c912 <__aeabi_ddiv+0x82>
  40c9a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c9a8:	bf04      	itt	eq
  40c9aa:	4301      	orreq	r1, r0
  40c9ac:	2000      	moveq	r0, #0
  40c9ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c9b2:	bf88      	it	hi
  40c9b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c9b8:	f63f aeaf 	bhi.w	40c71a <__aeabi_dmul+0xde>
  40c9bc:	ebb5 0c03 	subs.w	ip, r5, r3
  40c9c0:	bf04      	itt	eq
  40c9c2:	ebb6 0c02 	subseq.w	ip, r6, r2
  40c9c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c9ca:	f150 0000 	adcs.w	r0, r0, #0
  40c9ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c9d2:	bd70      	pop	{r4, r5, r6, pc}
  40c9d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40c9d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40c9dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40c9e0:	bfc2      	ittt	gt
  40c9e2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c9e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c9ea:	bd70      	popgt	{r4, r5, r6, pc}
  40c9ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c9f0:	f04f 0e00 	mov.w	lr, #0
  40c9f4:	3c01      	subs	r4, #1
  40c9f6:	e690      	b.n	40c71a <__aeabi_dmul+0xde>
  40c9f8:	ea45 0e06 	orr.w	lr, r5, r6
  40c9fc:	e68d      	b.n	40c71a <__aeabi_dmul+0xde>
  40c9fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ca02:	ea94 0f0c 	teq	r4, ip
  40ca06:	bf08      	it	eq
  40ca08:	ea95 0f0c 	teqeq	r5, ip
  40ca0c:	f43f af3b 	beq.w	40c886 <__aeabi_dmul+0x24a>
  40ca10:	ea94 0f0c 	teq	r4, ip
  40ca14:	d10a      	bne.n	40ca2c <__aeabi_ddiv+0x19c>
  40ca16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ca1a:	f47f af34 	bne.w	40c886 <__aeabi_dmul+0x24a>
  40ca1e:	ea95 0f0c 	teq	r5, ip
  40ca22:	f47f af25 	bne.w	40c870 <__aeabi_dmul+0x234>
  40ca26:	4610      	mov	r0, r2
  40ca28:	4619      	mov	r1, r3
  40ca2a:	e72c      	b.n	40c886 <__aeabi_dmul+0x24a>
  40ca2c:	ea95 0f0c 	teq	r5, ip
  40ca30:	d106      	bne.n	40ca40 <__aeabi_ddiv+0x1b0>
  40ca32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ca36:	f43f aefd 	beq.w	40c834 <__aeabi_dmul+0x1f8>
  40ca3a:	4610      	mov	r0, r2
  40ca3c:	4619      	mov	r1, r3
  40ca3e:	e722      	b.n	40c886 <__aeabi_dmul+0x24a>
  40ca40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ca44:	bf18      	it	ne
  40ca46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ca4a:	f47f aec5 	bne.w	40c7d8 <__aeabi_dmul+0x19c>
  40ca4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40ca52:	f47f af0d 	bne.w	40c870 <__aeabi_dmul+0x234>
  40ca56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40ca5a:	f47f aeeb 	bne.w	40c834 <__aeabi_dmul+0x1f8>
  40ca5e:	e712      	b.n	40c886 <__aeabi_dmul+0x24a>

0040ca60 <__gedf2>:
  40ca60:	f04f 3cff 	mov.w	ip, #4294967295
  40ca64:	e006      	b.n	40ca74 <__cmpdf2+0x4>
  40ca66:	bf00      	nop

0040ca68 <__ledf2>:
  40ca68:	f04f 0c01 	mov.w	ip, #1
  40ca6c:	e002      	b.n	40ca74 <__cmpdf2+0x4>
  40ca6e:	bf00      	nop

0040ca70 <__cmpdf2>:
  40ca70:	f04f 0c01 	mov.w	ip, #1
  40ca74:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ca78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ca7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ca80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ca84:	bf18      	it	ne
  40ca86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40ca8a:	d01b      	beq.n	40cac4 <__cmpdf2+0x54>
  40ca8c:	b001      	add	sp, #4
  40ca8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ca92:	bf0c      	ite	eq
  40ca94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ca98:	ea91 0f03 	teqne	r1, r3
  40ca9c:	bf02      	ittt	eq
  40ca9e:	ea90 0f02 	teqeq	r0, r2
  40caa2:	2000      	moveq	r0, #0
  40caa4:	4770      	bxeq	lr
  40caa6:	f110 0f00 	cmn.w	r0, #0
  40caaa:	ea91 0f03 	teq	r1, r3
  40caae:	bf58      	it	pl
  40cab0:	4299      	cmppl	r1, r3
  40cab2:	bf08      	it	eq
  40cab4:	4290      	cmpeq	r0, r2
  40cab6:	bf2c      	ite	cs
  40cab8:	17d8      	asrcs	r0, r3, #31
  40caba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40cabe:	f040 0001 	orr.w	r0, r0, #1
  40cac2:	4770      	bx	lr
  40cac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40cac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cacc:	d102      	bne.n	40cad4 <__cmpdf2+0x64>
  40cace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40cad2:	d107      	bne.n	40cae4 <__cmpdf2+0x74>
  40cad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40cad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cadc:	d1d6      	bne.n	40ca8c <__cmpdf2+0x1c>
  40cade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40cae2:	d0d3      	beq.n	40ca8c <__cmpdf2+0x1c>
  40cae4:	f85d 0b04 	ldr.w	r0, [sp], #4
  40cae8:	4770      	bx	lr
  40caea:	bf00      	nop

0040caec <__aeabi_cdrcmple>:
  40caec:	4684      	mov	ip, r0
  40caee:	4610      	mov	r0, r2
  40caf0:	4662      	mov	r2, ip
  40caf2:	468c      	mov	ip, r1
  40caf4:	4619      	mov	r1, r3
  40caf6:	4663      	mov	r3, ip
  40caf8:	e000      	b.n	40cafc <__aeabi_cdcmpeq>
  40cafa:	bf00      	nop

0040cafc <__aeabi_cdcmpeq>:
  40cafc:	b501      	push	{r0, lr}
  40cafe:	f7ff ffb7 	bl	40ca70 <__cmpdf2>
  40cb02:	2800      	cmp	r0, #0
  40cb04:	bf48      	it	mi
  40cb06:	f110 0f00 	cmnmi.w	r0, #0
  40cb0a:	bd01      	pop	{r0, pc}

0040cb0c <__aeabi_dcmpeq>:
  40cb0c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40cb10:	f7ff fff4 	bl	40cafc <__aeabi_cdcmpeq>
  40cb14:	bf0c      	ite	eq
  40cb16:	2001      	moveq	r0, #1
  40cb18:	2000      	movne	r0, #0
  40cb1a:	f85d fb08 	ldr.w	pc, [sp], #8
  40cb1e:	bf00      	nop

0040cb20 <__aeabi_dcmplt>:
  40cb20:	f84d ed08 	str.w	lr, [sp, #-8]!
  40cb24:	f7ff ffea 	bl	40cafc <__aeabi_cdcmpeq>
  40cb28:	bf34      	ite	cc
  40cb2a:	2001      	movcc	r0, #1
  40cb2c:	2000      	movcs	r0, #0
  40cb2e:	f85d fb08 	ldr.w	pc, [sp], #8
  40cb32:	bf00      	nop

0040cb34 <__aeabi_dcmple>:
  40cb34:	f84d ed08 	str.w	lr, [sp, #-8]!
  40cb38:	f7ff ffe0 	bl	40cafc <__aeabi_cdcmpeq>
  40cb3c:	bf94      	ite	ls
  40cb3e:	2001      	movls	r0, #1
  40cb40:	2000      	movhi	r0, #0
  40cb42:	f85d fb08 	ldr.w	pc, [sp], #8
  40cb46:	bf00      	nop

0040cb48 <__aeabi_dcmpge>:
  40cb48:	f84d ed08 	str.w	lr, [sp, #-8]!
  40cb4c:	f7ff ffce 	bl	40caec <__aeabi_cdrcmple>
  40cb50:	bf94      	ite	ls
  40cb52:	2001      	movls	r0, #1
  40cb54:	2000      	movhi	r0, #0
  40cb56:	f85d fb08 	ldr.w	pc, [sp], #8
  40cb5a:	bf00      	nop

0040cb5c <__aeabi_dcmpgt>:
  40cb5c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40cb60:	f7ff ffc4 	bl	40caec <__aeabi_cdrcmple>
  40cb64:	bf34      	ite	cc
  40cb66:	2001      	movcc	r0, #1
  40cb68:	2000      	movcs	r0, #0
  40cb6a:	f85d fb08 	ldr.w	pc, [sp], #8
  40cb6e:	bf00      	nop

0040cb70 <__aeabi_dcmpun>:
  40cb70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40cb74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cb78:	d102      	bne.n	40cb80 <__aeabi_dcmpun+0x10>
  40cb7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40cb7e:	d10a      	bne.n	40cb96 <__aeabi_dcmpun+0x26>
  40cb80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40cb84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40cb88:	d102      	bne.n	40cb90 <__aeabi_dcmpun+0x20>
  40cb8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40cb8e:	d102      	bne.n	40cb96 <__aeabi_dcmpun+0x26>
  40cb90:	f04f 0000 	mov.w	r0, #0
  40cb94:	4770      	bx	lr
  40cb96:	f04f 0001 	mov.w	r0, #1
  40cb9a:	4770      	bx	lr

0040cb9c <__aeabi_d2iz>:
  40cb9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40cba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40cba4:	d215      	bcs.n	40cbd2 <__aeabi_d2iz+0x36>
  40cba6:	d511      	bpl.n	40cbcc <__aeabi_d2iz+0x30>
  40cba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40cbac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40cbb0:	d912      	bls.n	40cbd8 <__aeabi_d2iz+0x3c>
  40cbb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40cbb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40cbba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40cbbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40cbc2:	fa23 f002 	lsr.w	r0, r3, r2
  40cbc6:	bf18      	it	ne
  40cbc8:	4240      	negne	r0, r0
  40cbca:	4770      	bx	lr
  40cbcc:	f04f 0000 	mov.w	r0, #0
  40cbd0:	4770      	bx	lr
  40cbd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40cbd6:	d105      	bne.n	40cbe4 <__aeabi_d2iz+0x48>
  40cbd8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40cbdc:	bf08      	it	eq
  40cbde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40cbe2:	4770      	bx	lr
  40cbe4:	f04f 0000 	mov.w	r0, #0
  40cbe8:	4770      	bx	lr
  40cbea:	bf00      	nop

0040cbec <__aeabi_uldivmod>:
  40cbec:	b953      	cbnz	r3, 40cc04 <__aeabi_uldivmod+0x18>
  40cbee:	b94a      	cbnz	r2, 40cc04 <__aeabi_uldivmod+0x18>
  40cbf0:	2900      	cmp	r1, #0
  40cbf2:	bf08      	it	eq
  40cbf4:	2800      	cmpeq	r0, #0
  40cbf6:	bf1c      	itt	ne
  40cbf8:	f04f 31ff 	movne.w	r1, #4294967295
  40cbfc:	f04f 30ff 	movne.w	r0, #4294967295
  40cc00:	f000 b97a 	b.w	40cef8 <__aeabi_idiv0>
  40cc04:	f1ad 0c08 	sub.w	ip, sp, #8
  40cc08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40cc0c:	f000 f806 	bl	40cc1c <__udivmoddi4>
  40cc10:	f8dd e004 	ldr.w	lr, [sp, #4]
  40cc14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40cc18:	b004      	add	sp, #16
  40cc1a:	4770      	bx	lr

0040cc1c <__udivmoddi4>:
  40cc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40cc20:	468c      	mov	ip, r1
  40cc22:	460d      	mov	r5, r1
  40cc24:	4604      	mov	r4, r0
  40cc26:	9e08      	ldr	r6, [sp, #32]
  40cc28:	2b00      	cmp	r3, #0
  40cc2a:	d151      	bne.n	40ccd0 <__udivmoddi4+0xb4>
  40cc2c:	428a      	cmp	r2, r1
  40cc2e:	4617      	mov	r7, r2
  40cc30:	d96d      	bls.n	40cd0e <__udivmoddi4+0xf2>
  40cc32:	fab2 fe82 	clz	lr, r2
  40cc36:	f1be 0f00 	cmp.w	lr, #0
  40cc3a:	d00b      	beq.n	40cc54 <__udivmoddi4+0x38>
  40cc3c:	f1ce 0c20 	rsb	ip, lr, #32
  40cc40:	fa01 f50e 	lsl.w	r5, r1, lr
  40cc44:	fa20 fc0c 	lsr.w	ip, r0, ip
  40cc48:	fa02 f70e 	lsl.w	r7, r2, lr
  40cc4c:	ea4c 0c05 	orr.w	ip, ip, r5
  40cc50:	fa00 f40e 	lsl.w	r4, r0, lr
  40cc54:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40cc58:	0c25      	lsrs	r5, r4, #16
  40cc5a:	fbbc f8fa 	udiv	r8, ip, sl
  40cc5e:	fa1f f987 	uxth.w	r9, r7
  40cc62:	fb0a cc18 	mls	ip, sl, r8, ip
  40cc66:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40cc6a:	fb08 f309 	mul.w	r3, r8, r9
  40cc6e:	42ab      	cmp	r3, r5
  40cc70:	d90a      	bls.n	40cc88 <__udivmoddi4+0x6c>
  40cc72:	19ed      	adds	r5, r5, r7
  40cc74:	f108 32ff 	add.w	r2, r8, #4294967295
  40cc78:	f080 8123 	bcs.w	40cec2 <__udivmoddi4+0x2a6>
  40cc7c:	42ab      	cmp	r3, r5
  40cc7e:	f240 8120 	bls.w	40cec2 <__udivmoddi4+0x2a6>
  40cc82:	f1a8 0802 	sub.w	r8, r8, #2
  40cc86:	443d      	add	r5, r7
  40cc88:	1aed      	subs	r5, r5, r3
  40cc8a:	b2a4      	uxth	r4, r4
  40cc8c:	fbb5 f0fa 	udiv	r0, r5, sl
  40cc90:	fb0a 5510 	mls	r5, sl, r0, r5
  40cc94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40cc98:	fb00 f909 	mul.w	r9, r0, r9
  40cc9c:	45a1      	cmp	r9, r4
  40cc9e:	d909      	bls.n	40ccb4 <__udivmoddi4+0x98>
  40cca0:	19e4      	adds	r4, r4, r7
  40cca2:	f100 33ff 	add.w	r3, r0, #4294967295
  40cca6:	f080 810a 	bcs.w	40cebe <__udivmoddi4+0x2a2>
  40ccaa:	45a1      	cmp	r9, r4
  40ccac:	f240 8107 	bls.w	40cebe <__udivmoddi4+0x2a2>
  40ccb0:	3802      	subs	r0, #2
  40ccb2:	443c      	add	r4, r7
  40ccb4:	eba4 0409 	sub.w	r4, r4, r9
  40ccb8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ccbc:	2100      	movs	r1, #0
  40ccbe:	2e00      	cmp	r6, #0
  40ccc0:	d061      	beq.n	40cd86 <__udivmoddi4+0x16a>
  40ccc2:	fa24 f40e 	lsr.w	r4, r4, lr
  40ccc6:	2300      	movs	r3, #0
  40ccc8:	6034      	str	r4, [r6, #0]
  40ccca:	6073      	str	r3, [r6, #4]
  40cccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ccd0:	428b      	cmp	r3, r1
  40ccd2:	d907      	bls.n	40cce4 <__udivmoddi4+0xc8>
  40ccd4:	2e00      	cmp	r6, #0
  40ccd6:	d054      	beq.n	40cd82 <__udivmoddi4+0x166>
  40ccd8:	2100      	movs	r1, #0
  40ccda:	e886 0021 	stmia.w	r6, {r0, r5}
  40ccde:	4608      	mov	r0, r1
  40cce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cce4:	fab3 f183 	clz	r1, r3
  40cce8:	2900      	cmp	r1, #0
  40ccea:	f040 808e 	bne.w	40ce0a <__udivmoddi4+0x1ee>
  40ccee:	42ab      	cmp	r3, r5
  40ccf0:	d302      	bcc.n	40ccf8 <__udivmoddi4+0xdc>
  40ccf2:	4282      	cmp	r2, r0
  40ccf4:	f200 80fa 	bhi.w	40ceec <__udivmoddi4+0x2d0>
  40ccf8:	1a84      	subs	r4, r0, r2
  40ccfa:	eb65 0503 	sbc.w	r5, r5, r3
  40ccfe:	2001      	movs	r0, #1
  40cd00:	46ac      	mov	ip, r5
  40cd02:	2e00      	cmp	r6, #0
  40cd04:	d03f      	beq.n	40cd86 <__udivmoddi4+0x16a>
  40cd06:	e886 1010 	stmia.w	r6, {r4, ip}
  40cd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cd0e:	b912      	cbnz	r2, 40cd16 <__udivmoddi4+0xfa>
  40cd10:	2701      	movs	r7, #1
  40cd12:	fbb7 f7f2 	udiv	r7, r7, r2
  40cd16:	fab7 fe87 	clz	lr, r7
  40cd1a:	f1be 0f00 	cmp.w	lr, #0
  40cd1e:	d134      	bne.n	40cd8a <__udivmoddi4+0x16e>
  40cd20:	1beb      	subs	r3, r5, r7
  40cd22:	0c3a      	lsrs	r2, r7, #16
  40cd24:	fa1f fc87 	uxth.w	ip, r7
  40cd28:	2101      	movs	r1, #1
  40cd2a:	fbb3 f8f2 	udiv	r8, r3, r2
  40cd2e:	0c25      	lsrs	r5, r4, #16
  40cd30:	fb02 3318 	mls	r3, r2, r8, r3
  40cd34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40cd38:	fb0c f308 	mul.w	r3, ip, r8
  40cd3c:	42ab      	cmp	r3, r5
  40cd3e:	d907      	bls.n	40cd50 <__udivmoddi4+0x134>
  40cd40:	19ed      	adds	r5, r5, r7
  40cd42:	f108 30ff 	add.w	r0, r8, #4294967295
  40cd46:	d202      	bcs.n	40cd4e <__udivmoddi4+0x132>
  40cd48:	42ab      	cmp	r3, r5
  40cd4a:	f200 80d1 	bhi.w	40cef0 <__udivmoddi4+0x2d4>
  40cd4e:	4680      	mov	r8, r0
  40cd50:	1aed      	subs	r5, r5, r3
  40cd52:	b2a3      	uxth	r3, r4
  40cd54:	fbb5 f0f2 	udiv	r0, r5, r2
  40cd58:	fb02 5510 	mls	r5, r2, r0, r5
  40cd5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40cd60:	fb0c fc00 	mul.w	ip, ip, r0
  40cd64:	45a4      	cmp	ip, r4
  40cd66:	d907      	bls.n	40cd78 <__udivmoddi4+0x15c>
  40cd68:	19e4      	adds	r4, r4, r7
  40cd6a:	f100 33ff 	add.w	r3, r0, #4294967295
  40cd6e:	d202      	bcs.n	40cd76 <__udivmoddi4+0x15a>
  40cd70:	45a4      	cmp	ip, r4
  40cd72:	f200 80b8 	bhi.w	40cee6 <__udivmoddi4+0x2ca>
  40cd76:	4618      	mov	r0, r3
  40cd78:	eba4 040c 	sub.w	r4, r4, ip
  40cd7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40cd80:	e79d      	b.n	40ccbe <__udivmoddi4+0xa2>
  40cd82:	4631      	mov	r1, r6
  40cd84:	4630      	mov	r0, r6
  40cd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cd8a:	f1ce 0420 	rsb	r4, lr, #32
  40cd8e:	fa05 f30e 	lsl.w	r3, r5, lr
  40cd92:	fa07 f70e 	lsl.w	r7, r7, lr
  40cd96:	fa20 f804 	lsr.w	r8, r0, r4
  40cd9a:	0c3a      	lsrs	r2, r7, #16
  40cd9c:	fa25 f404 	lsr.w	r4, r5, r4
  40cda0:	ea48 0803 	orr.w	r8, r8, r3
  40cda4:	fbb4 f1f2 	udiv	r1, r4, r2
  40cda8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40cdac:	fb02 4411 	mls	r4, r2, r1, r4
  40cdb0:	fa1f fc87 	uxth.w	ip, r7
  40cdb4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40cdb8:	fb01 f30c 	mul.w	r3, r1, ip
  40cdbc:	42ab      	cmp	r3, r5
  40cdbe:	fa00 f40e 	lsl.w	r4, r0, lr
  40cdc2:	d909      	bls.n	40cdd8 <__udivmoddi4+0x1bc>
  40cdc4:	19ed      	adds	r5, r5, r7
  40cdc6:	f101 30ff 	add.w	r0, r1, #4294967295
  40cdca:	f080 808a 	bcs.w	40cee2 <__udivmoddi4+0x2c6>
  40cdce:	42ab      	cmp	r3, r5
  40cdd0:	f240 8087 	bls.w	40cee2 <__udivmoddi4+0x2c6>
  40cdd4:	3902      	subs	r1, #2
  40cdd6:	443d      	add	r5, r7
  40cdd8:	1aeb      	subs	r3, r5, r3
  40cdda:	fa1f f588 	uxth.w	r5, r8
  40cdde:	fbb3 f0f2 	udiv	r0, r3, r2
  40cde2:	fb02 3310 	mls	r3, r2, r0, r3
  40cde6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40cdea:	fb00 f30c 	mul.w	r3, r0, ip
  40cdee:	42ab      	cmp	r3, r5
  40cdf0:	d907      	bls.n	40ce02 <__udivmoddi4+0x1e6>
  40cdf2:	19ed      	adds	r5, r5, r7
  40cdf4:	f100 38ff 	add.w	r8, r0, #4294967295
  40cdf8:	d26f      	bcs.n	40ceda <__udivmoddi4+0x2be>
  40cdfa:	42ab      	cmp	r3, r5
  40cdfc:	d96d      	bls.n	40ceda <__udivmoddi4+0x2be>
  40cdfe:	3802      	subs	r0, #2
  40ce00:	443d      	add	r5, r7
  40ce02:	1aeb      	subs	r3, r5, r3
  40ce04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40ce08:	e78f      	b.n	40cd2a <__udivmoddi4+0x10e>
  40ce0a:	f1c1 0720 	rsb	r7, r1, #32
  40ce0e:	fa22 f807 	lsr.w	r8, r2, r7
  40ce12:	408b      	lsls	r3, r1
  40ce14:	fa05 f401 	lsl.w	r4, r5, r1
  40ce18:	ea48 0303 	orr.w	r3, r8, r3
  40ce1c:	fa20 fe07 	lsr.w	lr, r0, r7
  40ce20:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40ce24:	40fd      	lsrs	r5, r7
  40ce26:	ea4e 0e04 	orr.w	lr, lr, r4
  40ce2a:	fbb5 f9fc 	udiv	r9, r5, ip
  40ce2e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40ce32:	fb0c 5519 	mls	r5, ip, r9, r5
  40ce36:	fa1f f883 	uxth.w	r8, r3
  40ce3a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40ce3e:	fb09 f408 	mul.w	r4, r9, r8
  40ce42:	42ac      	cmp	r4, r5
  40ce44:	fa02 f201 	lsl.w	r2, r2, r1
  40ce48:	fa00 fa01 	lsl.w	sl, r0, r1
  40ce4c:	d908      	bls.n	40ce60 <__udivmoddi4+0x244>
  40ce4e:	18ed      	adds	r5, r5, r3
  40ce50:	f109 30ff 	add.w	r0, r9, #4294967295
  40ce54:	d243      	bcs.n	40cede <__udivmoddi4+0x2c2>
  40ce56:	42ac      	cmp	r4, r5
  40ce58:	d941      	bls.n	40cede <__udivmoddi4+0x2c2>
  40ce5a:	f1a9 0902 	sub.w	r9, r9, #2
  40ce5e:	441d      	add	r5, r3
  40ce60:	1b2d      	subs	r5, r5, r4
  40ce62:	fa1f fe8e 	uxth.w	lr, lr
  40ce66:	fbb5 f0fc 	udiv	r0, r5, ip
  40ce6a:	fb0c 5510 	mls	r5, ip, r0, r5
  40ce6e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40ce72:	fb00 f808 	mul.w	r8, r0, r8
  40ce76:	45a0      	cmp	r8, r4
  40ce78:	d907      	bls.n	40ce8a <__udivmoddi4+0x26e>
  40ce7a:	18e4      	adds	r4, r4, r3
  40ce7c:	f100 35ff 	add.w	r5, r0, #4294967295
  40ce80:	d229      	bcs.n	40ced6 <__udivmoddi4+0x2ba>
  40ce82:	45a0      	cmp	r8, r4
  40ce84:	d927      	bls.n	40ced6 <__udivmoddi4+0x2ba>
  40ce86:	3802      	subs	r0, #2
  40ce88:	441c      	add	r4, r3
  40ce8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40ce8e:	eba4 0408 	sub.w	r4, r4, r8
  40ce92:	fba0 8902 	umull	r8, r9, r0, r2
  40ce96:	454c      	cmp	r4, r9
  40ce98:	46c6      	mov	lr, r8
  40ce9a:	464d      	mov	r5, r9
  40ce9c:	d315      	bcc.n	40ceca <__udivmoddi4+0x2ae>
  40ce9e:	d012      	beq.n	40cec6 <__udivmoddi4+0x2aa>
  40cea0:	b156      	cbz	r6, 40ceb8 <__udivmoddi4+0x29c>
  40cea2:	ebba 030e 	subs.w	r3, sl, lr
  40cea6:	eb64 0405 	sbc.w	r4, r4, r5
  40ceaa:	fa04 f707 	lsl.w	r7, r4, r7
  40ceae:	40cb      	lsrs	r3, r1
  40ceb0:	431f      	orrs	r7, r3
  40ceb2:	40cc      	lsrs	r4, r1
  40ceb4:	6037      	str	r7, [r6, #0]
  40ceb6:	6074      	str	r4, [r6, #4]
  40ceb8:	2100      	movs	r1, #0
  40ceba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40cebe:	4618      	mov	r0, r3
  40cec0:	e6f8      	b.n	40ccb4 <__udivmoddi4+0x98>
  40cec2:	4690      	mov	r8, r2
  40cec4:	e6e0      	b.n	40cc88 <__udivmoddi4+0x6c>
  40cec6:	45c2      	cmp	sl, r8
  40cec8:	d2ea      	bcs.n	40cea0 <__udivmoddi4+0x284>
  40ceca:	ebb8 0e02 	subs.w	lr, r8, r2
  40cece:	eb69 0503 	sbc.w	r5, r9, r3
  40ced2:	3801      	subs	r0, #1
  40ced4:	e7e4      	b.n	40cea0 <__udivmoddi4+0x284>
  40ced6:	4628      	mov	r0, r5
  40ced8:	e7d7      	b.n	40ce8a <__udivmoddi4+0x26e>
  40ceda:	4640      	mov	r0, r8
  40cedc:	e791      	b.n	40ce02 <__udivmoddi4+0x1e6>
  40cede:	4681      	mov	r9, r0
  40cee0:	e7be      	b.n	40ce60 <__udivmoddi4+0x244>
  40cee2:	4601      	mov	r1, r0
  40cee4:	e778      	b.n	40cdd8 <__udivmoddi4+0x1bc>
  40cee6:	3802      	subs	r0, #2
  40cee8:	443c      	add	r4, r7
  40ceea:	e745      	b.n	40cd78 <__udivmoddi4+0x15c>
  40ceec:	4608      	mov	r0, r1
  40ceee:	e708      	b.n	40cd02 <__udivmoddi4+0xe6>
  40cef0:	f1a8 0802 	sub.w	r8, r8, #2
  40cef4:	443d      	add	r5, r7
  40cef6:	e72b      	b.n	40cd50 <__udivmoddi4+0x134>

0040cef8 <__aeabi_idiv0>:
  40cef8:	4770      	bx	lr
  40cefa:	bf00      	nop
  40cefc:	454c4449 	.word	0x454c4449
  40cf00:	00000000 	.word	0x00000000
  40cf04:	51726d54 	.word	0x51726d54
  40cf08:	00000000 	.word	0x00000000
  40cf0c:	20726d54 	.word	0x20726d54
  40cf10:	00637653 	.word	0x00637653

0040cf14 <__FUNCTION__.11288>:
  40cf14:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40cf24:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40cf34:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  40cf44:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

0040cf54 <__FUNCTION__.9901>:
  40cf54:	5f666968 646e6573 00000000              hif_send....

0040cf60 <__FUNCTION__.9911>:
  40cf60:	5f666968 00727369                       hif_isr.

0040cf68 <__FUNCTION__.9917>:
  40cf68:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040cf78 <__FUNCTION__.9932>:
  40cf78:	5f666968 65636572 00657669              hif_receive.

0040cf84 <__FUNCTION__.9947>:
  40cf84:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40cf94:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  40cfa4:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  40cfb4:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  40cfc4:	73657264 75622073 61662073 000a6c69     dress bus fail..
  40cfd4:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  40cfe4:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  40cff4:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  40d004:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  40d014:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  40d024:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  40d034:	61207473 64207070 276e6469 65732074     st app didn't se
  40d044:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  40d054:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  40d064:	66696828 61462029 2065736c 65746e69     (hif) False inte
  40d074:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  40d084:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  40d094:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  40d0a4:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  40d0b4:	7075656b 65687420 69686320 00000a70     keup the chip...
  40d0c4:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  40d0d4:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  40d0e4:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  40d0f4:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  40d104:	696c6176 72612064 656d7567 000a746e     valid argument..
  40d114:	20505041 75716552 65747365 69532064     APP Requested Si
  40d124:	6920657a 616c2073 72656772 61687420     ze is larger tha
  40d134:	6874206e 65722065 65766963 75622064     n the recived bu
  40d144:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  40d154:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  40d164:	64412064 73657264 65622073 646e6f79     d Address beyond
  40d174:	65687420 63657220 64657669 66756220      the recived buf
  40d184:	20726566 72646461 20737365 20646e61     fer address and 
  40d194:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  40d1a4:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  40d1b4:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40d1c4:	00000000                                ....

0040d1c8 <__FUNCTION__.9874>:
  40d1c8:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040d1d4 <__FUNCTION__.9898>:
  40d1d4:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040d1e4 <__FUNCTION__.9926>:
  40d1e4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40d1f4:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  40d204:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  40d214:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  40d224:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  40d234:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  40d244:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  40d254:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  40d264:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  40d274:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40d284:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40d294:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40d2a4:	2079656b 676e656c 25206874 00000a64     key length %d...
  40d2b4:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40d2c4:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40d2d4:	656e6966 65732064 79742063 000a6570     fined sec type..
  40d2e4:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40d2f4:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40d304:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40d314:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40d324:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40d334:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40d344:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040d354 <__FUNCTION__.9711>:
  40d354:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040d364 <__FUNCTION__.9805>:
  40d364:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  40d374:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40d384:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40d394:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40d3a4:	00000000 6f727245 68772072 20656c69     ....Error while 
  40d3b4:	64616572 20676e69 0a676572 00000000     reading reg.....
  40d3c4:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40d3d4:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40d3e4:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40d3f4:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40d404:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40d414:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40d424:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  40d434:	0000000a                                ....

0040d438 <__FUNCTION__.9792>:
  40d438:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040d444 <__FUNCTION__.9799>:
  40d444:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40d454:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  40d464:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  40d474:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40d484:	73616c66 69642068 6c626173 61662065     flash disable fa
  40d494:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40d4a4:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40d4b4:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40d4c4:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40d4d4:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40d4e4:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40d4f4:	20444920 0a786c25 00000000               ID %lx.....

0040d500 <__FUNCTION__.9176>:
  40d500:	5f697073 00646d63                       spi_cmd.

0040d508 <__FUNCTION__.9184>:
  40d508:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040d514 <__FUNCTION__.9200>:
  40d514:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040d524 <__FUNCTION__.9215>:
  40d524:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040d534 <__FUNCTION__.9225>:
  40d534:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040d544 <__FUNCTION__.9233>:
  40d544:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040d554 <__FUNCTION__.9242>:
  40d554:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040d564 <__FUNCTION__.9250>:
  40d564:	735f6d6e 725f6970 00646165              nm_spi_read.

0040d570 <__FUNCTION__.9267>:
  40d570:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040d57c <crc7_syndrome_table>:
  40d57c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40d58c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40d59c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40d5ac:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40d5bc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40d5cc:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40d5dc:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40d5ec:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40d5fc:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40d60c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40d61c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40d62c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40d63c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40d64c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40d65c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40d66c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40d67c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d68c:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d69c:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40d6ac:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40d6bc:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40d6cc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d6dc:	6e692064 6e726574 72206c61 20646165     d internal read 
  40d6ec:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40d6fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d70c:	6e692064 6e726574 77206c61 65746972     d internal write
  40d71c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40d72c:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d73c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40d74c:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40d75c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d76c:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40d77c:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40d78c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d79c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d7ac:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40d7bc:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d7cc:	656c6961 6c622064 206b636f 61746164     ailed block data
  40d7dc:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40d7ec:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d7fc:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40d80c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40d81c:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40d82c:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40d83c:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40d84c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d85c:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d86c:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40d87c:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40d88c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40d89c:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40d8ac:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40d8bc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d8cc:	61642064 62206174 6b636f6c 63726320     d data block crc
  40d8dc:	69727720 202c6574 20737562 6f727265      write, bus erro
  40d8ec:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40d8fc:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40d90c:	61746164 69727720 2e2e6574 00000a2e     data write......
  40d91c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d92c:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40d93c:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40d94c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d95c:	65722064 6e6f7073 72206573 2c646165     d response read,
  40d96c:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40d97c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d98c:	61642064 72206174 6f707365 2065736e     d data response 
  40d99c:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40d9ac:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40d9bc:	656c6961 61642064 72206174 6f707365     ailed data respo
  40d9cc:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40d9dc:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40d9ec:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40d9fc:	61657220 62202c64 65207375 726f7272      read, bus error
  40da0c:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40da1c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40da2c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40da3c:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40da4c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40da5c:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40da6c:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40da7c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40da8c:	65722064 6e6f7073 202c6573 64616572     d response, read
  40da9c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40daac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40dabc:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40dacc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40dadc:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40daec:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40dafc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40db0c:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40db1c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40db2c:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  40db3c:	253c2074 000a3e64 20544547 48207325     t <%d>..GET %s H
  40db4c:	2f505454 0d312e31 6341200a 74706563     TTP/1.1.. Accept
  40db5c:	2f2a203a 0d0a0d2a 0000000a 57202d2d     : */*.......-- W
  40db6c:	31434e49 20303035 65696c63 6520746e     INC1500 client e
  40db7c:	706d6178 2d20656c 2d0a0d2d 4153202d     xample --..-- SA
  40db8c:	3037454d 4c50582d 2d2d2044 2d2d0a0d     ME70-XPLD --..--
  40db9c:	6d6f4320 656c6970 4a203a64 20206e75      Compiled: Jun  
  40dbac:	30322031 31203232 36313a37 2037303a     1 2022 17:16:07 
  40dbbc:	0a0d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     --..------------
  40dbcc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40dbdc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
  40dbec:	00000a0d 69666957 00000000 636f7270     ....Wifi....proc
  40dbfc:	00737365 686c6166 6d652061 69726320     ess.falha em cri
  40dc0c:	6f207261 6d657320 726f6661 7562206f     ar o semaforo bu
  40dc1c:	00000a74 6f736572 5f65766c 203a6263     t...resolve_cb: 
  40dc2c:	49207325 64612050 73657264 73692073     %s IP address is
  40dc3c:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
  40dc4c:	00000000 6b636f73 6d5f7465 635f6773     ....socket_msg_c
  40dc5c:	656e6e6f 000a7463 6b636f73 635f7465     onnect..socket_c
  40dc6c:	63203a62 656e6e6f 6f207463 000a206b     b: connect ok ..
  40dc7c:	6b636f73 635f7465 63203a62 656e6e6f     socket_cb: conne
  40dc8c:	65207463 726f7272 000a0d21 3d44454c     ct error!...LED=
  40dc9c:	00000031 6b736174 6f727020 73736563     1...task process
  40dcac:	65726320 64657461 00000a20 54415453      created ...STAT
  40dcbc:	57203a45 20544941 0000000a 54415453     E: WAIT ....STAT
  40dccc:	47203a45 0a205445 00000000 6174732f     E: GET ...../sta
  40dcdc:	00737574 2073250a 74732061 676e6972     tus..%s a string
  40dcec:	0000000a 54415453 50203a45 2054534f     ....STATE: POST 
  40dcfc:	0000000a 54534f50 74732f20 73757461     ....POST /status
  40dd0c:	54544820 2e312f50 6f430a30 6e65746e      HTTP/1.0.Conten
  40dd1c:	79542d74 203a6570 6c707061 74616369     t-Type: applicat
  40dd2c:	2f6e6f69 77772d78 6f662d77 752d6d72     ion/x-www-form-u
  40dd3c:	6e656c72 65646f63 6f430a64 6e65746e     rlencoded.Conten
  40dd4c:	654c2d74 6874676e 6425203a 73250a0a     t-Length: %d..%s
  40dd5c:	00000000 54415453 41203a45 0a204b43     ....STATE: ACK .
  40dd6c:	00000000 54415453 4d203a45 0a204753     ....STATE: MSG .
  40dd7c:	00000000 0064656c 6176204f 20726f6c     ....led.O valor 
  40dd8c:	25206564 00000a64 00000030 4c534544     de %d...0...DESL
  40dd9c:	44414749 0000004f 4147494c 00004f44     IGADO...LIGADO..
  40ddac:	54415453 44203a45 20454e4f 0000000a     STATE: DONE ....
  40ddbc:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
  40ddcc:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
  40dddc:	0d296425 0000000a 61626d45 64616372     %d).....Embarcad
  40ddec:	0000736f 6e69616d 6f63203a 63656e6e     os..main: connec
  40ddfc:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
  40de0c:	2e2e7325 000a0d2e 6372614d 6e6f4d6f     %s......MarcoMon
  40de1c:	61727473 0000006f 2e323931 2e383631     strao...192.168.
  40de2c:	382e3035 00000032 6b636f73 69207465     50.82...socket i
  40de3c:	2074696e 0000000a 6e69616d 6166203a     nit ....main: fa
  40de4c:	64656c69 206f7420 61657263 54206574     iled to create T
  40de5c:	63205043 6e65696c 6f732074 74656b63     CP client socket
  40de6c:	72726520 0d21726f 0000000a 6b636f73      error!.....sock
  40de7c:	63207465 656e6e6f 6e697463 00000a67     et connecting...
  40de8c:	6e69616d 7265203a 20726f72 6e6e6f63     main: error conn
  40de9c:	20746365 73206f74 656b636f 00000a74     ect to socket...
  40deac:	63617473 766f206b 6c667265 2520776f     stack overflow %
  40debc:	73252078 00000a0d 69666977 3a62635f     x %s....wifi_cb:
  40decc:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
  40dedc:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
  40deec:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
  40defc:	5443454e 0a0d4445 00000000 69666977     NECTED......wifi
  40df0c:	3a62635f 20504920 72646461 20737365     _cb: IP address 
  40df1c:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
  40df2c:	00000000 6b636f73 635f7465 59203a62     ....socket_cb: Y
  40df3c:	3a726165 2c642520 6e6f4d20 203a6874     ear: %d, Month: 
  40df4c:	202c6425 20656854 20544d47 656d6974     %d, The GMT time
  40df5c:	20736920 253a7525 3a753230 75323025      is %u:%02u:%02u
  40df6c:	00000a0d                                ....

0040df70 <_global_impure_ptr>:
  40df70:	20400030 00464e49 00666e69 004e414e     0.@ INF.inf.NAN.
  40df80:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40df90:	46454443 00000000 33323130 37363534     CDEF....01234567
  40dfa0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40dfb0:	0000296c                                l)..

0040dfb4 <blanks.7223>:
  40dfb4:	20202020 20202020 20202020 20202020                     

0040dfc4 <zeroes.7224>:
  40dfc4:	30303030 30303030 30303030 30303030     0000000000000000

0040dfd4 <blanks.7217>:
  40dfd4:	20202020 20202020 20202020 20202020                     

0040dfe4 <zeroes.7218>:
  40dfe4:	30303030 30303030 30303030 30303030     0000000000000000
  40dff4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40e004:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40e014:	00000000                                ....

0040e018 <__mprec_bigtens>:
  40e018:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40e028:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40e038:	7f73bf3c 75154fdd                       <.s..O.u

0040e040 <__mprec_tens>:
  40e040:	00000000 3ff00000 00000000 40240000     .......?......$@
  40e050:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40e060:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40e070:	00000000 412e8480 00000000 416312d0     .......A......cA
  40e080:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40e090:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40e0a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40e0b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40e0c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40e0d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40e0e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40e0f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40e100:	79d99db4 44ea7843                       ...yCx.D

0040e108 <p05.6055>:
  40e108:	00000005 00000019 0000007d              ........}...

0040e114 <_ctype_>:
  40e114:	20202000 20202020 28282020 20282828     .         ((((( 
  40e124:	20202020 20202020 20202020 20202020                     
  40e134:	10108820 10101010 10101010 10101010      ...............
  40e144:	04040410 04040404 10040404 10101010     ................
  40e154:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40e164:	01010101 01010101 01010101 10101010     ................
  40e174:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40e184:	02020202 02020202 02020202 10101010     ................
  40e194:	00000020 00000000 00000000 00000000      ...............
	...

0040e218 <_init>:
  40e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e21a:	bf00      	nop
  40e21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40e21e:	bc08      	pop	{r3}
  40e220:	469e      	mov	lr, r3
  40e222:	4770      	bx	lr

0040e224 <__init_array_start>:
  40e224:	0040915d 	.word	0x0040915d

0040e228 <__frame_dummy_init_array_entry>:
  40e228:	00400165                                e.@.

0040e22c <_fini>:
  40e22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e22e:	bf00      	nop
  40e230:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40e232:	bc08      	pop	{r3}
  40e234:	469e      	mov	lr, r3
  40e236:	4770      	bx	lr

0040e238 <__fini_array_start>:
  40e238:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <POSTDATA>:
20400020:	dc98 0040                                   ..@.

20400024 <tcp_client_socket>:
20400024:	00ff 0000                                   ....

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	d038 2040                                   8.@ 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	bfd5 0040 b0f1 0040 0000 0000 e114 0040     ..@...@.......@.
2040054c:	e010 0040 dc4c 0040 dc4c 0040 dc4c 0040     ..@.L.@.L.@.L.@.
2040055c:	dc4c 0040 dc4c 0040 dc4c 0040 dc4c 0040     L.@.L.@.L.@.L.@.
2040056c:	dc4c 0040 dc4c 0040 ffff ffff ffff ffff     L.@.L.@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
